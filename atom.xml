<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>涛哥的博客</title>
  
  <subtitle>欢迎来访</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jaredtao.github.io/"/>
  <updated>2021-01-21T01:08:31.265Z</updated>
  <id>https://jaredtao.github.io/</id>
  
  <author>
    <name>JaredTao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>玩转QtQuick(1)-SceneGraph场景图简介</title>
    <link href="https://jaredtao.github.io/2021/01/20/%E7%8E%A9%E8%BD%ACQtQuick(1)-SceneGraph%E5%9C%BA%E6%99%AF%E5%9B%BE%E7%AE%80%E4%BB%8B/"/>
    <id>https://jaredtao.github.io/2021/01/20/玩转QtQuick(1)-SceneGraph场景图简介/</id>
    <published>2021-01-20T05:44:23.000Z</published>
    <updated>2021-01-21T01:08:31.265Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#简介">简介</a></li><li><a href="#qt-quick-中的场景图">Qt Quick 中的“场景图”</a></li><li><a href="#qt-quick-场景图的结构">Qt Quick “场景图”的结构</a><ul><li><a href="#scene-graph-api--场景图接口">Scene Graph API / “场景图”接口</a></li><li><a href="#节点">节点</a></li><li><a href="#预处理">预处理</a></li><li><a href="#节点所有权">节点所有权</a></li><li><a href="#材质">材质</a></li><li><a href="#便捷的节点">便捷的节点</a></li></ul></li><li><a href="#场景图和渲染">“场景图”和渲染</a></li><li><a href="#渲染循环">渲染循环</a><ul><li><a href="#线程渲染循环">线程渲染循环</a></li><li><a href="#非线程渲染循环-基本渲染循环和窗口渲染循环">非线程渲染循环 (基本渲染循环和窗口渲染循环)</a></li><li><a href="#使用qquickrendercontrol自定义渲染控制">使用QQuickRenderControl自定义渲染控制</a></li><li><a href="#场景图和原生图形api的混合使用">“场景图”和原生图形API的混合使用</a></li><li><a href="#自定义item使用qpainter">自定义Item使用QPainter</a></li><li><a href="#日志支持">日志支持</a></li><li><a href="#场景图后端">“场景图”后端</a></li></ul></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这是《玩转QtQuick》系列文章的第一篇，主要是介绍Qt Quick Scene Graph “场景图”的关键特性、主要架构及实现原理等等。</p><p>(不是QWidget 框架中那个 QGraphicsView哦，是Qt Quick的Scene Graph，不一样)</p><p>Scene Graph 是QtQuick/Qml所依赖的渲染框架。</p><p><strong><strong>本文会涉及到一些图形学的基本概念，例如：材质、纹理、光栅化、图元等，建议参考相关资料，本文不做进一步的解释。</strong></strong></p><p>因为Qt官方文档写的比较全面，所以本文主要是对官方文档的翻译，同时会补充一些个人理解。</p><p>翻译主要参考Qt5.15的文档，适当做了一些调整，尽量信达雅，尽量说人话。</p><p>下面翻译开始</p><h2 id="Qt-Quick-中的“场景图”"><a href="#Qt-Quick-中的“场景图”" class="headerlink" title="Qt Quick 中的“场景图”"></a>Qt Quick 中的“场景图”</h2><p>Qt Quick 2 使用了专用的“场景图”，然后遍历并通过图形API(例如OpenGL、OpenGL ES、Vulkan、Metal 或Direct 3D)渲染该“场景图”。</p><p>将“场景图”用于图形渲染而不是传统的命令式绘图系统(QPainter之类的)，意味着可以在帧之间保留要渲染的场景，并且在渲染开始之前就知道要</p><p>渲染的完整图元集。这为许多优化打开了大门，例如：通过批量渲染最大程度减少状态变化、丢弃被遮挡的图元。</p><hr><p>再举个具体的例子，假设用户界面包含一个列表，列表有10个节点，其中每个节点都有背景色、图标和文本。</p><p>使用传统的绘图技术，这将导致30次绘图调用和30次状态更改。</p><p>而“场景图”可以重组原始图元进行渲染，以便在一次调用中绘制所有背景，然后绘制所有图标，最后绘制所有文本，</p><p>从而将绘制调用的总数减少到3次。这样可以显著提高硬件的性能。</p><hr><p>“场景图”与Qt Quick 2.0 紧密相关，不能单独使用。“场景图”由<code>QQuickWindow</code>类管理和渲染，自定义Item类型</p><p>可以通过调用<code>QQuickItem::updatePaintNode()</code>将其图元添加到“场景图”中。</p><p>“场景图”是Item场景的图形表示，它是一个独立的结构，其中包含足以渲染所有节点的信息。</p><p>设置完成后，就可以独立于项目状态对其进行操作和渲染。</p><p>在许多平台上，“场景图”会在GUI线程准备下一帧状态时，在专用渲染线程上进行渲染。</p><p><strong><strong>注意：本文列出的许多信息特定于 Qt “场景图”的内置默认行为。如果使用替代的方案时，并非所有概念都适用。</strong></strong></p><h2 id="Qt-Quick-“场景图”的结构"><a href="#Qt-Quick-“场景图”的结构" class="headerlink" title="Qt Quick “场景图”的结构"></a>Qt Quick “场景图”的结构</h2><p>“场景图” 由许多预定义的节点类型组成，每种类型都有专门的用途。</p><p>尽管我们将其称为“场景图”，但更精确的定义是“节点树”。</p><p>该树根据Qml场景中的<code>QQuickItem</code>类型构建，然后在内部对该场景进行渲染，最终呈现该场景。</p><p>“节点” 本身不包含任何 绘制 或者 paint() 虚函数。</p><p>“节点树”主要由内建的预定义类型组成，用户也可以添加具有自定义内容的完整子树，包括表示3D模型的子树。</p><h3 id="Scene-Graph-API-“场景图”接口"><a href="#Scene-Graph-API-“场景图”接口" class="headerlink" title="Scene Graph API / “场景图”接口"></a>Scene Graph API / “场景图”接口</h3><p>一般是指Qt Quick中 <code>QSG</code>开头的所有类。</p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>对用户而言,最重要的节点是<code>QSGGeometryNode</code>。它用来实现自定义图形中的几何形状和材质。</p><p>使用<code>QSGGeometry</code>可以定义几何坐标，并描述形状或者图元网格。它可以是直线，矩形，多边形，许多</p><p>不连续的矩形或者复杂的3D网格。材质定义如何填充此图形的每个像素。</p><p>一个节点可以有任意数量的子节点，并且几何节点将被渲染，以便它们以子顺序出现，且父级位于其子级之后。</p><p><strong><strong>注意：这并未说明渲染器中的实际渲染顺序，仅保证视觉顺序。</strong></strong></p><p>有效的节点如下:</p><table><thead><tr><th>节点名称</th><th>描述</th></tr></thead><tbody><tr><td>QSGNode</td><td>“场景图”中所有节点的基类</td></tr><tr><td>QSGGeometryNode</td><td>用于“场景图”中所有可渲染的内容</td></tr><tr><td>QSGClipNode</td><td>“场景图”中实现“切割”功能</td></tr><tr><td>QSGOpacityNode</td><td>用来改变透明度</td></tr><tr><td>QSGTransformNode</td><td>实现旋转、平移、缩放等几何变换</td></tr></tbody></table><p>自定义节点通过继承<code>QQuickItem</code>类，重写<code>QQuickItem::updatePaintNode()</code>，并且设置 <code>QQuickItem::ItemHasContents</code> 标志的方式，添加到“场景图”。</p><p><strong><strong><em>警告：至关重要的是, 原生图形（OpenGL，Vulkan，Metal等）操作以及与“场景图”的交互只能在渲染线程中进行，主要</em></strong></strong></p><p><strong><strong><em>在<code>updatePaintNode()</code>调用期间进行。经验法则是仅在<code>QQuickItem::updatePaintNode()</code>函数内使用带有“QSG”前缀的类。</em></strong></strong></p><p>更多详细的信息，可以参考Qt文档： Scene Graph - Custom Geometry</p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>节点具有虚函数<code>QSGNode::preprocess()</code>,该函数将在渲染“场景图”之前被调用。</p><p>节点子类可以设置标志<code>QSGNode::UsePreprocess</code>并重写<code>QSGNode::preprocess()</code>函数以对其节点进行预处理。</p><p>例如, 更新纹理的一部分, 或者将贝塞尔曲线划分为当前比例因子的正确细节级别。</p><h3 id="节点所有权"><a href="#节点所有权" class="headerlink" title="节点所有权"></a>节点所有权</h3><p>节点的所有权归创建者，或者设置标志<code>QSGNode::OwnedByParent</code>后归“场景图”。</p><p>通常将所有权分配给“场景图”是可取的，因为这样可以简化“场景图”位于GUI线程之外时的清理操作。</p><h3 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h3><p>材质描述如何填充<code>QSGGeometryNode</code>中几何图形的内部。它封装了图形管线中顶点和片元阶段的着色器，并提供了足够的灵活性，</p><p>尽管大多数Qt Quick 项目本身仅使用了非常基本的材质，例如纯色和纹理填充。</p><p>想要对Qml中Item使用自定义着色的用户，可以直接在Qml中使用<code>ShaderEffect</code>。</p><p>下面是一个完整的材质类列表：</p><table><thead><tr><th>材质名称</th><th>描述</th></tr></thead><tbody><tr><td>QSGMaterial</td><td>封装了“着色器程序”的渲染状态</td></tr><tr><td>QSGMaterialRhiShader</td><td>表示独立于图形API的“着色器程序”</td></tr><tr><td>QSGMaterialShader</td><td>表示渲染器中的OpenGL“着色器程序”</td></tr><tr><td>QSGMaterialType</td><td>与<code>QSGMaterial</code>结合用作唯一类型标记</td></tr><tr><td>QSGFlatColorMaterial</td><td>“场景图”中渲染纯色图元的便捷方法</td></tr><tr><td>QSGOpaqueTextureMaterial</td><td>“场景图”中渲染不透明纹理图元的便捷方法</td></tr><tr><td>QSGTextureMaterial</td><td>“场景图”中渲染纹理图元的便捷方法</td></tr><tr><td>QSGVertexColorMaterial</td><td>“场景图”中渲染 逐顶点彩色图元的便捷方法</td></tr></tbody></table><p>更多详细的信息，可以参考Qt文档： Scene Graph - Simple Material </p><h3 id="便捷的节点"><a href="#便捷的节点" class="headerlink" title="便捷的节点"></a>便捷的节点</h3><p>“场景图”API是一套 偏底层的接口，专注于性能而不是易用性。</p><p>从头开始编写自定义的几何图形和材质，即使是最基本的几何图形和材质，也需要大量的代码。</p><p>因此，“场景图”API包含了一些节点类，以使最常用自定义节点的开发更便捷。</p><table><thead><tr><th>节点名称</th><th>描述</th></tr></thead><tbody><tr><td>QSGSimpleRectNode</td><td><code>QSGGeometryNode</code>的子类，定义了矩形图元和纯色材质</td></tr><tr><td>QSGSimpleTextureNode</td><td><code>QSGGeometryNode</code>的子类，定义了矩形图元和纹理材质</td></tr></tbody></table><h2 id="“场景图”和渲染"><a href="#“场景图”和渲染" class="headerlink" title="“场景图”和渲染"></a>“场景图”和渲染</h2><p>“场景图”的渲染发生在<code>QQuickWindow</code>类的内部，并且没有公共API可以访问它。</p><p>但是，渲染管线中有一些地方可以让用户附加应用程序代码。</p><p>可通过直接调用“场景图”使用的图形API(OpenGL、Vulkan、Metal等)来添加自定义“场景图”内容，或插入</p><p>任意渲染命令。插入点由“渲染循环”定义。</p><p>有关“场景图”渲染器如何工作的详细说明，可以参考Qt文档: Qt Quick Scene Graph Default Renderer。</p><h2 id="渲染循环"><a href="#渲染循环" class="headerlink" title="渲染循环"></a>渲染循环</h2><p>共有三种渲染循环变体: 基本渲染循环(basic)，窗口渲染循环(windows)和线程渲染循环(threaded)。</p><p>其中，基本渲染循环和窗口渲染循环是单线程的，线程渲染循环在专用线程上执行“场景图”渲染。</p><p>Qt尝试根据平台及可能使用的图形驱动程序选择合适的渲染循环。如果这不能满足你的需求，或者处于测试的目的，可以使用环境变量</p><p><code>QSG_RENDER_LOOP</code>强制使用指定的渲染循环。要验证使用哪个渲染循环，请启用<code>qt.scenegraph.general</code>日志类别。</p><hr><p>注意：线程渲染循环和窗口渲染循环 依赖于图形API实现来进行节流，例如，在OpenGL环境下，“请求交换间隔”为1。</p><p>一些图形驱动程序允许用户忽略此设置并将其关闭，而忽略Qt的请求。</p><p>在不阻塞“交换缓冲区”操作(或其它位置)的情况下，渲染循环将以尽快的速度运行动画并使CPU 100%运转。</p><p>如果已知系统无法提供基于<code>vsync</code>的限制,请通过设置环境变量<code>QSG_RENDER_LOOP = basic</code>使用 基本渲染循环。</p><h3 id="线程渲染循环"><a href="#线程渲染循环" class="headerlink" title="线程渲染循环"></a>线程渲染循环</h3><p>在许多环境中，“场景图”将在专用渲染线程上进行。这样做是为了增加多核处理器的并行度，并更好地利用停顿时间。</p><p>这可以显著提高性能，但是与“场景图”进行交互的位置和时间加了一些限制。</p><p>以下是关于OpenGL环境下如何使用线程渲染循环的简单概述。除了OpenGL上下文的特定要求外，其它图形API的步骤也是相同的。</p><p><img src="/images/QtQuick/threadRenderLoop.png" alt=""></p><ol><li><p>Qml场景中发生变化，触发调用<code>QQuickItem::update()</code>， 这可能是动画或者用户操作的结果。</p><p>一个 <code>事件</code>会被<code>post</code>到渲染线程来启动新的一帧。</p></li><li><p>渲染线程准备渲染新的一帧，GUI线程会启动阻塞。</p></li><li><p>当渲染线程准备新的一帧时，GUI线程调用<code>QQuickItem::updatePolish()</code> 对场景中节点进行最终的“润色”,再渲染它们。</p></li><li><p>GUI 线程阻塞。</p></li><li><p><code>QQuickWindow::beforeSynchronizing()</code>信号发出。应用程序可以对此信号进行直连(<code>Qt::DirectConnection</code>),</p><p>以进行<code>QQuickItem::updatePaintNode()</code>之前所需的任何准备工作。</p></li><li><p>将Qml状态同步到“场景图”中。自上一帧以来，所有已更改的节点上调用<code>QQuickItem::updatePaintNode()</code>函数完成同步。</p><p>这是Qml与“场景图”中的节点唯一的交互时机。</p></li><li><p>GUI线程不再阻塞。</p></li><li><p>渲染“场景图”：</p><p> a. <code>QQuickWindow::beforeRendering()</code> 信号发出。应用程序可以直连(<code>Qt::DirectConnection</code>)此信号,来</p><p>  调用自定义图形API，然后将其可视化渲染在Qml场景之下。</p><p> b. 指定了<code>QSGNode::UsePreprocess</code>标志的节点将调用其<code>QSGNode::preprocess()</code>函数。</p><p> c. 渲染器处理节点。</p><p> d. 渲染器生成状态并记录使用中的图形API的绘制调用。</p><p> e. <code>QQuickWindow::afterRendering</code> 信号发出。应用程序可以直连(<code>Qt::DirectConnection</code>)此信号,来</p><p> 调用自定义图形API，然后将其可视化渲染在Qml场景之上。</p><p> f. 新的一帧准备就绪。交换缓冲区(OpenGL)，或者记录当前命令，然后将命令缓冲区提交到图形队列(Vulkan,Metal)。</p><p> <code>QQuickWindow::frameSwapped()</code>信号发出。</p></li><li><p>渲染线程正在渲染时，GUI可以自由地进行动画、处理事件等。</p></li></ol><p>当前默认情况下，线程渲染循环工作在 带opengl32.dll的Windows平台,具有Metal的MacOS平台，移动平台，</p><p>具有EGLFS的嵌入式Linux,以及平台无关的Vulkan环境，但这可能会有所改变。</p><p>通过在环境变量中设置<code>QSG_RENDER_LOOP=threaded</code>,可以强制使用线程渲染器。</p><h3 id="非线程渲染循环-基本渲染循环和窗口渲染循环"><a href="#非线程渲染循环-基本渲染循环和窗口渲染循环" class="headerlink" title="非线程渲染循环 (基本渲染循环和窗口渲染循环)"></a>非线程渲染循环 (基本渲染循环和窗口渲染循环)</h3><p>当前默认在使用非线程渲染循环的环境，包括使用ANGLE及非默认opengl32实现的windows平台，使用OpenGL的MacOS，</p><p>以及一些特殊驱动的linux环境。</p><p>这主要是一种预防措施，因为并非所有的OpenGL驱动和窗口系统的组合都经过测试。同时，诸如ANGLE  或 </p><p>Mesa llvmpipe之类的实现根本无法在线程渲染中正常运行。因此，对于这些环境，不能使用线程渲染。</p><hr><p>在MacOS OpenGL环境下，使用XCode 10 (10.14 SDK) 或更高版本进行构建时不支持线程渲染循环，因为这会选择在</p><p>MacOS 10.14上使用“基于图层的视图”。你可以使用XCode 9 (10.13 SDK)进行构建，以避开“基于图层的视图”,这种</p><p>情况下，线程渲染循环可以用并且默认会启用。</p><p>Metal没有这样的限制。</p><hr><p>非线程渲染循环默认在使用ANGLE的windows平台，而“基本渲染循环”用于其它需要非线程渲染循环的平台。</p><p>即使使用非线程渲染循环，也应像使用线程渲染循环一样编写代码，否则将使代码不可移植。</p><p>以下是非线程渲染循环中帧渲染序列的简化图示。</p><p><img src="/images/QtQuick/non-threadRenderLoop.png" alt=""></p><h3 id="使用QQuickRenderControl自定义渲染控制"><a href="#使用QQuickRenderControl自定义渲染控制" class="headerlink" title="使用QQuickRenderControl自定义渲染控制"></a>使用QQuickRenderControl自定义渲染控制</h3><p>使用QQuickRenderControl时，驱动渲染循环的责任将转移到应用程序中。</p><p>在这种情况下，不使用内置的渲染循环。 </p><p>取而代之的是，由应用程序在适当的时候调用 <code>polish</code> <code>synchronize</code> <code>rendering</code>等渲染步骤,实现类似于上述</p><p>行为的线程渲染循环或非线程渲染循环。</p><h3 id="“场景图”和原生图形API的混合使用"><a href="#“场景图”和原生图形API的混合使用" class="headerlink" title="“场景图”和原生图形API的混合使用"></a>“场景图”和原生图形API的混合使用</h3><p>“场景图”提供了两种方法，来集成应用程序提供的图形命令：</p><p>直接发出OpenGL、Vulkan、Metal等命令，以及在“场景图”中创建纹理化节点。</p><hr><p>通过连接到<code>QQuickWindow::beforeRendering</code> 和 <code>QQuickWindow::afterRendering()</code>信号，应用程序可以直接在“场景图”</p><p>渲染的同一上下文中进行OpenGL调用。</p><p>使用Vulkan或者Metal之类的API，应用程序可以通过<code>QSGRendererInterface</code>来查询本机对象，例如“场景图”的命令缓冲区，</p><p>并在认为合适的情况下，向其记录命令。</p><p>如信号的名称所示，用户随后可以在Qt Quick “场景图”下方或者上方渲染内容。</p><p>以这种方式集成的好处是不需要额外的帧缓冲区或者内存来执行渲染，并且消除了可能昂贵的纹理化步骤。</p><p>缺点是Qt Quick 决定何时调用信号，这也是唯一允许OpenGL应用程序绘制的时间点。</p><hr><p>Qt提供了一些 “场景图”相关的示例，可在<code>examples</code>中找到:</p><table><thead><tr><th>例子名称</th><th>描述</th></tr></thead><tbody><tr><td>Scene Graph - OpenGL Under QML</td><td>示例通过“场景图”的信号使用OpenGL</td></tr><tr><td>Scene Graph - Direct3D 11 Under QML</td><td>示例通过“场景图”的信号使用Direct3D</td></tr><tr><td>Scene Graph - Metal Under QML</td><td>示例通过“场景图”的信号使用Metal</td></tr><tr><td>Scene Graph - Vulkan Under QML</td><td>示例通过“场景图”的信号使用Vulkan</td></tr></tbody></table><hr><p>另一个替代方式，是创建一个 <code>QQuickFrameBufferObject</code> (当前仅适用OpenGL)，在这个FBO内部渲染，然后将其</p><p>作为纹理显示在“场景图”中。</p><p>“Scene Graph - Rendering FBOs” 示例如何完成此操作。</p><hr><p>还可以组合多个渲染上下文和多个线程以创建要在“场景图”中显示的内容。</p><p>“The Scene Graph - Rendering FBOs in a thread” 示例如何完成此操作。</p><hr><p>“Scene Graph - Metal Texture Import”示例直接使用基础API创建和渲染纹理，然后在自定义<code>QQuickItem</code>中的</p><p>“场景图”中包装和使用此资源。该示例适用了Metal，但是概念也适用于所有其它图形API。</p><p>尽管<code>QQuickFrameBufferObject</code>当前不支持，除OpenGL之外的其它图形API也可以采用这种方法。</p><hr><p>警告：当在“场景图”中混合渲染OpenGL内容时，重要的一个点是应用程序不要使OpenGL上下文</p><p>处在缓冲区绑定状态，“属性启用”，特殊值处在z缓冲区或模板缓冲区等。这样做会导致无法预测的行为。</p><p>警告：自定义渲染代码必须具有多线程意识，它不应该假设应用程序在GUI线程中运行。</p><h3 id="自定义Item使用QPainter"><a href="#自定义Item使用QPainter" class="headerlink" title="自定义Item使用QPainter"></a>自定义Item使用QPainter</h3><p><code>QQuickItem</code>提供一个子类<code>QQuickPaintedItem</code>,它允许用户使用QPainter渲染内容。</p><p>警告: <code>QQuickPaintedItem</code>通过“间接2D 表面”渲染它的内容，“间接2D 表面”可以是软件光栅化，也可以是</p><p>“OpenGL帧缓冲对象(FBO)”。这种渲染包含2步操作。第一步是光栅化表面，第二步是渲染表面。</p><p>因此，直接使用“场景图” 接口渲染，速度比QQuickPaintedItem快。</p><h3 id="日志支持"><a href="#日志支持" class="headerlink" title="日志支持"></a>日志支持</h3><p>“场景图”支持很多种日志类别。这些日志除了对Qt贡献者有帮助之外，还可用于追踪性能问题和缺陷。</p><table><thead><tr><th>日志类别</th><th>描述</th></tr></thead><tbody><tr><td>qt.scenegraph.time.texture</td><td>纹理上传的耗时</td></tr><tr><td>qt.scenegraph.time.compilation</td><td>编译着色器耗时</td></tr><tr><td>qt.scenegraph.time.renderer</td><td>渲染器不同步骤耗时</td></tr><tr><td>qt.scenegraph.time.renderloop</td><td>渲染循环不同阶段耗时</td></tr><tr><td>qt.scenegraph.time.glyph</td><td>准备字形的距离场耗时</td></tr><tr><td>qt.scenegraph.general</td><td>“场景图”和图形栈中的常规信息</td></tr><tr><td>qt.scenegraph.renderloop</td><td>渲染循环相关的信息。这个日志模式是Qt开发者主要使用的</td></tr></tbody></table><p>旧版<code>QSG_INFO</code>环境变量也可以用。将其设置为非零值将启用<code>qt.scengraph.general</code>类别。</p><p>注意：遇到图形问题时，或不确定正在使用哪个渲染循环或图形API时，请至少启用<code>qt.scenegraph.general</code>和<code>qt.rhi</code>,或者</p><p>设置<code>QSG_INFO=1</code>的情况下启动应用程序。然后这将在初始化期间将一些基本信息打印到调试输出。</p><h3 id="“场景图”后端"><a href="#“场景图”后端" class="headerlink" title="“场景图”后端"></a>“场景图”后端</h3><p>除了公共API外，“场景图”还具有适配层，该适配层用以实现特定硬件的适配。这是一个未公开的、内部的、私有实现的插件，</p><p>可以让硬件适配团队充分利用其硬件。这包括：</p><ul><li><p>自定义纹理； 特别是<code>QQuickWindow::createTextureFromImage</code>的实现以及Image和BorderImage类型使用的纹理的内部表示。</p></li><li><p>自定义渲染器；适配层使插件可以决定如何遍历和渲染“场景图”，从而有可能针对特定硬件优化渲染</p></li></ul><p>算法或 使用可提高性能的扩展。</p><ul><li><p>许多默认Qml类型的自定义“场景图”实现，包括其文本和字体渲染。</p></li><li><p>自定义动画驱动程序；允许动画系统连接到低级“垂直同步”的显示设备，以获得平滑的渲染。</p></li><li><p>自定义渲染循环；可以更好地控制Qml如果处理多个窗口。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#简介&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#qt-quick-中的场景图&quot;&gt;Qt Quick 中的“场景图”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#qt-quick-场景图的结构&quot;&gt;Qt Quick “场景图”的结构&lt;
      
    
    </summary>
    
      <category term="玩转QtQuick" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQtQuick/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qml" scheme="https://jaredtao.github.io/tags/Qml/"/>
    
      <category term="QtQuick" scheme="https://jaredtao.github.io/tags/QtQuick/"/>
    
  </entry>
  
  <entry>
    <title>QQuickWidget中文输入法问题的正确解法</title>
    <link href="https://jaredtao.github.io/2020/11/30/QQuickWidget%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E9%97%AE%E9%A2%98%E7%9A%84%E6%AD%A3%E7%A1%AE%E8%A7%A3%E6%B3%95/"/>
    <id>https://jaredtao.github.io/2020/11/30/QQuickWidget中文输入法问题的正确解法/</id>
    <published>2020-11-30T04:44:23.000Z</published>
    <updated>2020-11-30T03:50:39.118Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#qquickwidget中文输入法问题的正确解法">QQuickWidget中文输入法问题的正确解法</a><ul><li><a href="#qt的bug">Qt的bug</a></li><li><a href="#旧的解法">旧的解法</a></li><li><a href="#正确的解法">正确的解法</a></li></ul></li></ul><h1 id="QQuickWidget中文输入法问题的正确解法"><a href="#QQuickWidget中文输入法问题的正确解法" class="headerlink" title="QQuickWidget中文输入法问题的正确解法"></a>QQuickWidget中文输入法问题的正确解法</h1><p>本文分享特定问题的解法,用不到的可以忽略。</p><h2 id="Qt的bug"><a href="#Qt的bug" class="headerlink" title="Qt的bug"></a>Qt的bug</h2><p>使用QQuickWidget的时候，遇到过这个问题：界面的TextInput 或者TextEdit, 鼠标点击聚焦后，切换为光标输入状态，此时切换系统中文输入法，会发现无法输入。</p><p>(系统任务栏的输入法状态是正确的,界面上输入字符，直接显示英文，无法显示输入法的候选框)</p><p>需要把界面切到其它软件，再切换回来，之后就能够输入了。</p><p>可以参考Qt官方bug报告:</p><p><a href="https://bugreports.qt.io/browse/QTBUG-61475" target="_blank" rel="noopener">https://bugreports.qt.io/browse/QTBUG-61475</a></p><h2 id="旧的解法"><a href="#旧的解法" class="headerlink" title="旧的解法"></a>旧的解法</h2><p>这个Bug是2018年报告的，我们当时做项目，也被这个Bug坑到了。</p><p>当时我给出了一个弱化版本的解法，原理是在第一次聚焦的时候，清理掉QQuickWidget的焦点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">QuickWidget::QuickWidget(QWidget *parent)</span><br><span class="line">    : QQuickWidget(parent)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    connect(quickWindow(), &amp;QQuickWindow::activeFocusItemChanged, <span class="keyword">this</span>, &amp;QuickWidget::onClearFocus);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> QuickWidget::onClearFocus()</span><br><span class="line">&#123;</span><br><span class="line">    QQuickItem *pItem = quickWindow()-&gt;activeFocusItem();</span><br><span class="line">    <span class="keyword">if</span> (pItem &amp;&amp; (pItem-&gt;inherits(<span class="string">"QQuickTextInput"</span>) || pItem-&gt;inherits(<span class="string">"QQuickTextField"</span>))) </span><br><span class="line">    &#123;</span><br><span class="line">        disconnect(quickWindow(), &amp;QQuickWindow::activeFocusItemChanged, <span class="keyword">this</span>, &amp;QuickWidget::onClearFocus);</span><br><span class="line">        QuickWidget::clearFocus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法勉强能用，一些细节上体验不太好。</p><p>当时找不到更好的方法，就这样用着了。</p><h2 id="正确的解法"><a href="#正确的解法" class="headerlink" title="正确的解法"></a>正确的解法</h2><p>2020年Qt官方终于派出了资深的专家，在Qt5.15.2中，彻底解决了这个问题。</p><p>(看到有不少博客、论坛，还在流传我提供的旧版本，于心不忍)</p><p>于是我从新版本里面，提炼出来了代码，给使用旧版本的同学解决此问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">QuickWidget::QuickWidget(QWidget *parent)</span><br><span class="line">    : QQuickWidget(parent)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_VERSION &lt; QT_VERSION_CHECK(5, 15, 2)</span></span><br><span class="line">    connect(quickWindow(), &amp;QQuickWindow::focusObjectChanged, <span class="keyword">this</span>, &amp;QuickWidget::propagateFocusObjectChanged);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_VERSION &lt; QT_VERSION_CHECK(5, 15, 2)</span></span><br><span class="line"><span class="keyword">bool</span> QuickWidget::event(QEvent *e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (e-&gt;type())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> QEvent::FocusAboutToChange:</span><br><span class="line">            <span class="keyword">return</span> QCoreApplication::sendEvent(quickWindow(), e);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Super::event(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> QuickWidget::propagateFocusObjectChanged(QObject *focusObject)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (QApplication::focusObject() != <span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;window()-&gt;windowHandle()) &#123;</span><br><span class="line">        emit <span class="keyword">this</span>-&gt;window()-&gt;windowHandle()-&gt;focusObjectChanged(focusObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#qquickwidget中文输入法问题的正确解法&quot;&gt;QQuickWidget中文输入法问题的正确解法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#qt的bug&quot;&gt;Qt的bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#旧的解法&quot;&gt;旧的解法
      
    
    </summary>
    
      <category term="玩转Qt" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQt/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qt实用技能" scheme="https://jaredtao.github.io/tags/Qt%E5%AE%9E%E7%94%A8%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qml(18)-用户向导</title>
    <link href="https://jaredtao.github.io/2020/11/10/%E7%8E%A9%E8%BD%ACQml(18)-%E7%94%A8%E6%88%B7%E5%90%91%E5%AF%BC/"/>
    <id>https://jaredtao.github.io/2020/11/10/玩转Qml(18)-用户向导/</id>
    <published>2020-11-10T05:44:23.000Z</published>
    <updated>2020-12-25T10:03:20.961Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#简介">简介</a></li><li><a href="#效果预览">效果预览</a></li><li><a href="#源码">源码</a></li><li><a href="#原理说明">原理说明</a><ul><li><a href="#需求说明">需求说明</a></li><li><a href="#原理">原理</a><ul><li><a href="#qml对象作用域">Qml对象作用域</a></li><li><a href="#qobject对象树">QObject对象树</a></li></ul></li><li><a href="#实现">实现</a><ul><li><a href="#最小改动">最小改动</a></li><li><a href="#获取焦点区域">获取焦点区域</a><ul><li><a href="#找到对象">找到对象</a></li><li><a href="#取坐标">取坐标</a></li><li><a href="#向导页">向导页</a></li><li><a href="#向导组件">向导组件</a></li><li><a href="#向导数据源">向导数据源</a></li></ul></li></ul></li></ul></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>很多现代化的软件，都会有向导功能，相信大家并不陌生。</p><p>“用户向导”的作用，可以帮助新用户快速了解产品，也可以用来提醒用户该如何操作。</p><p>这次涛哥就分享一个Qml制作“用户向导”的方案。</p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>看一下最终效果</p><p><img src="/images/Qml18/wizard.png" alt="预览"><br><img src="/images/Qml18/wizard.gif" alt="预览"></p><p>在整个软件界面上，覆盖一层遮罩，只保留一部分镂空区域，并用箭头指向镂空区域，</p><p>以此,将用户的眼球聚焦到镂空区域，并用适当的文字,说明镂空区域的作用。</p><p>这个遮罩层是不能操作到软件界面的，点击任意区域，会转到下一步的向导，直到最后向导退出。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>《玩转Qml》系列文章，配套了一个优秀的开源项目:TaoQuick</p><p>github <a href="https://github.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://github.com/jaredtao/TaoQuick</a></p><p>访问不了或者速度太慢，可以用国内的镜像网站gitee</p><p><a href="https://gitee.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://gitee.com/jaredtao/TaoQuick</a></p><h2 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h2><p>向导的实现方案有很多，比如贴图之类的。按不同的需求，方案也不尽相同。</p><p>这里先列一个涛哥的需求，再讨论方案才有意义。</p><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><ul><li><p>窗口大小不固定</p></li><li><p>焦点区域可以是Qml界面中的任意可视组件</p></li><li><p>向导功能要独立实现，且对已有代码改动最小</p></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>遮罩的制作，在Qml中就是几个半透明的Rectangle拼在一起，附带一个顶层MouseArea，</p><p>将所有鼠标事件都过滤掉，这些都比较简单。</p><p>焦点区域才是本文的核心。</p><h4 id="Qml对象作用域"><a href="#Qml对象作用域" class="headerlink" title="Qml对象作用域"></a>Qml对象作用域</h4><p>先来说一下Qml中的对象作用域吧。</p><p>如果你阅读过《Qml Book》或者有一定的Qml经验，就知道Qml中的对象，都是通过id相互引用的。</p><p>像html / Android，都有类似findElementById这样的接口，获取任意的组件。</p><p>在Qml，省去了find这一步，可以直接使用id进行访问。</p><p>不过呢，Qml这个id的可访问性，不是任何场景都能直接用的，有诸多情况下，不能直接使用, 例如：</p><ul><li><p>平级的两个组件，它们的子组件不能互相访问到（同一个文件作用域中的除外）</p></li><li><p>各种View的delegate中的组件id，view外部不能直接访问(这是因为delegate有多个实例的情况下，id不能唯一标识)</p></li><li><p>Loader/Component动态加载后的子组件，不能被直接访问（动态加载，都不知道它什么时候创建，当然不能用它）</p></li></ul><p>诸如此类，都不能直接访问。</p><p>扩展说明:</p><p>  顶层组件的id，可以被所有子组件访问，因此可以用来存储全局对象；</p><p>  Qml单例组件，或者C++上下文对象，也可以被所有子组件访问。</p><p>  这两种方式也可以用来实现向导功能，有兴趣的读者可自己探索。</p><h4 id="QObject对象树"><a href="#QObject对象树" class="headerlink" title="QObject对象树"></a>QObject对象树</h4><p>Qml中的所有可视化组件，大都是继承于Item，Item的继承关系是 Item ==&gt; QQuickItem ==&gt; QObject</p><p>因此呢，Qml中的所有对象，都在一个QObject树上，具有父子关系。</p><p>我们可以从任意节点，向上找到根节点，也可以通过根节点的findChild的方式，找到任意一个带objectName的节点。</p><p>涛哥的向导方案，便是基于此实现。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="最小改动"><a href="#最小改动" class="headerlink" title="最小改动"></a>最小改动</h4><p>在已有的Qml代码中，对于想当作焦点区域的组件，最小改动是增加一个objectName</p><p>例如涛哥想把已有的标题栏按钮，作为焦点区域：</p><p>改动前:</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">      <span class="title">SkinBtn</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">24</span></span><br><span class="line">          <span class="attribute">height</span>: <span class="number">24</span></span><br><span class="line">          <span class="attribute">anchors.verticalCenter</span>: <span class="built_in">parent</span>.verticalCenter</span><br><span class="line">      &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>改动后:</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">      <span class="title">SkinBtn</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">24</span></span><br><span class="line">          <span class="attribute">height</span>: <span class="number">24</span></span><br><span class="line">          <span class="attribute">anchors.verticalCenter</span>: <span class="built_in">parent</span>.verticalCenter</span><br><span class="line">          <span class="attribute">objectName</span>: <span class="string">"skinBtn"</span></span><br><span class="line">      &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="获取焦点区域"><a href="#获取焦点区域" class="headerlink" title="获取焦点区域"></a>获取焦点区域</h4><h5 id="找到对象"><a href="#找到对象" class="headerlink" title="找到对象"></a>找到对象</h5><p>像前面的组件，只要有了objectName，就可以从任意位置获取到它了</p><p>这需要一点C++代码扩展</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QQuickItem *<span class="title">getObject</span><span class="params">(QObject * pRootObject, <span class="keyword">const</span> QString &amp;targetObjName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pRootObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pRootObject-&gt;findChild&lt;QQuickItem *&gt;(targetObjName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过findChild就可以拿到目标对象了, rootObject是根节点，可以从任意节点向上找到，</p><p>也可以通过QQmlContex直接获取到。</p><h5 id="取坐标"><a href="#取坐标" class="headerlink" title="取坐标"></a>取坐标</h5><p>找到了对象，就可以计算它的坐标，用于向导了。</p><p>为了方便计算，同时避免处理繁杂的父子关系，可以直接把坐标映射到顶层窗口。向导的坐标也以顶层窗口为准即可。</p><p>这里进一步封装了C++代码,直接计算好坐标</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QRect <span class="title">getItemGeometryToScene</span><span class="params">(<span class="keyword">const</span> QString &amp;targetObjName)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pRootObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> pItem = pRootObject-&gt;findChild&lt;QQuickItem *&gt;(targetObjName);</span><br><span class="line">    <span class="keyword">if</span> (pItem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pItem-&gt;parentItem()) &#123;</span><br><span class="line">            <span class="comment">//如果有父节点，调用父节点的mapToScene将坐标映射到顶层窗口</span></span><br><span class="line">            <span class="keyword">auto</span> pos = pItem-&gt;parentItem()-&gt;mapToScene(pItem-&gt;position());</span><br><span class="line">            <span class="keyword">return</span> QRectF &#123; pos.x(), pos.y(), pItem-&gt;width(), pItem-&gt;height() &#125;.toRect();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果没有父节点，坐标本身就是相对顶层窗口的</span></span><br><span class="line">            <span class="keyword">return</span> pItem-&gt;boundingRect().toRect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的代码，可以在TaoQuick项目中看到, 封装了一个QuickTool类，</p><p>所在路径是TaoQuick/3rdparty/TaoCommon/QuickTool</p><h5 id="向导页"><a href="#向导页" class="headerlink" title="向导页"></a>向导页</h5><p>接下来就是封装一个向导页面了,遮罩围绕在焦点四周，同时带上箭头和文字说明即可</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CusWizardPage.qml</span></span><br><span class="line"></span><br><span class="line">import QtQuick <span class="number">2.9</span></span><br><span class="line">import QtQuick.Controls <span class="number">2.2</span></span><br><span class="line"> import QtGraphicalEffects <span class="number">1.0</span></span><br><span class="line">import <span class="string">".."</span></span><br><span class="line">import <span class="string">"../.."</span></span><br><span class="line"></span><br><span class="line"><span class="class">Item </span>&#123;</span><br><span class="line"><span class="symbol">    id:</span> pageItem</span><br><span class="line"><span class="symbol">    z:</span> <span class="number">998</span></span><br><span class="line">    anchors.fill: parent</span><br><span class="line">    property string wizardName</span><br><span class="line">    property string wizardDescript</span><br><span class="line">    property string targetObjectName</span><br><span class="line">    property int pageType: pageTypeDown</span><br><span class="line"></span><br><span class="line">    property color maskColor: <span class="string">"black"</span></span><br><span class="line">    property real maskOpacity: <span class="number">0.75</span></span><br><span class="line"></span><br><span class="line">    property rect focusRect</span><br><span class="line"></span><br><span class="line">    <span class="comment">//int 做枚举，定义4种方向的箭头</span></span><br><span class="line">    readonly property int pageTypeDown: Qt.DownArrow</span><br><span class="line">    readonly property int pageTypeUp: Qt.UpArrow</span><br><span class="line">    readonly property int pageTypeLeft: Qt.LeftArrow</span><br><span class="line">    readonly property int pageTypeRight: Qt.RightArrow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Component.onCompleted: &#123;</span><br><span class="line">        <span class="comment">//组件创建时，通过C++扩展，获取到焦点区域坐标</span></span><br><span class="line">        var rect = quickTool.getItemGeometryToScene(targetObjectName)</span><br><span class="line">        focusRect = rect</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//焦点区域的同步item,用来给四周的组件定位</span></span><br><span class="line">    <span class="class">Item </span>&#123;</span><br><span class="line"><span class="symbol">        id:</span> focusItem</span><br><span class="line"><span class="symbol">        x:</span> focusRect.x</span><br><span class="line"><span class="symbol">        y:</span> focusRect.y</span><br><span class="line"><span class="symbol">        width:</span> focusRect.width</span><br><span class="line"><span class="symbol">        height:</span> focusRect.height</span><br><span class="line">        <span class="class">RadialGradient </span>&#123;</span><br><span class="line">            anchors.fill: parent</span><br><span class="line"><span class="symbol">            gradient:</span> <span class="class">Gradient </span>&#123;</span><br><span class="line">                <span class="class">GradientStop </span>&#123; position: <span class="number">0.0</span>; color: <span class="string">"transparent"</span> &#125;</span><br><span class="line">                <span class="class">GradientStop </span>&#123; position: <span class="number">0.6</span>; color: maskColor &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="symbol">            opacity:</span> maskOpacity / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//left</span></span><br><span class="line">    <span class="class">Rectangle </span>&#123;</span><br><span class="line"><span class="symbol">        x:</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">        y:</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">        width:</span> focusRect.x</span><br><span class="line"><span class="symbol">        height:</span> parent.height</span><br><span class="line"><span class="symbol">        color:</span> maskColor</span><br><span class="line"><span class="symbol">        opacity:</span> maskOpacity</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//right</span></span><br><span class="line">    <span class="class">Rectangle </span>&#123;</span><br><span class="line"><span class="symbol">        x:</span> focusRect.x + focusRect.width</span><br><span class="line"><span class="symbol">        y:</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">        width:</span> pageItem.width - x</span><br><span class="line"><span class="symbol">        height:</span> parent.height</span><br><span class="line"><span class="symbol">        color:</span> maskColor</span><br><span class="line"><span class="symbol">        opacity:</span> maskOpacity</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//top</span></span><br><span class="line">    <span class="class">Rectangle </span>&#123;</span><br><span class="line"><span class="symbol">        x:</span> focusRect.x</span><br><span class="line"><span class="symbol">        width:</span> focusRect.width</span><br><span class="line"><span class="symbol">        y:</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">        height:</span> focusRect.y</span><br><span class="line"><span class="symbol">        color:</span> maskColor</span><br><span class="line"><span class="symbol">        opacity:</span> maskOpacity</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//bottom</span></span><br><span class="line">    <span class="class">Rectangle </span>&#123;</span><br><span class="line"><span class="symbol">        x:</span> focusRect.x</span><br><span class="line"><span class="symbol">        width:</span> focusRect.width</span><br><span class="line"><span class="symbol">        y:</span> focusRect.y + focusRect.height</span><br><span class="line"><span class="symbol">        height:</span> pageItem.height - y</span><br><span class="line"><span class="symbol">        color:</span> maskColor</span><br><span class="line"><span class="symbol">        opacity:</span> maskOpacity</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class">Row </span>&#123;</span><br><span class="line"><span class="symbol">        id:</span> leftRow</span><br><span class="line"><span class="symbol">        spacing:</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">        visible:</span> pageType === pageTypeLeft</span><br><span class="line"><span class="symbol">        z:</span> <span class="number">998</span></span><br><span class="line">        <span class="class">anchors </span>&#123;</span><br><span class="line"><span class="symbol">            left:</span> focusItem.right</span><br><span class="line"><span class="symbol">            leftMargin:</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">            verticalCenter:</span> focusItem.verticalCenter</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class">CusImage </span>&#123;</span><br><span class="line"><span class="symbol">            source:</span> CusConfig.imagePathPrefix + <span class="string">"arrow-left.png"</span></span><br><span class="line">            anchors.verticalCenter: parent.verticalCenter</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class">Row </span>&#123;</span><br><span class="line"><span class="symbol">        id:</span> rightRow</span><br><span class="line"><span class="symbol">        spacing:</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">        layoutDirection:</span> Qt.RightToLeft</span><br><span class="line"><span class="symbol">        visible:</span> pageType === pageTypeRight</span><br><span class="line"><span class="symbol">        z:</span> <span class="number">998</span></span><br><span class="line">        <span class="class">anchors </span>&#123;</span><br><span class="line"><span class="symbol">            right:</span> focusItem.left</span><br><span class="line"><span class="symbol">            rightMargin:</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">            verticalCenter:</span> focusItem.verticalCenter</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class">CusImage </span>&#123;</span><br><span class="line"><span class="symbol">            source:</span> CusConfig.imagePathPrefix + <span class="string">"arrow-right.png"</span></span><br><span class="line">            anchors.verticalCenter: parent.verticalCenter</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class">Column </span>&#123;</span><br><span class="line"><span class="symbol">        id:</span> downColumn</span><br><span class="line"><span class="symbol">        spacing:</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">        visible:</span> pageType === pageTypeDown</span><br><span class="line"><span class="symbol">        width:</span> <span class="number">300</span></span><br><span class="line"><span class="symbol">        z:</span> <span class="number">998</span></span><br><span class="line">        <span class="class">anchors </span>&#123;</span><br><span class="line"><span class="symbol">            bottom:</span> focusItem.top</span><br><span class="line"><span class="symbol">            bottomMargin:</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">            horizontalCenter:</span> focusItem.horizontalCenter</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class">CusImage </span>&#123;</span><br><span class="line"><span class="symbol">            source:</span> CusConfig.imagePathPrefix + <span class="string">"arrow-down.png"</span></span><br><span class="line">            anchors.horizontalCenter: parent.horizontalCenter</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class">Column </span>&#123;</span><br><span class="line"><span class="symbol">        id:</span> upColumn</span><br><span class="line"><span class="symbol">        spacing:</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">        visible:</span> pageType === pageTypeUp</span><br><span class="line"><span class="symbol">        width:</span> <span class="number">300</span></span><br><span class="line"><span class="symbol">        z:</span> <span class="number">998</span></span><br><span class="line">        <span class="class">anchors </span>&#123;</span><br><span class="line"><span class="symbol">            top:</span> focusItem.bottom</span><br><span class="line"><span class="symbol">            topMargin:</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">            horizontalCenter:</span> focusItem.horizontalCenter</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class">CusImage </span>&#123;</span><br><span class="line"><span class="symbol">            source:</span> CusConfig.imagePathPrefix + <span class="string">"arrow-up.png"</span></span><br><span class="line">            anchors.horizontalCenter: parent.horizontalCenter</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class">CusLabel </span>&#123;</span><br><span class="line"><span class="symbol">        id:</span> wizardDescriptLabel</span><br><span class="line"><span class="symbol">        z:</span> <span class="number">998</span></span><br><span class="line"><span class="symbol">        text:</span> qsTr(wizardDescript) + CusConfig.transString</span><br><span class="line">        font.pixelSize: <span class="number">16</span></span><br><span class="line"><span class="symbol">        color:</span> <span class="string">"white"</span></span><br><span class="line">        <span class="class">anchors </span>&#123;</span><br><span class="line"><span class="symbol">            horizontalCenter:</span> parent.horizontalCenter</span><br><span class="line"><span class="symbol">            verticalCenter:</span> parent.verticalCenter</span><br><span class="line"><span class="symbol">            verticalCenterOffset:</span> <span class="number">50</span></span><br><span class="line"><span class="symbol">            horizontalCenterOffset:</span> <span class="number">-50</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class">CusLabel </span>&#123;</span><br><span class="line"><span class="symbol">        z:</span> <span class="number">998</span></span><br><span class="line"><span class="symbol">        text:</span> qsTr(wizardName) +  CusConfig.transString</span><br><span class="line">        font.pixelSize: <span class="number">26</span></span><br><span class="line"><span class="symbol">        color:</span> <span class="string">"white"</span></span><br><span class="line">        <span class="class">anchors </span>&#123;</span><br><span class="line"><span class="symbol">            left:</span> wizardDescriptLabel.left</span><br><span class="line"><span class="symbol">            bottom:</span> wizardDescriptLabel.top</span><br><span class="line"><span class="symbol">            bottomMargin:</span> <span class="number">30</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="向导组件"><a href="#向导组件" class="headerlink" title="向导组件"></a>向导组件</h5><p>向导一般不止一页，而是很多页，这里就封装了一个向导组件。</p><p>使用model-view的方式,数据源由外部设置，组件只管按照model去实例化对应的向导页即可</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CusWizard.qml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">".."</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"../.."</span></span><br><span class="line"></span><br><span class="line"><span class="title">Item</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> cusWizardItem</span></span><br><span class="line">    <span class="keyword">signal</span><span class="string"> wizardFinished</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> string totlaString</span>: qsTr(<span class="string">"Wizard %1/%2 &gt;"</span>).arg(currentIndex + <span class="number">1</span>).arg(count) + CusConfig.transString</span><br><span class="line">    <span class="keyword">property</span><span class="string"> string operatorString</span>: qsTr(<span class="string">"Click any area to show next"</span>) + CusConfig.transString</span><br><span class="line">    <span class="title">MouseArea</span> &#123;</span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">hoverEnabled</span>: <span class="literal">true</span></span><br><span class="line">        <span class="attribute">onClicked</span>: &#123;</span><br><span class="line">            currentIndex++</span><br><span class="line">            <span class="keyword">if</span> (currentIndex &gt;= count) &#123;</span><br><span class="line">                wizardFinished()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">property</span><span class="string"> var model</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> int count</span>: model.count</span><br><span class="line">    <span class="keyword">property</span><span class="string"> int currentIndex</span>: <span class="number">0</span></span><br><span class="line">    <span class="title">Repeater</span> &#123;</span><br><span class="line">        <span class="attribute">model</span>: cusWizardItem.model</span><br><span class="line">        <span class="attribute">delegate</span>: <span class="title">CusWizardPage</span> &#123;</span><br><span class="line">            <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">            <span class="attribute">visible</span>: index === currentIndex</span><br><span class="line">            <span class="attribute">wizardName</span>: model.name</span><br><span class="line">            <span class="attribute">wizardDescript</span>: model.descript</span><br><span class="line">            <span class="attribute">targetObjectName</span>: model.targetObjectName</span><br><span class="line">            <span class="attribute">pageType</span>: model.arrowType</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">CusLabel</span> &#123;</span><br><span class="line">        <span class="attribute">z</span>: <span class="number">999</span></span><br><span class="line">        <span class="attribute">id:</span><span class="string"> centerLabel</span></span><br><span class="line">        <span class="title">anchors</span> &#123;</span><br><span class="line">            <span class="attribute">centerIn</span>: <span class="built_in">parent</span></span><br><span class="line">            <span class="attribute">horizontalCenterOffset</span>: <span class="number">300</span></span><br><span class="line">            <span class="attribute">verticalCenterOffset</span>: <span class="number">150</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">text</span>: totlaString</span><br><span class="line">        <span class="attribute">font.pixelSize</span>: <span class="number">22</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="string">"white"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">CusLabel</span> &#123;</span><br><span class="line">        <span class="attribute">z</span>: <span class="number">999</span></span><br><span class="line">        <span class="title">anchors</span> &#123;</span><br><span class="line">            <span class="attribute">centerIn</span>: <span class="built_in">parent</span></span><br><span class="line">            <span class="attribute">horizontalCenterOffset</span>: <span class="number">300</span></span><br><span class="line">            <span class="attribute">verticalCenterOffset</span>: <span class="number">150</span> + centerLabel.height</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">text</span>: operatorString</span><br><span class="line">        <span class="attribute">color</span>: <span class="string">"white"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="向导数据源"><a href="#向导数据源" class="headerlink" title="向导数据源"></a>向导数据源</h5><p>最后来看一下，TaoQuick项目的首页，提供的向导数据model</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ListModel</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string">wizardModel</span></span><br><span class="line">    <span class="title">ListElement</span> &#123;</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">"TitleBar"</span></span><br><span class="line">        <span class="attribute">descript</span>: <span class="string">"drag change window pos, double click change window state"</span></span><br><span class="line">        <span class="attribute">targetObjectName</span>: <span class="string">"blankItem"</span></span><br><span class="line">        <span class="attribute">arrowType</span>: Qt.UpArrow</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ListElement</span> &#123;</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">"Control Buttons"</span></span><br><span class="line">        <span class="attribute">descript</span>: <span class="string">"minimize, maximize, normal or close main window"</span></span><br><span class="line">        <span class="attribute">targetObjectName</span>: <span class="string">"controlButtonsRow"</span></span><br><span class="line">        <span class="attribute">arrowType</span>: Qt.UpArrow</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ListElement</span> &#123;</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">"Skin Button"</span></span><br><span class="line">        <span class="attribute">descript</span>: <span class="string">"switch theme"</span></span><br><span class="line">        <span class="attribute">targetObjectName</span>: <span class="string">"skinBtn"</span></span><br><span class="line">        <span class="attribute">arrowType</span>: Qt.UpArrow</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ListElement</span> &#123;</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">"Language Button"</span></span><br><span class="line">        <span class="attribute">descript</span>: <span class="string">"switch language"</span></span><br><span class="line">        <span class="attribute">targetObjectName</span>: <span class="string">"langBtn"</span></span><br><span class="line">        <span class="attribute">arrowType</span>: Qt.UpArrow</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ListElement</span> &#123;</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">"Left Pane"</span></span><br><span class="line">        <span class="attribute">descript</span>: <span class="string">"show content list"</span></span><br><span class="line">        <span class="attribute">targetObjectName</span>: <span class="string">"leftPane"</span></span><br><span class="line">        <span class="attribute">arrowType</span>: Qt.LeftArrow</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ListElement</span> &#123;</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">"Drawer Button"</span></span><br><span class="line">        <span class="attribute">descript</span>: <span class="string">"show or hide left pane"</span></span><br><span class="line">        <span class="attribute">targetObjectName</span>: <span class="string">"menuBtn"</span></span><br><span class="line">        <span class="attribute">arrowType</span>: Qt.LeftArrow</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ListElement</span> &#123;</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">"Search Input"</span></span><br><span class="line">        <span class="attribute">descript</span>: <span class="string">"search content"</span></span><br><span class="line">        <span class="attribute">targetObjectName</span>: <span class="string">"searchInput"</span></span><br><span class="line">        <span class="attribute">arrowType</span>: Qt.LeftArrow</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ListElement</span> &#123;</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">"Home Button"</span></span><br><span class="line">        <span class="attribute">descript</span>: <span class="string">"go back home page"</span></span><br><span class="line">        <span class="attribute">targetObjectName</span>: <span class="string">"homeBtn"</span></span><br><span class="line">        <span class="attribute">arrowType</span>: Qt.LeftArrow</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ListElement</span> &#123;</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">"Content List"</span></span><br><span class="line">        <span class="attribute">descript</span>: <span class="string">"switch content"</span></span><br><span class="line">        <span class="attribute">targetObjectName</span>: <span class="string">"contentListView"</span></span><br><span class="line">        <span class="attribute">arrowType</span>: Qt.LeftArrow</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ListElement</span> &#123;</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">"Content Pane"</span></span><br><span class="line">        <span class="attribute">descript</span>: <span class="string">"show current selected content by list"</span></span><br><span class="line">        <span class="attribute">targetObjectName</span>: <span class="string">"contentRect"</span></span><br><span class="line">        <span class="attribute">arrowType</span>: Qt.RightArrow</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ListElement</span> &#123;</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">"Tool Buttons"</span></span><br><span class="line">        <span class="attribute">descript</span>: <span class="string">"special function buttons such as Wizard, View Source Code and so on"</span></span><br><span class="line">        <span class="attribute">targetObjectName</span>: <span class="string">"wizardBtn"</span></span><br><span class="line">        <span class="attribute">arrowType</span>: Qt.RightArrow</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#简介&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#效果预览&quot;&gt;效果预览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#源码&quot;&gt;源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#原理说明&quot;&gt;原理说明&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a h
      
    
    </summary>
    
      <category term="玩转Qml" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQml/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qml" scheme="https://jaredtao.github.io/tags/Qml/"/>
    
      <category term="QtQuick" scheme="https://jaredtao.github.io/tags/QtQuick/"/>
    
      <category term="组件化编程" scheme="https://jaredtao.github.io/tags/%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qml(17)-树组件的定制</title>
    <link href="https://jaredtao.github.io/2020/06/15/%E7%8E%A9%E8%BD%ACQml(17)-%E6%A0%91%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%9A%E5%88%B6/"/>
    <id>https://jaredtao.github.io/2020/06/15/玩转Qml(17)-树组件的定制/</id>
    <published>2020-06-15T15:44:23.000Z</published>
    <updated>2020-12-25T10:03:01.051Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#简介">简介</a></li><li><a href="#发行说明">发行说明</a></li><li><a href="#效果预览">效果预览</a></li><li><a href="#qt本身的国际化">Qt本身的国际化</a></li><li><a href="#存在翻译不全的问题">存在翻译不全的问题</a></li><li><a href="#新的方案">新的方案</a></li><li><a href="#关于批量翻译">关于批量翻译</a></li><li><a href="#总结">总结</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近遇到一些需求，要在Qt/Qml中开发树结构，并能够导入、导出json格式。</p><p>于是我写了一个简易的Demo，并做了一些性能测试。</p><p>在这里将源码、实现原理、以及性能测试都记录、分享出来，算是抛砖引玉吧，希望有更多人来讨论、交流。</p><h2 id="TreeEdit源码"><a href="#TreeEdit源码" class="headerlink" title="TreeEdit源码"></a>TreeEdit源码</h2><p>起初的代码在单独的仓库</p><p>github <a href="https://github.com/jaredtao/TreeEdit" target="_blank" rel="noopener">https://github.com/jaredtao/TreeEdit</a></p><p>gitee镜像 <a href="https://gitee.com/jaredtao/Tree" target="_blank" rel="noopener">https://gitee.com/jaredtao/Tree</a></p><p>后续会收录到《玩转Qml》配套的开源项目TaoQuick中</p><p>github <a href="https://github.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://github.com/jaredtao/TaoQuick</a></p><p>gitee镜像 <a href="https://gitee.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://gitee.com/jaredtao/TaoQuick</a></p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>看一下最终效果</p><p><img src="/images/Qml13/1.png" alt="预览"></p><p>Qml实现的树结构编辑器, 功能包括:</p><p>树结构的缩进<br>节点展开、折叠<br>添加节点<br>删除节点<br>重命名节点<br>搜索<br>导入<br>导出<br>节点属性编辑（完善中）</p><h2 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h2><p>数据model的实现，使用C++，继承于QAbstractListModel，并实现rowCount、data等方法。</p><p>model本身是List结构的，在此基础上，对model数据进行扩展以模拟树结构，例如增加了 “节点深度”、“是否有子节点”等数据段。</p><p>view使用Qml Controls 2中的ListView模拟实现(Controls 1 中的TreeView即将被废弃)。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><p>基本model的声明如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaoListModel</span> :</span> <span class="keyword">public</span> QAbstractListModel &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明父类</span></span><br><span class="line">    <span class="keyword">using</span> Super = QAbstractListModel;</span><br><span class="line"></span><br><span class="line">    TaoListModel(QObject* parent = <span class="literal">nullptr</span>);</span><br><span class="line">    TaoListModel(<span class="keyword">const</span> QList&lt;T&gt;&amp; nodeList, QObject* parent = <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> QList&lt;T&gt;&amp; nodeList() <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_nodeList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNodeList</span><span class="params">(<span class="keyword">const</span> QList&lt;T&gt;&amp; nodeList)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rowCount</span><span class="params">(<span class="keyword">const</span> QModelIndex&amp; parent)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QVariant <span class="title">data</span><span class="params">(<span class="keyword">const</span> QModelIndex&amp; index, <span class="keyword">int</span> role)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">setData</span><span class="params">(<span class="keyword">const</span> QModelIndex&amp; index, <span class="keyword">const</span> QVariant&amp; value, <span class="keyword">int</span> role)</span> override</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insertRows</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> count, <span class="keyword">const</span> QModelIndex&amp; parent = QModelIndex())</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">removeRows</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> count, <span class="keyword">const</span> QModelIndex&amp; parent = QModelIndex())</span> override</span>;</span><br><span class="line"></span><br><span class="line">    Qt::<span class="function">ItemFlags <span class="title">flags</span><span class="params">(<span class="keyword">const</span> QModelIndex&amp; index)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    Qt::<span class="function">DropActions <span class="title">supportedDropActions</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QList&lt;T&gt; m_nodeList;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中数据成员使用 QList m_nodeList 存储, 大部分成员函数是对此数据的操作。</p><p>Json格式的model声明如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> QString cDepthKey = QStringLiteral(<span class="string">"TModel_depth"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> QString cExpendKey = QStringLiteral(<span class="string">"TModel_expend"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> QString cChildrenExpendKey = QStringLiteral(<span class="string">"TModel_childrenExpend"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> QString cHasChildendKey = QStringLiteral(<span class="string">"TModel_hasChildren"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> QString cParentKey = QStringLiteral(<span class="string">"TModel_parent"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> QString cChildrenKey = QStringLiteral(<span class="string">"TModel_children"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> QString cRecursionKey = QStringLiteral(<span class="string">"subType"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> QStringList cFilterKeyList = &#123; cDepthKey, cExpendKey, cChildrenExpendKey, cHasChildendKey, cParentKey, cChildrenKey &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaoJsonTreeModel</span> :</span> <span class="keyword">public</span> TaoListModel&lt;QJsonObject&gt; &#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY(<span class="keyword">int</span> count READ count NOTIFY countChanged)</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明父类</span></span><br><span class="line">    <span class="keyword">using</span> Super = TaoListModel&lt;QJsonObject&gt;;</span><br><span class="line">    <span class="comment">//从json文件读入数据</span></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">loadFromJson</span><span class="params">(<span class="keyword">const</span> QString&amp; jsonPath, <span class="keyword">const</span> QString&amp; recursionKey = cRecursionKey)</span></span>;</span><br><span class="line">    <span class="comment">//导出到json文件</span></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">bool</span> <span class="title">saveToJson</span><span class="params">(<span class="keyword">const</span> QString&amp; jsonPath, <span class="keyword">bool</span> compact = <span class="literal">false</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//设置指定节点的数值</span></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">setNodeValue</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">const</span> QString &amp;key, <span class="keyword">const</span> QVariant &amp;value)</span></span>;</span><br><span class="line">    <span class="comment">//在index添加子节点。刷新父级，返回新项index</span></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">int</span> <span class="title">addNode</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">const</span> QJsonObject&amp; json)</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">int</span> <span class="title">addNode</span><span class="params">(<span class="keyword">const</span> QModelIndex&amp; index, <span class="keyword">const</span> QJsonObject&amp; json)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addNode(index.row(), json);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除。递归删除所有子级,刷新父级</span></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">const</span> QModelIndex&amp; index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        remove(index.row());</span><br><span class="line">    &#125;</span><br><span class="line">    Q_INVOKABLE QList&lt;<span class="keyword">int</span>&gt; search(<span class="keyword">const</span> QString&amp; key, <span class="keyword">const</span> QString&amp; value, Qt::CaseSensitivity cs = Qt::CaseInsensitive) <span class="keyword">const</span>;</span><br><span class="line">    <span class="comment">//展开子级。只展开一级,不递归</span></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">expand</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">expand</span><span class="params">(<span class="keyword">const</span> QModelIndex&amp; index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        expand(index.row());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//折叠子级。递归全部子级。</span></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">collapse</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">collapse</span><span class="params">(<span class="keyword">const</span> QModelIndex&amp; index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        collapse(index.row());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//展开到指定项。递归</span></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">expandTo</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">expandTo</span><span class="params">(<span class="keyword">const</span> QModelIndex&amp; index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        expandTo(index.row());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//展开全部</span></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">expandAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//折叠全部</span></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">collapseAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_INVOKABLE QVariant <span class="title">data</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> role = Qt::DisplayRole)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Super::data(Super::index(idx), role);</span><br><span class="line">    &#125;</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">countChanged</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>TaoJsonTreeModel继承于TaoListModel，并提供大量Q_INVOKABLE函数，以供Qml调用。</p><h3 id="view"><a href="#view" class="headerlink" title="view"></a>view</h3><p>TreeView的模拟实现如下：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Item</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> root</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string __depthKey</span>: <span class="string">"TModel_depth"</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string __expendKey</span>: <span class="string">"TModel_expend"</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string __childrenExpendKey</span>: <span class="string">"TModel_childrenExpend"</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string __hasChildendKey</span>: <span class="string">"TModel_hasChildren"</span></span><br><span class="line"></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string __parentKey</span>: <span class="string">"TModel_parent"</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string __childrenKey</span>: <span class="string">"TModel_children"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="title">ListView</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> listView</span></span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">currentIndex</span>: <span class="number">-1</span></span><br><span class="line">        <span class="attribute">delegate</span>: <span class="title">Rectangle</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> delegateRect</span></span><br><span class="line">            <span class="attribute">width</span>: listView.width</span><br><span class="line">            <span class="attribute">color</span>: (listView.currentIndex === index || area.hovered) ? <span class="attribute">config.normalColor</span> : config.darkerColor</span><br><span class="line">            <span class="comment">// 根据 expaned 判断是否展开，不展开的情况下高度为0</span></span><br><span class="line">            <span class="attribute">height</span>: model.display[__expendKey] === <span class="literal">true</span> ? <span class="number">35</span> : <span class="number">0</span></span><br><span class="line">            <span class="comment">// 优化。高度为0时visible为false，不渲染。</span></span><br><span class="line">            <span class="attribute">visible</span>: height &gt; <span class="number">0</span></span><br><span class="line">            <span class="keyword">property</span><span class="string"> alias editable</span>: nameEdit.editable</span><br><span class="line">            <span class="keyword">property</span><span class="string"> alias editItem</span>: nameEdit</span><br><span class="line">            <span class="title">TTextInput</span> &#123;</span><br><span class="line">                <span class="attribute">id:</span><span class="string"> nameEdit</span></span><br><span class="line">                <span class="attribute">anchors.verticalCenter</span>: <span class="built_in">parent</span>.verticalCenter</span><br><span class="line">                <span class="comment">//按深度缩进</span></span><br><span class="line">                <span class="attribute">x</span>: root.basePadding + model.display[__depthKey] * root.subPadding</span><br><span class="line">                <span class="attribute">text</span>: model.display[<span class="string">"name"</span>]</span><br><span class="line">                <span class="attribute">height</span>: <span class="built_in">parent</span>.height</span><br><span class="line">                <span class="attribute">width</span>: <span class="built_in">parent</span>.width * <span class="number">0.8</span> - x</span><br><span class="line">                <span class="attribute">editable</span>: <span class="literal">false</span></span><br><span class="line">                <span class="attribute">onTEditFinished</span>: &#123;</span><br><span class="line">                    sourceModel.setNodeValue(index, <span class="string">"name"</span>, displayText)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title">TTransArea</span> &#123;</span><br><span class="line">                <span class="attribute">id:</span><span class="string"> area</span></span><br><span class="line">                <span class="attribute">height</span>: <span class="built_in">parent</span>.height</span><br><span class="line">                <span class="attribute">width</span>: <span class="built_in">parent</span>.width - controlIcon.x</span><br><span class="line">                <span class="attribute">hoverEnabled</span>: <span class="literal">true</span></span><br><span class="line">                <span class="attribute">acceptedButtons</span>: Qt.LeftButton | Qt.RightButton</span><br><span class="line">                <span class="attribute">onPressed</span>: &#123;</span><br><span class="line">                    <span class="comment">//单击时切换当前选中项</span></span><br><span class="line">                    <span class="keyword">if</span> (listView.currentIndex !== index) &#123;</span><br><span class="line">                        listView.currentIndex = index;</span><br><span class="line">                    &#125; <span class="title">else</span> &#123;</span><br><span class="line">                        listView.currentIndex = <span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="attribute">onTDoubleClicked</span>: &#123;</span><br><span class="line">                    <span class="comment">//双击进入编辑状态</span></span><br><span class="line">                    delegateRect.editable = <span class="literal">true</span>;</span><br><span class="line">                    nameEdit.forceActiveFocus()</span><br><span class="line">                    nameEdit.ensureVisible(<span class="number">0</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title">Image</span> &#123;</span><br><span class="line">                <span class="attribute">id:</span><span class="string"> controlIcon</span></span><br><span class="line">                <span class="title">anchors</span> &#123;</span><br><span class="line">                    <span class="attribute">verticalCenter</span>: <span class="built_in">parent</span>.verticalCenter</span><br><span class="line">                    <span class="attribute">right</span>: <span class="built_in">parent</span>.right</span><br><span class="line">                    <span class="attribute">rightMargin</span>: <span class="number">20</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//有子节点时，显示小图标</span></span><br><span class="line">                <span class="attribute">visible</span>: model.display[__hasChildendKey]</span><br><span class="line">                <span class="attribute">source</span>: model.display[__childrenExpendKey] ? <span class="string">"qrc:/img/collapse.png"</span> : <span class="string">"qrc:/img/expand.png"</span></span><br><span class="line">                <span class="title">MouseArea</span> &#123;</span><br><span class="line">                    <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">                    <span class="attribute">onClicked</span>: &#123;</span><br><span class="line">                        <span class="comment">//点击小图标时，切换折叠、展开的状态</span></span><br><span class="line">                        <span class="keyword">if</span> (model.display[__hasChildendKey]) &#123;</span><br><span class="line">                            <span class="keyword">if</span>( <span class="literal">true</span> === model.display[__childrenExpendKey]) &#123;</span><br><span class="line">                                collapse(index)</span><br><span class="line">                            &#125; <span class="title">else</span> &#123;</span><br><span class="line">                                expand(index)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>model层并没有扩展role，而是在data函数的role为display时直接返回json数据，</p><p>所以delegate中统一使用model.display[xxx]的方式访问数据。</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>CPU: Intel i5-8400 2.8GHz 六核</p><p>内存: 16GB</p><p>OS: Windows10 1909</p><p>Qt: 5.12.6</p><p>编译器: msvc 2017 x64</p><p>测试框架: QTest</p><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><h4 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h4><p>使用node表示根节点的数量，depth表示每个根节点下面嵌套节点的层数。</p><p>例如： node 等于 100， depth 等于10，则数据如下：</p><p><img src="/images/Qml13/2.png" alt="预览"></p><p>顶层有100个节点，每个节点下面再嵌套10层，共计节点 100 + 100 * 10 = 1100.</p><p>生成json数据的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">//单元测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadTest</span> :</span> <span class="keyword">public</span> QObject &#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LoadTest();</span><br><span class="line">    ~LoadTest();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">genJson</span><span class="params">(<span class="keyword">const</span> QPoint&amp; point)</span></span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//私有槽函数会被QTest调用</span></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initTestCase</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//清理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cleanupTestCase</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//测试导入</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_load</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//测试导入前，准备数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_load_data</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//测试导出</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//测试导出前，准备数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_save_data</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//节点最大值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> nodeMax = <span class="number">10000</span>;</span><br><span class="line"><span class="comment">//嵌套深度最大值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> depthMax = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> LoadTest::genJson(<span class="keyword">const</span> QPoint&amp; point)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> TaoCommon;</span><br><span class="line">    <span class="keyword">int</span> node = point.x();</span><br><span class="line">    <span class="keyword">int</span> depth = point.y();</span><br><span class="line">    QJsonArray arr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; node; ++i) &#123;</span><br><span class="line">        QJsonObject obj;</span><br><span class="line">        obj[<span class="string">"name"</span>] = QString(<span class="string">"node_%1"</span>).arg(i);</span><br><span class="line">        QVector&lt;QJsonArray&gt; childrenArr = &#123; depth, QJsonArray &#123; QJsonObject &#123;&#125; &#125; &#125;;</span><br><span class="line">        <span class="comment">//最后一个节点，嵌套层级最深的。</span></span><br><span class="line">        childrenArr[depth - <span class="number">1</span>][<span class="number">0</span>] = QJsonObject &#123; &#123; <span class="string">"name"</span>, QString(<span class="string">"node_%1_%2"</span>).arg(i).arg(depth - <span class="number">1</span>) &#125; &#125;;</span><br><span class="line">        <span class="comment">//从后往前倒推。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = depth - <span class="number">2</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            childrenArr[j][<span class="number">0</span>] = QJsonObject &#123; &#123; cRecursionKey, childrenArr[j + <span class="number">1</span>] &#125;, &#123; <span class="string">"name"</span>, QString(<span class="string">"node_%1_%2"</span>).arg(i).arg(j) &#125; &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        obj[cRecursionKey] = childrenArr[<span class="number">0</span>];</span><br><span class="line">        arr.append(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    writeJsonFile(qApp-&gt;applicationDirPath() + QString(<span class="string">"/%1_%2.json"</span>).arg(node).arg(depth), arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> LoadTest::initTestCase()</span><br><span class="line">&#123;</span><br><span class="line">    QList&lt;QPoint&gt; <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nodeMax; i *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= depthMax; j *= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="built_in">list</span>.append(&#123; i, j &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> result = QtConcurrent::<span class="built_in">map</span>(<span class="built_in">list</span>, &amp;LoadTest::genJson);</span><br><span class="line">    result.waitForFinished();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化函数initTestCase中，组织了一个QList，然后使用QtConcurrent::map并发调用genJson函数，生成数据json文件。</p><p>node和depth每次扩大10倍。</p><p>经过测试，嵌套层数在100以上时，Qt可能会崩溃。要么是QJsonDocument无法解析，要么是Qml挂掉。所以不使用100以上的嵌套级别。</p><h3 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h3><p>QTest十分好用，简单易上手，参考帮助文件即可</p><p>例如测试加载的代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> LoadTest::prepareData()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//添加两列数据</span></span><br><span class="line">    QTest::addColumn&lt;<span class="keyword">int</span>&gt;(<span class="string">"node"</span>);</span><br><span class="line">    QTest::addColumn&lt;<span class="keyword">int</span>&gt;(<span class="string">"depth"</span>);</span><br><span class="line">    <span class="comment">//添加行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nodeMax; i *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= depthMax; j *= <span class="number">10</span>) &#123;</span><br><span class="line">            QTest::newRow(QString(<span class="string">"%1_%2"</span>).arg(i).arg(j).toStdString().c_str()) &lt;&lt; i &lt;&lt; j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> LoadTest::test_load_data()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//准备数据</span></span><br><span class="line">    prepareData();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> LoadTest::test_load()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> TaoCommon;</span><br><span class="line">    <span class="comment">//取数据</span></span><br><span class="line">    QFETCH(<span class="keyword">int</span>, node);</span><br><span class="line">    QFETCH(<span class="keyword">int</span>, depth);</span><br><span class="line">    TaoJsonTreeModel model;</span><br><span class="line">    <span class="comment">//性能测试</span></span><br><span class="line">    QBENCHMARK</span><br><span class="line">    &#123;</span><br><span class="line">        model.loadFromJson(qApp-&gt;applicationDirPath() + QString(<span class="string">"/%1_%2.json"</span>).arg(node).arg(depth));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="/images/Qml13/3.png" alt="预览"></p><p>一秒内最多可以加载的数据量在十万级别，包括</p><p>10000 x 10耗时在 386毫秒，1000 x 100 耗时在671毫秒。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#简介&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#发行说明&quot;&gt;发行说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#效果预览&quot;&gt;效果预览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#qt本身的国际化&quot;&gt;Qt本身的国际化&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="玩转Qml" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQml/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qml" scheme="https://jaredtao.github.io/tags/Qml/"/>
    
      <category term="QtQuick" scheme="https://jaredtao.github.io/tags/QtQuick/"/>
    
      <category term="组件化编程" scheme="https://jaredtao.github.io/tags/%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qt(15)-操控Web小车案例</title>
    <link href="https://jaredtao.github.io/2020/03/12/%E7%8E%A9%E8%BD%ACQt(15)-Web%E6%93%8D%E6%8E%A7%E5%B0%8F%E8%BD%A6%E6%A1%88%E4%BE%8B/"/>
    <id>https://jaredtao.github.io/2020/03/12/玩转Qt(15)-Web操控小车案例/</id>
    <published>2020-03-12T11:44:23.000Z</published>
    <updated>2020-12-25T10:09:36.330Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#前言">前言</a></li><li><a href="#简介">简介</a></li><li><a href="#qt与web嵌套">Qt与Web嵌套</a><ul><li><a href="#minibrowser">MiniBrowser</a></li><li><a href="#半透明测试">半透明测试</a></li><li><a href="#渲染原理">渲染原理</a></li><li><a href="#小结">小结</a></li></ul></li><li><a href="#qt与web分离">Qt与Web分离</a><ul><li><a href="#qt小车">Qt小车</a><ul><li><a href="#原版小车">原版小车</a></li><li><a href="#改进小车">改进小车</a></li></ul></li><li><a href="#必要的知识">必要的知识</a><ul><li><a href="#websocket和-qwebsocket">WebSocket和 QWebSocket</a></li><li><a href="#webchannel">WebChannel</a></li><li><a href="#qt启动系统浏览器">Qt启动系统浏览器</a><ul><li><a href="#qt的openurl">Qt的OpenUrl</a></li><li><a href="#c-net的-processstart">C# .net的 Process::Start</a></li></ul></li></ul></li><li><a href="#web控制端">Web控制端</a><ul><li><a href="#目录结构">目录结构</a></li><li><a href="#html">Html</a></li><li><a href="#typescript">TypeScript</a><ul><li><a href="#typescript中的qobject">TypeScript中的QObject</a></li><li><a href="#typescript中连接websocket">TypeScript中连接websocket</a></li><li><a href="#typescript中的qwebchannel">TypeScript中的QWebChannel</a><ul><li><a href="#typescript中使用javascript">TypeScript中使用javaScript</a></li></ul></li></ul></li><li><a href="#改进qwebchanneljs以支持await">改进qwebchannel.js以支持await</a></li><li><a href="#qobject-to-typescript">QObject to Typescript</a></li></ul></li></ul></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次讨论Qt与Web混合开发相关技术。</p><p>这类技术存在适用场景，例如：Qt项目使用Web大量现成的组件/方案做功能扩展，</p><p>Qt项目中性能无关/频繁更新迭代的页面用html单独实现，Qt项目提供Web形式的SDK给</p><p>用户做二次开发等等，或者是Web开发人员齐全而Qt/C++人手不足，此类非技术问题，</p><p>都可以使用Qt + Web混合开发。</p><p>(不适用的请忽略本文)</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>上次的文章《Qt与Web混合开发》，讨论了Qt与Web混合开发相关技术。</p><p>这次通过一个web控制小车的案例，继续讨论相关技术。</p><p>本文会先介绍Qt与Web嵌套使用,再介绍Qt与Web分开使用，之后着重讨论分开使用</p><p>的一些实现细节，特别是WebChannel通信、WebChannel在Web/typescript中的使用。</p><h1 id="Qt与Web嵌套"><a href="#Qt与Web嵌套" class="headerlink" title="Qt与Web嵌套"></a>Qt与Web嵌套</h1><h2 id="MiniBrowser"><a href="#MiniBrowser" class="headerlink" title="MiniBrowser"></a>MiniBrowser</h2><p>这里以Qt官方的例子MiniBrowser来说明吧。</p><p>打开方式如下：</p><p><img src="/images/Web2/example.png" alt=""></p><p>运行效果如下：</p><p><img src="/images/Web2/minibowser0.png" alt=""></p><p>这个例子是在Qml中嵌套了WebView。</p><h2 id="半透明测试"><a href="#半透明测试" class="headerlink" title="半透明测试"></a>半透明测试</h2><p>涛哥做了一个简单的半透明测试。</p><p>增加了两个半透明的小方块，蓝色的在WebView上面，红色的在WebView下面。</p><p>运行效果也是正确的:</p><p><img src="/images/Web2/minibowser.png" alt=""></p><p>代码是这样的：</p><p><img src="/images/Web2/code1.png" alt=""></p><p>红色框中是我增加的代码。</p><p>为什么要做半透明测试呢？根据以往的经验,不同渲染方式的两种窗口/组件嵌套在一起，总会出现透明失效之类的问题，例如 qml与Widget嵌套。</p><h2 id="渲染原理"><a href="#渲染原理" class="headerlink" title="渲染原理"></a>渲染原理</h2><p>涛哥翻了一下Qt源码，了解到渲染的实现方式，Windows平台大致如下：</p><p>chromium在单独的进程处理html渲染，并将渲染结果存储在共享内存中；主窗口在需要重绘的时候，从共享内存中获取内容并渲染。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这里的WebView内部封装好了WebEngine，其本身也是一个Item，就和普通的Qml一样，属性绑定、js function都可以正常使用，暂时不深入讨论了。</p><h1 id="Qt与Web分离"><a href="#Qt与Web分离" class="headerlink" title="Qt与Web分离"></a>Qt与Web分离</h1><p>Qt与Web分离，就是字面意思，Web在单独的浏览器或者App中运行，不和Qt堆在一起。两者通过socket进行通信。</p><p>这里用我自己做的例子来说明吧。</p><p>先看看效果：</p><p><img src="/images/Web2/WebChannel.gif" alt=""></p><p>左边是Qt实现的一个简易小车，可以前进和转向。右边是Html5实现的控制端，控制左边的小车。</p><p>源码在github上: <a href="https://github.com/jaredtao/QtWeb" target="_blank" rel="noopener">https://github.com/jaredtao/QtWeb</a></p><h2 id="Qt小车"><a href="#Qt小车" class="headerlink" title="Qt小车"></a>Qt小车</h2><h3 id="原版小车"><a href="#原版小车" class="headerlink" title="原版小车"></a>原版小车</h3><p>小车来自Qt的D-Bus Remote Controller 例子</p><p><img src="/images/Web2/dbus.png" alt=""></p><p>原版的例子，实现了通过QDBus 跨进程 控制小车。</p><p>(吐槽：这是一个古老的例子,使用了GraphicsView 和QDBus)</p><p>(知识拓展1： DBus是unix系统特有的一种进程间通信机制，使用有些复杂。Qt对DBus机制进行了封装/简化，即QDBus模块，</p><p>通过xml文件的配置后，把DBus的使用转换成了信号-槽的形式。类似于现在的Qt Remote Objects)</p><p>(知识拓展2： Windows本身不支持DBus，网上有socket模拟DBus的方案。参考: <a href="https://www.freedesktop.org/wiki/Software/dbus/" target="_blank" rel="noopener">https://www.freedesktop.org/wiki/Software/dbus/</a>)</p><h3 id="改进小车"><a href="#改进小车" class="headerlink" title="改进小车"></a>改进小车</h3><p>我做了一些修改，主要如下：</p><ul><li>去掉了DBus</li><li>增加控制按钮</li><li>增加WebChannel</li><li>修改Car的实现，导出一些属性和函数。</li><li>注册Car到WebChannel</li></ul><p>这里贴一些关键代码</p><p>Car的头文件：</p><p><img src="/images/Web2/car.h.png" alt=""></p><p>其中要说明的是：</p><p>  speed和angle属性具备  读、写、change信号。</p><p>  还有加速、减速、左转、右转四个公开的槽函数。</p><h2 id="必要的知识"><a href="#必要的知识" class="headerlink" title="必要的知识"></a>必要的知识</h2><h3 id="WebSocket和-QWebSocket"><a href="#WebSocket和-QWebSocket" class="headerlink" title="WebSocket和 QWebSocket"></a>WebSocket和 QWebSocket</h3><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>Qt为我们封装好了WebSocket，即QWebSocket和QWebSocketServer，简单易用。</p><p>如果你了解socket编程，就看作TCP好了；如果不了解，请先去补充一下知识吧。</p><h3 id="WebChannel"><a href="#WebChannel" class="headerlink" title="WebChannel"></a>WebChannel</h3><p>按涛哥的理解，WebChannel是在socket上建立的一种通信协议，这个协议的作用是把QObject暴露给远端的HTML。</p><p>大致使用流程：</p><ol><li><p>Qt程序中，要暴露的QObject全部注册到WebChannel。</p></li><li><p>Qt程序中，启动一个WebSocketServer，等待Html的连接。</p></li><li><p>Html加载好qwebchannel.js文件, 然后去连接WebSocket。</p></li><li><p>连接建立以后，Qt程序中，由WebChannel接手这个WebSocket，按协议将QObject的各种“元数据”传输给远端Html。</p></li><li><p>Html端，qwebchannel.js处理WebSocket收到的各种“元数据”，用js的Object 动态创建出对应的QObject。</p><p>到这里两边算是做好了准备，可以互相调用了。</p><p>Qt端QObject数据变化只要发出信号，就会由WebChannel自动通知Web端；</p><p>Web端可以主动调用QObject的public的 invok函数、槽函数，以及读、写属性。</p></li></ol><h3 id="Qt启动系统浏览器"><a href="#Qt启动系统浏览器" class="headerlink" title="Qt启动系统浏览器"></a>Qt启动系统浏览器</h3><p>在使用WebChannel的时候，Qt端建立了WebSocketServer，之后要把server的路径(例如：ws://127.0.0.1:12345)告诉Html。</p><p>一般就是在打开Html的时候带上Query参数，例如： F:\QtWeb\index.html?webChannelBaseUrl=ws://127.0.0.1:12345</p><h4 id="Qt的OpenUrl"><a href="#Qt的OpenUrl" class="headerlink" title="Qt的OpenUrl"></a>Qt的OpenUrl</h4><p>Qml中有 Qt.openUrlExternally, C++ 中有 QDesktopServices::openUrl，本质一样， 都可以打开一个本地的html网页。</p><p>其在Windows平台的底层实现是Win32 API。这里有个Win32 API的缺陷，传Query参数会被丢掉。</p><h4 id="C-net的-Process-Start"><a href="#C-net的-Process-Start" class="headerlink" title="C# .net的 Process::Start"></a>C# .net的 Process::Start</h4><p>涛哥找到了替代的方案:</p><p> .net framework / .net core有个启动进程的函数： System.Diagnostics.Process::Start, 可以调用浏览器并传query参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;C# 启动chrome</span><br><span class="line">System.Diagnostics.Process.Start(&#39;chrome&#39;, &#39;F:\QtWeb\index.html?webChannelBaseUrl&#x3D;ws:&#x2F;&#x2F;127.0.0.1:12345&#39;);</span><br><span class="line">&#x2F;&#x2F;C# 启动firefox</span><br><span class="line">System.Diagnostics.Process.Start(&#39;firefox&#39;, &#39;F:\QtWeb\index.html?webChannelBaseUrl&#x3D;ws:&#x2F;&#x2F;127.0.0.1:12345&#39;);</span><br><span class="line">&#x2F;&#x2F;C# 启动IE</span><br><span class="line">System.Diagnostics.Process.Start(&#39;IExplore&#39;, &#39;F:\QtWeb\index.html?webChannelBaseUrl&#x3D;ws:&#x2F;&#x2F;127.0.0.1:12345&#39;);</span><br></pre></td></tr></table></figure><p>Qt中直接写C#当然不太好，不过呢，Win7/Win10 系统都带有Powershell，而powershell依赖于.net framework, 我们可以调用powershell来间接使用.net framework。</p><p>所以有了下面的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">QString psCmd = QString(<span class="string">"powershell -noprofile -command \"[void][System.Diagnostics.Process]::Start('%1', '%2')\""</span>).arg(browser).arg(url.toString());</span><br><span class="line"><span class="keyword">bool</span> ok = QProcess::startDetached(psCmd);</span><br><span class="line">qWarning() &lt;&lt; psCmd;</span><br><span class="line"><span class="keyword">if</span> (!ok) &#123;</span><br><span class="line">    qWarning() &lt;&lt; <span class="string">"failed"</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>结果完美运行。</p><h2 id="Web控制端"><a href="#Web控制端" class="headerlink" title="Web控制端"></a>Web控制端</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>Web端就按照Web常规流程开发。</p><p>Web部分的源码也在前文提到的github仓库，子路径是QtWeb\WebChannelCar\Web</p><p>如下是Web部分的目录结构：</p><p><img src="/images/Web2/web.png" alt=""></p><p>脚本用typescript，包管理用npm，打包用webpack，编辑器用vs code, 都中规中矩。</p><p>内容比较简单，暂时不需要前端框架，手(复)写(制)的html和css。</p><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><p>html部分比较简单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; chartset=utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../style/style.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../style/layout.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"up"</span> <span class="attr">class</span>=<span class="string">"green button"</span>&gt;</span>加速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"down"</span> <span class="attr">class</span>=<span class="string">"red button"</span>&gt;</span>减速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"blue button"</span>&gt;</span>左转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"blue button"</span>&gt;</span>右转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"../img/disconnected.svg"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>速度: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">"speed"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>角度: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">"angle"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../out/main.js"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式和布局全靠css,这里就不贴了。</p><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>脚本部分需要细说了。</p><p>src文件夹为全部脚本，目录结构如下：</p><p><img src="/images/Web2/src.png" alt=""></p><h4 id="TypeScript中的QObject"><a href="#TypeScript中的QObject" class="headerlink" title="TypeScript中的QObject"></a>TypeScript中的QObject</h4><p>从main开始, 加点注释：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.ts</span></span><br><span class="line"><span class="keyword">import</span> WebChannelCore <span class="keyword">from</span> <span class="string">"./webchannelCore"</span>;</span><br><span class="line"><span class="comment">//window加载时回调，入口</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//初始化WebChannel，传参为两个回调，分别对应WebChannel建立连接和连接断开。</span></span><br><span class="line">    WebChannelCore.initialize(onInit, onUninit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//WebChannel建立连接的处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onInit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//换图标</span></span><br><span class="line">    (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).document.getElementById(<span class="string">"img"</span>).src = <span class="string">"../img/connected.svg"</span>;</span><br><span class="line">    <span class="comment">//获取QObject对象</span></span><br><span class="line">    <span class="keyword">let</span> car = WebChannelCore.SDK.car;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//取dom树上的组件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> upBtn = (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).document.getElementById(<span class="string">"up"</span>);</span><br><span class="line">    <span class="keyword">let</span> downBtn = (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).document.getElementById(<span class="string">"down"</span>);</span><br><span class="line">    <span class="keyword">let</span> leftBtn = (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).document.getElementById(<span class="string">"left"</span>);</span><br><span class="line">    <span class="keyword">let</span> rightBtn = (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).document.getElementById(<span class="string">"right"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> speedLabel = (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).document.getElementById(<span class="string">"speed"</span>);</span><br><span class="line">    <span class="keyword">let</span> angleLabel = (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).document.getElementById(<span class="string">"angle"</span>);</span><br><span class="line">    <span class="comment">//绑定按钮点击事件</span></span><br><span class="line">    upBtn.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//调用QObject的接口</span></span><br><span class="line">        car.accelerate();</span><br><span class="line">    &#125;</span><br><span class="line">    downBtn.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        car.decelerate();</span><br><span class="line">    &#125;</span><br><span class="line">    leftBtn.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        car.turnLeft();</span><br><span class="line">    &#125;</span><br><span class="line">    rightBtn.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        car.turnRight();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//QObject的信号连接到js 回调</span></span><br><span class="line">    car.speedChanged.connect(onSpeedChanged);</span><br><span class="line">    car.angleChanged.connect(onAngleChanged);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//WebChannel断开连接的处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onUninit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//换图标</span></span><br><span class="line">    (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).document.getElementById(<span class="string">"img"</span>).src = <span class="string">"../img/disconnected.svg"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//异步更新 speed</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">onSpeedChanged</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> speedLabel = (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).document.getElementById(<span class="string">"speed"</span>);</span><br><span class="line">    <span class="keyword">let</span> car = WebChannelCore.SDK.car;</span><br><span class="line">    <span class="comment">//获取speed，异步等待。</span></span><br><span class="line">    <span class="comment">//注意这里改造过qwebchannel.js，才能使用await。</span></span><br><span class="line">    speedLabel.textContent = <span class="keyword">await</span> car.getSpeed();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//异步更新 angle</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">onAngleChanged</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> angleLabel = (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).document.getElementById(<span class="string">"angle"</span>);</span><br><span class="line">    <span class="keyword">let</span> car = WebChannelCore.SDK.car;</span><br><span class="line">    <span class="comment">//获取angle，异步等待。</span></span><br><span class="line">    <span class="comment">//注意这里改造过qwebchannel.js，才能使用await。</span></span><br><span class="line">    angleLabel.textContent = <span class="keyword">await</span> car.getAngle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们从WebChannelCore.SDK 中获取了一个car对象，之后就当作QObject来用了，包括调用它的函数、连接change信号、访问属性等。</p><p>这一切都得益于WebSocket/WebChannel.</p><h4 id="TypeScript中连接websocket"><a href="#TypeScript中连接websocket" class="headerlink" title="TypeScript中连接websocket"></a>TypeScript中连接websocket</h4><p>接下来看一下WebChannelCore的实现</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WebChannelCore.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; QWebChannel &#125; <span class="keyword">from</span> <span class="string">'./qwebchannel'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> callback = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> WebChannelCore &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SDK: <span class="built_in">any</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> connectedCb: callback;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> disconnectedCb: callback;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> socket: WebSocket;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> initialize(connectedCb: callback = <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;, disconnectedCb: callback = <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (WebChannelCore.SDK != <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存两个回调</span></span><br><span class="line">        WebChannelCore.connectedCb = connectedCb;</span><br><span class="line">        WebChannelCore.disconnectedCb = disconnectedCb;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用link，并传入两个回调参数</span></span><br><span class="line">            WebChannelCore.link(</span><br><span class="line">                (socket) =&gt; &#123;</span><br><span class="line">                  <span class="comment">//socket连接成功时，创建QWebChannel</span></span><br><span class="line">                    QWebChannel(socket, <span class="function">(<span class="params">channel: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">                        WebChannelCore.SDK = channel.objects;</span><br><span class="line">                        WebChannelCore.connectedCb();</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                , <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                  <span class="comment">//socket出错</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"socket error"</span>, error);</span><br><span class="line">                    WebChannelCore.disconnectedCb();</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"socket exception:"</span>, error);</span><br><span class="line">            WebChannelCore.disconnectedCb();</span><br><span class="line">            WebChannelCore.SDK = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> link(resolve: <span class="function">(<span class="params">socket: WebSocket</span>) =&gt;</span> <span class="built_in">void</span>, reject: <span class="function">(<span class="params">error: Event | CloseEvent</span>) =&gt;</span> <span class="built_in">void</span>) &#123;</span><br><span class="line">        <span class="comment">//获取Query参数中的websocket地址</span></span><br><span class="line">        <span class="keyword">let</span> baseUrl = <span class="string">"ws://localhost:12345"</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.location.search != <span class="string">""</span>) &#123;</span><br><span class="line">            baseUrl = (<span class="regexp">/[?&amp;]webChannelBaseUrl=([A-Za-z0-9\-:/\.]+)/</span>.exec(<span class="built_in">window</span>.location.search)![<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Connectiong to WebSocket server at: "</span>, baseUrl);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建WebSocket</span></span><br><span class="line">        <span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(baseUrl);</span><br><span class="line">        WebChannelCore.socket = socket;</span><br><span class="line">        <span class="comment">//WebSocket的事件处理</span></span><br><span class="line">        socket.onopen = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(socket);</span><br><span class="line">        &#125;;</span><br><span class="line">        socket.onerror = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">        &#125;;</span><br><span class="line">        socket.onclose = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).SDK = WebChannelCore.SDK;</span><br></pre></td></tr></table></figure><p>这部分代码不复杂，主要是连接WebSocket，连接好之后创建一个QWebChannel。</p><h4 id="TypeScript中的QWebChannel"><a href="#TypeScript中的QWebChannel" class="headerlink" title="TypeScript中的QWebChannel"></a>TypeScript中的QWebChannel</h4><p>观察仔细的同学会发现，src文件夹下面，没有叫‘qwebchannel.ts’的文件，而是‘qwebchannel.js’,和一个‘qwebchannel.d.ts’</p><p>这涉及到另一个话题：</p><h5 id="TypeScript中使用javaScript"><a href="#TypeScript中使用javaScript" class="headerlink" title="TypeScript中使用javaScript"></a>TypeScript中使用javaScript</h5><p>‘qwebchannel.js’是Qt官方提供的，在js中用足够了。</p><p>而我们这里是用TypeScript，按照TypeScript的规则，直接引入js是不行的，需要一个声明文件 xxx.d.ts</p><p>所以我们增加了一个qwebchannel.d.ts文件。 </p><p>（熟悉C/C++的同学，可以把d.ts看作typescript的头文件）</p><p>内容如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//qwebchannel.d.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">QWebChannel</span>(<span class="params">transport: <span class="built_in">any</span>, initCallback: <span class="built_in">Function</span></span>): <span class="title">void</span></span>;</span><br></pre></td></tr></table></figure><p>只是导出了一个函数。</p><p>这个函数的实现在‘qwebchannel.js’中:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//qwebchannel.js</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> QWebChannelMessageTypes = &#123;</span><br><span class="line">    signal: <span class="number">1</span>,</span><br><span class="line">    propertyUpdate: <span class="number">2</span>,</span><br><span class="line">    init: <span class="number">3</span>,</span><br><span class="line">    idle: <span class="number">4</span>,</span><br><span class="line">    debug: <span class="number">5</span>,</span><br><span class="line">    invokeMethod: <span class="number">6</span>,</span><br><span class="line">    connectToSignal: <span class="number">7</span>,</span><br><span class="line">    disconnectFromSignal: <span class="number">8</span>,</span><br><span class="line">    setProperty: <span class="number">9</span>,</span><br><span class="line">    response: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> QWebChannel = <span class="function"><span class="keyword">function</span>(<span class="params">transport, initCallback</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> transport !== <span class="string">"object"</span> || <span class="keyword">typeof</span> transport.send !== <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"The QWebChannel expects a transport object with a send function and onmessage callback property."</span> +</span><br><span class="line">                      <span class="string">" Given is: transport: "</span> + <span class="keyword">typeof</span>(transport) + <span class="string">", transport.send: "</span> + <span class="keyword">typeof</span>(transport.send));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QObject</span>(<span class="params">name, data, webChannel</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码比较长，就不全部贴出来了。主要实现了两个类，QWebChannel和QObject。</p><p>QWebChannel就是用来接管websocket的，而QObject是用js Object模拟的 Qt的 QObject。</p><p>这一块不细说了，感兴趣的同学可以自己去研究源码。</p><h3 id="改进qwebchannel-js以支持await"><a href="#改进qwebchannel-js以支持await" class="headerlink" title="改进qwebchannel.js以支持await"></a>改进qwebchannel.js以支持await</h3><p>Qt默认的qwebchannel.js在实际使用过程中，有些不好的地方，就是函数的返回值不是直接返回，而是要在回调函数中获取。</p><p>比如car.getAngle要这样用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> angle = <span class="number">0</span>;</span><br><span class="line">car.getAngle(<span class="function">(<span class="params">value:<span class="built_in">number</span></span>)=&gt;</span> &#123;</span><br><span class="line">  angle = value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们的实际项目中，有大量带返回值的api，这样的用法每次都嵌套一个回调函数，很不友好，容易造成回调地狱。</p><p>我们同事的解决方案是，在typescript中把这些api再用Promise封装一层，外面用await调用。</p><p>例如这样封装一层：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAngle</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">        car.getAngle(<span class="function">(<span class="params">value:<span class="built_in">number</span></span>)=&gt;</span> &#123;</span><br><span class="line">            resolve(value);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用和前面的代码一样：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步更新 angle</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">onAngleChanged</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> angleLabel = (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).document.getElementById(<span class="string">"angle"</span>);</span><br><span class="line">    <span class="keyword">let</span> car = WebChannelCore.SDK.car;</span><br><span class="line">    <span class="comment">//获取angle，异步等待。</span></span><br><span class="line">    <span class="comment">//注意这里改造过qwebchannel.js，才能使用await。</span></span><br><span class="line">    angleLabel.textContent = <span class="keyword">await</span> car.getAngle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种解决方案规避了回调地狱，但是工作量增加了。</p><p>涛哥思考良久，稍微改造一下qwebchannel.js，自动把Promise加进去，也不需要再额外封装了。</p><p>改动如下：</p><p><img src="../images/Web2/webchannel.png" alt=""></p><h3 id="QObject-to-Typescript"><a href="#QObject-to-Typescript" class="headerlink" title="QObject to Typescript"></a>QObject to Typescript</h3><p>我们在Qt 程序中写了QObject，然后暴露给了ts。</p><p>在ts这边，一般也需要提供一个声明文件，明确有哪些api可用。</p><p>例如我们的car声明：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CarObject.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> Car &#123;</span><br><span class="line">    <span class="keyword">get</span> speed():<span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">set</span> speed(value:<span class="built_in">number</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> angle():<span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">set</span> angle(vlaue:<span class="built_in">number</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> accelerate():<span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">public</span> decelerate():<span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">public</span> turnLeft():<span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">public</span> turnRight():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涛哥写了一个小工具，能够解析Qt中的QObject，并生成对应的ts文件。</p><p>当然还是实验阶段，有兴趣的也可以关注一下</p><p><a href="https://github.com/jaredtao/QObject2TypeScript" target="_blank" rel="noopener">https://github.com/jaredtao/QObject2TypeScript</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#简介&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#qt与web嵌套&quot;&gt;Qt与Web嵌套&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#minibrowser&quot;&gt;MiniBro
      
    
    </summary>
    
      <category term="玩转Qt" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQt/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qt实用技能" scheme="https://jaredtao.github.io/tags/Qt%E5%AE%9E%E7%94%A8%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qt(14)-Qt与Web混合开发</title>
    <link href="https://jaredtao.github.io/2020/03/04/%E7%8E%A9%E8%BD%ACQt(14)-Qt%E4%B8%8EWeb%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    <id>https://jaredtao.github.io/2020/03/04/玩转Qt(14)-Qt与Web混合开发/</id>
    <published>2020-03-04T11:44:23.000Z</published>
    <updated>2020-12-25T10:09:15.858Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#前言">前言</a></li><li><a href="#简介">简介</a></li><li><a href="#qt的web方案">Qt的Web方案</a><ul><li><a href="#quick-webgl-stream">Quick WebGL Stream</a></li><li><a href="#qt-webassembly">Qt WebAssembly</a></li><li><a href="#qt-webenginewebview">Qt WebEngine/WebView</a></li><li><a href="#qtwebengine的更新情况">QtWebEngine的更新情况</a></li><li><a href="#webengine的架构">WebEngine的架构</a></li><li><a href="#webengine的平台要求">WebEngine的平台要求</a><ul><li><a href="#windows">Windows</a></li><li><a href="#macos">MacOS</a></li><li><a href="#linux">Linux</a></li></ul></li><li><a href="#webview">WebView</a></li><li><a href="#webengine的使用">WebEngine的使用</a><ul><li><a href="#webengine-widget最简demo">WebEngine Widget最简Demo</a><ul><li><a href="#源代码">源代码</a></li><li><a href="#运行结果">运行结果</a></li><li><a href="#最小发布包">最小发布包</a></li></ul></li><li><a href="#webengine-qml最简demo">WebEngine Qml最简Demo</a><ul><li><a href="#源码">源码</a></li><li><a href="#运行结果-1">运行结果</a></li><li><a href="#最小发布包-1">最小发布包</a></li></ul></li></ul></li></ul></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次讨论Qt与Web混合开发相关技术。</p><p>这类技术存在适用场景，例如：Qt项目使用Web大量现成的组件/方案做功能扩展，</p><p>Qt项目中性能无关/频繁更新迭代的页面用html单独实现，Qt项目提供Web形式的SDK给</p><p>用户做二次开发等等，或者是Web开发人员齐全而Qt/C++人手不足，此类非技术问题，</p><p>都可以使用Qt + Web混合开发。</p><p>(不适用的请忽略本文)</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这篇文章，会先整体介绍一下Qt的各种Web方案,再提供简单的Demo，并做一些简要的说明。</p><p>之后的一篇文章，会通过一个Web控制Qt端小车的案例，来做进一步讨论。</p><h1 id="Qt的Web方案"><a href="#Qt的Web方案" class="headerlink" title="Qt的Web方案"></a>Qt的Web方案</h1><p>Qt提供的Web方案主要包括 WebEngine/WebView、Quick WebGL Stream、QtWebAssembly三种。</p><h2 id="Quick-WebGL-Stream"><a href="#Quick-WebGL-Stream" class="headerlink" title="Quick WebGL Stream"></a>Quick WebGL Stream</h2><p>可以参考Qt官方的WebGL Stream介绍文档</p><p><a href="https://resources.qt.io/cn/qt-quick-webgl-release-512" target="_blank" rel="noopener">https://resources.qt.io/cn/qt-quick-webgl-release-512</a><br>​<br>resources.qt.io<br>WebGL Stream在5.12中正式发布，其本质是一种通信技术，将已有的QtQuick程序中渲染指令和数据，通过socket传输给Web端，由WebGL实现界面渲染。</p><p>其使用方式非常的简单，无需修改源码，应用程序启动时，带上端口参数，例如：</p><p>./your-qt-application -platform webgl:port=8998<br>(相当于应用程序变成了一个服务器端程序)</p><p>这样程序就在后端运行，看不到界面了，之后浏览器打开本地网址 localhost:8998 或者内网地址/映射后的公网地址，就能在浏览器中看到程序页面。</p><p>WebGL Stream的应用不多，Qt官方给的案例是：欧洲某工厂的大量传感器监测设备，都以WebGL Stream的方式运行Qt 程序，本身都不带显卡和显示器，而在控制中心的显卡/显示器上，通过Web打开网页的方式，查看每个设备的运行状况。因此节约了大量显卡/显示器的成本。类比于网吧的无硬盘系统。</p><p>涛哥相信，未来结合5G技术会有不错的应用场景。</p><h2 id="Qt-WebAssembly"><a href="#Qt-WebAssembly" class="headerlink" title="Qt WebAssembly"></a>Qt WebAssembly</h2><p>Qt WebAssembly技术，在5.13中正式发布。本质是把Qt程序编译成浏览器支持的二进制文件，由浏览器加载运行。</p><p>一方面可以将现有的Qt程序编译成Web，另一方面可以用Qt/C++来弥补Web程序的性能短板。</p><p>Qt WebAssembly在使用细节上还有一些坑的地方，需要踩一踩。后续我再写文章吧。</p><h2 id="Qt-WebEngine-WebView"><a href="#Qt-WebEngine-WebView" class="headerlink" title="Qt WebEngine/WebView"></a>Qt WebEngine/WebView</h2><p>Qt提供了WebEngine模块以支持Web功能。</p><p>Qt WebEngine基于google的开源浏览器chromium实现，类似的项目还有<a href="https://github.com/chromiumembedded/cef" target="_blank" rel="noopener">cef</a>、<a href="https://github.com/weolar/miniblink49" target="_blank" rel="noopener">miniblink</a>等等。</p><p>QtWebEngine可以看作是一个完整的chromium浏览器。</p><p>（WebView是同类的方案，稍微有些区别。后文再说。）</p><h2 id="QtWebEngine的更新情况"><a href="#QtWebEngine的更新情况" class="headerlink" title="QtWebEngine的更新情况"></a>QtWebEngine的更新情况</h2><p>浏览器技术十分的庞大，这里先不深入展开，先来关注一下Qt WebEngine对chromium的跟进情况。</p><p>数据来源于<a href="https://wiki.qt.io/" target="_blank" rel="noopener">Qt wiki</a>，Qt每个版本的change log</p><table><thead><tr><th>Qt版本</th><th>chromium后端</th><th>chromium安全更新</th></tr></thead><tbody><tr><td>5.9.0</td><td>56</td><td></td></tr><tr><td>5.9.1</td><td>-</td><td>59.0.3071.104</td></tr><tr><td>5.9.2</td><td>-</td><td>61.0.3163.79</td></tr><tr><td>5.9.3</td><td>-</td><td>62.0.3202.89</td></tr><tr><td>5.9.4</td><td>-</td><td>63.0.3239.132</td></tr><tr><td>5.9.5</td><td>-</td><td>65.0.3325.146</td></tr><tr><td>5.9.6</td><td>-</td><td>66.0.3359.170</td></tr><tr><td>5.9.7</td><td>-</td><td>69.0.3497.113</td></tr><tr><td>5.9.8</td><td>-</td><td>72.0.3626.121</td></tr><tr><td>5.9.9</td><td>-</td><td>78.0.3904.108</td></tr><tr><td>5.12.0</td><td>69</td><td></td></tr><tr><td>5.12.1</td><td></td><td>71.0.3578.94</td></tr><tr><td>5.12.2</td><td></td><td>72.0.3626.121</td></tr><tr><td>5.12.3</td><td></td><td>73.0.3683.75</td></tr><tr><td>5.12.4</td><td></td><td>74.0.3729.157</td></tr><tr><td>5.12.5</td><td></td><td>76.0.3809.87</td></tr><tr><td>5.12.6</td><td></td><td>77.0.3865.120</td></tr><tr><td>5.12.7</td><td></td><td>79.0.3945.130</td></tr><tr><td>5.14.0</td><td>77</td><td></td></tr><tr><td>5.14.1</td><td></td><td>79.0.3945.117</td></tr></tbody></table><p>可以看到Qt在WebEngine模块，一直持续跟进Chromium的更新。</p><p>当前(2020/3/4)最新的chromium版本是80。</p><h2 id="WebEngine的架构"><a href="#WebEngine的架构" class="headerlink" title="WebEngine的架构"></a>WebEngine的架构</h2><p>QtWebEngine提供了C++和Qml的接口，可以在Widget/Qml中渲染HTML、XHTML、SVG，</p><p>也支持CSS样式表和JavaScript脚本。</p><p>QtWebEngine的架构图如下</p><p><img src="/images/Web/1.png" alt=""></p><p>基于Chromium封装了一个WebEngineCore模块，在此之上，</p><p>WebEngine Widgets模块专门用于Widget项目，</p><p>WebEngine 模块用于Qml项目，</p><p>WebEngineProcess则是一个单独的进程，用来渲染页面、运行js脚本。</p><p>Web在单独的进程里，我们开发的时候知道这一点就好了，不需要额外关注，</p><p>只要在发布的时候，带上QTDIR目录下的可执行程序QtWebEngineProcess即可。</p><p>(这里提一下底层实现原理，使用了进程间共享OpenGL上下文的方式, 实现多个进程的UI混合在一起)</p><h2 id="WebEngine的平台要求"><a href="#WebEngine的平台要求" class="headerlink" title="WebEngine的平台要求"></a>WebEngine的平台要求</h2><p>(以Qt5.12为参考)</p><p>首先一条是：不支持静态编译 (因为依赖的chromium、chromium本身的依赖库 不能静态编译)</p><p>接下来再看看各平台的要求和限制：</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>编译器要 Visual Studio 2017 version 15.8 以上</p><p>系统环境要 Windows 10 SDK</p><p>默认只支持X64版本，如果要x86版本，要自己编译qt源码。</p><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><ul><li><p>MacOS 10.12以上</p></li><li><p>XCode 8.3.3以上</p></li><li><p>MacOS 10.12以上 SDK</p></li></ul><p>不支持32-bit</p><p>不兼容 Mac App Store (chromium使用了私有api，App Sandbox和chromium Sandbox优先级问题)</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>编译器要 clang， 或者 gcc 5以上</p><p>需要pkg-config来探测依赖库，dbus-1和 fontconfig是必须的。</p><p>如果配置了xcb，还要额外配置相关库。</p><h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><p>Qt还提供了一个WebView组件，可以用来将Web内容嵌入到Qml程序中。(这个没有提供Widget的接口)</p><p>WebView组件的实现，使用了平台原生api，在移动端意义重大，特别是在ios平台，使用</p><p>原生的web view，这样就能兼容App Store了。</p><p>在Windows/MacOS/Linux平台，则是渲染部分还是使用了WebEngine。</p><p>WebView的使用可以参考官方例子Minibrowser</p><p><img src="/images/Web/6.png" alt=""></p><h2 id="WebEngine的使用"><a href="#WebEngine的使用" class="headerlink" title="WebEngine的使用"></a>WebEngine的使用</h2><h3 id="WebEngine-Widget最简Demo"><a href="#WebEngine-Widget最简Demo" class="headerlink" title="WebEngine Widget最简Demo"></a>WebEngine Widget最简Demo</h3><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><p>这里示例一个最简单的demo, 使用WebEngine Widget模块提供的QWebEngineView：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Demo.pro</span></span><br><span class="line">QT += core gui webenginewidgets</span><br><span class="line"></span><br><span class="line">CONFIG += c++<span class="number">11</span></span><br><span class="line"></span><br><span class="line">SOURCES += \</span><br><span class="line">        main.cpp</span><br></pre></td></tr></table></figure><p>注意pro文件中包含的Qt模块</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWebEngineView&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    QWebEngineView view;</span><br><span class="line">    view.load(QUrl(<span class="string">"https://www.zhihu.com/"</span>));</span><br><span class="line">    view.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>上面代码以打开知乎首页为例，运行结果如下 </p><p><img src="/images/Web/2.png" alt=""></p><h4 id="最小发布包"><a href="#最小发布包" class="headerlink" title="最小发布包"></a>最小发布包</h4><p>涛哥尝试了在Windows平台，做出可用的最小发布包:</p><p><img src="/images/Web/3.png" alt=""></p><p>尺寸在170M左右。这些依赖项中，除了常见的Qt必备项platforms、Qt5Core、Qt5Gui等，</p><p>Qt5WebEngineCore是最大的一个，有70M。QtWebEngineProcess.exe是新增加的一个exe程序，</p><p>前文说架构图时提到的单独进程就是这个程序实现。</p><p>resources/icudtl.dat在其它浏览器引擎中也常看到。</p><p>translations/qtwebengine_locales是WebEngine的翻译项，不带可能会发生翻译问题。</p><p>Qt5Positioning、Qt5PrintSupport一般不怎么用，但是不带这两个程序起不来。</p><p>同时发现Qml和Quick模块也是必须的，Qt5QuickWidgets也用上了。</p><p>涛哥查看源码后发现WebEngineCore模块依赖Quick和Qml模块。</p><h3 id="WebEngine-Qml最简Demo"><a href="#WebEngine-Qml最简Demo" class="headerlink" title="WebEngine Qml最简Demo"></a>WebEngine Qml最简Demo</h3><p>再做一个纯Qml的Demo</p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p>pro中增加webengine模块即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WebQml.pro</span></span><br><span class="line">QT += core gui quick qml webengine</span><br><span class="line"></span><br><span class="line">CONFIG += c++<span class="number">11</span></span><br><span class="line"></span><br><span class="line">SOURCES += \</span><br><span class="line">        main.cpp</span><br><span class="line"></span><br><span class="line">RESOURCES += \</span><br><span class="line">    Qrc.qrc</span><br></pre></td></tr></table></figure><p>注意初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickView&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWebEngine&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">//初始化。时机在QApp之后，Window/View构造之前。</span></span><br><span class="line">    QtWebEngine::initialize();</span><br><span class="line"></span><br><span class="line">    QQuickView view;</span><br><span class="line">    view.setSource(QUrl(<span class="string">"qrc:/main.qml"</span>));</span><br><span class="line">    view.show();</span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>qml导入模块，填入url</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.qml</span></span><br><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"><span class="keyword">import</span> QtWebEngine <span class="number">1.8</span></span><br><span class="line"><span class="title">Item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600</span></span><br><span class="line">    <span class="title">WebEngineView</span> &#123;</span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">url</span>: <span class="string">"https://www.zhihu.com"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><p>运行结果和上一个Demo一样</p><p><img src="/images/Web/4.png" alt=""></p><h4 id="最小发布包-1"><a href="#最小发布包-1" class="headerlink" title="最小发布包"></a>最小发布包</h4><p>这回可以去掉Widget模块</p><p><img src="/images/Web/5.png" alt=""></p><p>同时也去掉不必要的翻译文件。包大小160M左右，和前面的差别不大。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#简介&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#qt的web方案&quot;&gt;Qt的Web方案&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#quick-webgl-stream&quot;&gt;
      
    
    </summary>
    
      <category term="玩转Qt" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQt/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qt实用技能" scheme="https://jaredtao.github.io/tags/Qt%E5%AE%9E%E7%94%A8%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qt(13)-安卓5.12.4环境搭建</title>
    <link href="https://jaredtao.github.io/2019/12/08/%E7%8E%A9%E8%BD%ACQt(13)-%E5%AE%89%E5%8D%935.12.4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://jaredtao.github.io/2019/12/08/玩转Qt(13)-安卓5.12.4环境搭建/</id>
    <published>2019-12-07T16:44:23.000Z</published>
    <updated>2020-12-25T10:08:45.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Qt for android 环境搭建，以Windows平台 Qt5.12为基准。</p><h1 id="安装Qt"><a href="#安装Qt" class="headerlink" title="安装Qt"></a>安装Qt</h1><p>需要先安装Android版的Qt。 一般在Qt的安装包中都有集成，安装的时候勾上就行</p><p><img src="/images/Android/1.png" alt="预览"></p><h1 id="安装必备工具链"><a href="#安装必备工具链" class="headerlink" title="安装必备工具链"></a>安装必备工具链</h1><p>Android开发必备的工具链包括：</p><ul><li>Java JDK</li><li>Android SDK</li><li>Android NDK</li></ul><p>下载链接分别点击QtCreator中的按钮就能跳转到</p><p><img src="/images/Android/3.png" alt="预览"></p><p>如果不能访问，需要梯子，或者找镜像网站。</p><p>这里要注意版本，和Qt5.12适配的才能用。Qt官方也没有说，都是自己试出来的。</p><p>JDK： OpenJDK没有试过，Oracle 的JDK， LTS版本有 1.8 和1.11，但是目前的Android SDK都是基于1.8开发的，1.11还用不了。</p><p>SDK： SDK下最新的就好。</p><p>NDK： Qt5.12能用的NDK是R19C，当前最新的是R20，里面工具链修改了，Qt还没有跟上，得后续版本（Qt5.12.5）</p><p>都装好就行了，不要去修改环境变量。直接在QtCreator里面选好路径即可。</p><p><img src="/images/Android/2.png" alt="预览"></p><h1 id="更新SDK，build-Tool"><a href="#更新SDK，build-Tool" class="headerlink" title="更新SDK，build Tool"></a>更新SDK，build Tool</h1><p>到SDK 管理页面，安装一堆必要的工具和镜像。注意Android SDK Build Tool ， 能用的是28.0.3，最新的29用不了。</p><p><img src="/images/Android/4.png" alt="预览"></p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>创建一个Qt项目，使用Andorid kit。</p><p>之后在项目管理页面中，点一下 “Create Template”按钮，生成一堆android相关配置文件。</p><p><img src="/images/Android/5.png" alt="预览"></p><p>之后去项目路径下，找到build.gradle文件</p><p><img src="/images/Android/6.png" alt="预览"></p><p>把buildToolsVersion改成”28.0.3”</p><p><img src="/images/Android/7.png" alt="预览"></p><p>最后编译运行就可以了。模拟器或真机连接，就不说了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Qt for android 环境搭建，以Windows平台 Qt5.12为基准。&lt;/p&gt;
&lt;h1 id=&quot;安装Qt&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="玩转Qt" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQt/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qml" scheme="https://jaredtao.github.io/tags/Qml/"/>
    
      <category term="QtQuick" scheme="https://jaredtao.github.io/tags/QtQuick/"/>
    
      <category term="组件化编程" scheme="https://jaredtao.github.io/tags/%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Android" scheme="https://jaredtao.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qt(12)-github-Actions缓存优化</title>
    <link href="https://jaredtao.github.io/2019/12/04/%E7%8E%A9%E8%BD%ACQt(12)-github-Actions%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    <id>https://jaredtao.github.io/2019/12/04/玩转Qt(12)-github-Actions缓存优化/</id>
    <published>2019-12-04T04:44:23.000Z</published>
    <updated>2020-12-25T10:08:23.953Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e7%ae%80%e4%bb%8b">简介</a></li><li><a href="#%e5%8e%9f%e7%90%86">原理</a><ul><li><a href="#%e7%bc%93%e5%ad%98actions%e6%a8%a1%e6%9d%bf">缓存actions模板</a></li><li><a href="#%e7%bc%93%e5%ad%98%e6%96%87%e6%a1%a3">缓存文档</a></li><li><a href="#%e7%bc%93%e5%ad%98%e5%a4%a7%e5%b0%8f%e9%99%90%e5%88%b6">缓存大小限制</a></li><li><a href="#%e7%bc%93%e5%ad%98%e8%bf%90%e4%bd%9c%e6%b5%81%e7%a8%8b">缓存运作流程</a></li></ul></li><li><a href="#qt%e9%a1%b9%e7%9b%ae%e7%9a%84%e7%bc%93%e5%ad%98%e4%bc%98%e5%8c%96">Qt项目的缓存优化</a><ul><li><a href="#%e6%97%a0%e7%bc%93%e5%ad%98%e7%9a%84%e9%85%8d%e7%bd%ae">无缓存的配置</a></li><li><a href="#%e5%8a%a0%e7%bc%93%e5%ad%98">加缓存</a></li><li><a href="#%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f%e8%bf%98%e5%8e%9f">环境变量还原</a></li><li><a href="#%e6%9c%80%e7%bb%88%e9%85%8d%e7%bd%ae">最终配置</a></li></ul></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在之前两篇文章《github-Actions自动化编译》《github-Actions自动化发行》中，</p><p>介绍了github-Actions的一些用法，其中有部分配置，已经有了缓存相关的步骤。</p><p>这里专门开一篇文章，来记录github-Actions的缓存优化相关的知识。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="缓存actions模板"><a href="#缓存actions模板" class="headerlink" title="缓存actions模板"></a>缓存actions模板</h3><p>github-Actions提供了缓存模板<a href="https://github.com/actions/cache" target="_blank" rel="noopener">cache</a></p><h3 id="缓存文档"><a href="#缓存文档" class="headerlink" title="缓存文档"></a>缓存文档</h3><p>官方文档也有说明 <a href="https://help.github.com/cn/actions/automating-your-workflow-with-github-actions/caching-dependencies-to-speed-up-workflows" target="_blank" rel="noopener">缓存文档</a></p><p>缓存大致原理就是把目标路径打包存储下来，并记录一个唯一key。</p><p>下次启动时，根据key去查找。找到了就再按路径解压开。</p><h3 id="缓存大小限制"><a href="#缓存大小限制" class="headerlink" title="缓存大小限制"></a>缓存大小限制</h3><p>注意缓存有大小限制。对于免费用户，单个包不能超过500MB，整个仓库的缓存不能超过2G。</p><h3 id="缓存运作流程"><a href="#缓存运作流程" class="headerlink" title="缓存运作流程"></a>缓存运作流程</h3><p>一般我们在任务步骤中增加一个cache</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">steps</span>:</span><br><span class="line">  ...</span><br><span class="line">  - <span class="attribute">use</span>: actions/cache<span class="variable">@v1</span></span><br><span class="line">    <span class="attribute">with</span>:</span><br><span class="line">      ...</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>那么在这个地方，缓存执行的操作是restore。</p><p>在steps的末尾，会自动增加一个PostCache，执行的操作是record。</p><h2 id="Qt项目的缓存优化"><a href="#Qt项目的缓存优化" class="headerlink" title="Qt项目的缓存优化"></a>Qt项目的缓存优化</h2><p>Qt项目每次运行Actions时，都是先通过<a href="https://github.com/jurplel/install-qt-action" target="_blank" rel="noopener">install-qt-action</a>模板，安装Qt，之后再获取代码，编译运行。</p><p>安装Qt这个步骤，可快可慢，涛哥在windows平台测试下来，平均要1分30秒左右。</p><p>加上cache后，平均只有25秒。</p><h3 id="无缓存的配置"><a href="#无缓存的配置" class="headerlink" title="无缓存的配置"></a>无缓存的配置</h3><p>先看一个Qt项目的编译配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Windows</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push,pull_request]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Build</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line"><span class="attr">    strategy:</span></span><br><span class="line"><span class="attr">      matrix:</span></span><br><span class="line"><span class="attr">        qt_ver:</span> <span class="string">[5.12.6]</span></span><br><span class="line"><span class="attr">        qt_target:</span> <span class="string">[desktop]</span></span><br><span class="line"><span class="attr">        qt_arch:</span> <span class="string">[win64_msvc2017_64,</span> <span class="string">win32_msvc2017]</span></span><br><span class="line"><span class="attr">        include:</span></span><br><span class="line"><span class="attr">          - qt_arch:</span> <span class="string">win64_msvc2017_64</span></span><br><span class="line"><span class="attr">            msvc_arch:</span> <span class="string">x64</span></span><br><span class="line"><span class="attr">          - qt_arch:</span> <span class="string">win32_msvc2017</span></span><br><span class="line"><span class="attr">            msvc_arch:</span> <span class="string">x86</span></span><br><span class="line">    <span class="comment"># 步骤</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line">      <span class="comment"># 安装Qt</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Install</span> <span class="string">Qt</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">jurplel/install-qt-action@v2.0.0</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_ver</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          target:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_target</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          arch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="comment"># 拉取代码</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          fetch-depth:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 编译msvc</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">build-msvc</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">cmd</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          vc_arch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.msvc_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%</span></span><br><span class="line"><span class="string">          qmake</span></span><br><span class="line"><span class="string">          nmake</span></span><br></pre></td></tr></table></figure><h3 id="加缓存"><a href="#加缓存" class="headerlink" title="加缓存"></a>加缓存</h3><p>缓存步骤，一般尽量写steps最前面。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 步骤</span></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="comment"># 缓存</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">cacheQt</span></span><br><span class="line"><span class="attr">    id:</span> <span class="string">WindowsCacheQt</span></span><br><span class="line"><span class="attr">    uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line"><span class="attr">    with:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">../Qt/$&#123;&#123;matrix.qt_ver&#125;&#125;/$&#123;&#123;matrix.qt_arch_install&#125;&#125;</span></span><br><span class="line"><span class="attr">      key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-Qt/$&#123;&#123;matrix.qt_ver&#125;&#125;/$&#123;&#123;matrix.qt_arch&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>install-qt-action有默认的Qt安装路径${RUNNER_WORKSPACE}，不过这个环境变量不一定能取到。</p><p>涛哥实际测试下来，以当前路径的上一级作为Qt路径即可。</p><h3 id="环境变量还原"><a href="#环境变量还原" class="headerlink" title="环境变量还原"></a>环境变量还原</h3><p>缓存只是把文件还原了，环境变量并没有还原，我们还需要手动还原环境变量。</p><p>install-qt-action这个模板增加了一个环境变量Qt5_Dir,值为Qt的安装路径,并把对应的bin添加到了Path。</p><p>我们要做的，就是在缓存恢复成功后，重新设置这两个变量，并去掉install-qt的步骤。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">setupQt</span></span><br><span class="line"><span class="attr">  if:</span> <span class="string">steps.WindowsCacheQt.outputs.cache-hit</span> <span class="string">==</span> <span class="string">'true'</span></span><br><span class="line"><span class="attr">  shell:</span> <span class="string">pwsh</span></span><br><span class="line"><span class="attr">  env:</span></span><br><span class="line"><span class="attr">    QtPath:</span> <span class="string">../Qt/$&#123;&#123;matrix.qt_ver&#125;&#125;/$&#123;&#123;matrix.qt_arch_install&#125;&#125;</span></span><br><span class="line"><span class="attr">  run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    $qt_Path=$&#123;env:QtPath&#125;</span></span><br><span class="line"><span class="string">    echo "::set-env name=Qt5_Dir::$qt_Path"</span></span><br><span class="line"><span class="string">    echo "::add-path::$qt_Path/bin"</span></span><br></pre></td></tr></table></figure><p>steps.WindowsCacheQt.outputs.cache-hit == ‘true’</p><p>是缓存模板的输出值，可以作为后续步骤的条件判断。</p><h3 id="最终配置"><a href="#最终配置" class="headerlink" title="最终配置"></a>最终配置</h3><p>写个伪配置，简单示例一下缓存流程</p><p>steps:</p><ul><li>cache</li><li>setupQt<br>if: cache-hit == ‘true’</li><li>installQt<br>if: cache-hit = ‘false’</li></ul><p>实际配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Windows</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="comment"># push代码时触发workflow</span></span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line">    <span class="comment"># 忽略README.md</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span></span><br><span class="line">  <span class="comment"># pull_request时触发workflow</span></span><br><span class="line"><span class="attr">  pull_request:</span></span><br><span class="line">    <span class="comment"># 忽略README.md</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Build</span></span><br><span class="line">    <span class="comment"># 运行平台， windows-latest目前是windows server 2019</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line"><span class="attr">    strategy:</span></span><br><span class="line">      <span class="comment"># 矩阵配置</span></span><br><span class="line"><span class="attr">      matrix:</span></span><br><span class="line"><span class="attr">        qt_ver:</span> <span class="string">[5.12.6]</span></span><br><span class="line"><span class="attr">        qt_target:</span> <span class="string">[desktop]</span></span><br><span class="line">        <span class="comment"># mingw用不了</span></span><br><span class="line">        <span class="comment"># qt_arch: [win64_msvc2017_64, win32_msvc2017, win32_mingw53,win32_mingw73]</span></span><br><span class="line"><span class="attr">        qt_arch:</span> <span class="string">[win64_msvc2017_64,</span> <span class="string">win32_msvc2017]</span></span><br><span class="line">        <span class="comment"># 额外设置msvc_arch</span></span><br><span class="line"><span class="attr">        include:</span></span><br><span class="line"><span class="attr">          - qt_arch:</span> <span class="string">win64_msvc2017_64</span></span><br><span class="line"><span class="attr">            msvc_arch:</span> <span class="string">x64</span></span><br><span class="line"><span class="attr">            qt_arch_install:</span> <span class="string">msvc2017_64</span></span><br><span class="line"><span class="attr">          - qt_arch:</span> <span class="string">win32_msvc2017</span></span><br><span class="line"><span class="attr">            msvc_arch:</span> <span class="string">x86</span></span><br><span class="line"><span class="attr">            qt_arch_install:</span> <span class="string">msvc2017</span></span><br><span class="line"><span class="attr">    env:</span></span><br><span class="line"><span class="attr">      targetName:</span> <span class="string">HelloActions-Qt.exe</span></span><br><span class="line">    <span class="comment"># 步骤</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">cacheQt</span></span><br><span class="line"><span class="attr">        id:</span> <span class="string">WindowsCacheQt</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">../Qt/$&#123;&#123;matrix.qt_ver&#125;&#125;/$&#123;&#123;matrix.qt_arch_install&#125;&#125;</span></span><br><span class="line"><span class="attr">          key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-Qt/$&#123;&#123;matrix.qt_ver&#125;&#125;/$&#123;&#123;matrix.qt_arch&#125;&#125;</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">setupQt</span></span><br><span class="line"><span class="attr">        if:</span> <span class="string">steps.WindowsCacheQt.outputs.cache-hit</span> <span class="string">==</span> <span class="string">'true'</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">pwsh</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          QtPath:</span> <span class="string">../Qt/$&#123;&#123;matrix.qt_ver&#125;&#125;/$&#123;&#123;matrix.qt_arch_install&#125;&#125;</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          $qt_Path=$&#123;env:QtPath&#125;</span></span><br><span class="line"><span class="string">          echo "::set-env name=Qt5_Dir::$qt_Path"</span></span><br><span class="line"><span class="string">          echo "::add-path::$qt_Path/bin"          </span></span><br><span class="line"><span class="string">      # 安装Qt</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">Install</span> <span class="string">Qt</span></span><br><span class="line"><span class="attr">        if:</span> <span class="string">steps.WindowsCacheQt.outputs.cache-hit</span> <span class="string">!=</span> <span class="string">'true'</span></span><br><span class="line">        <span class="comment"># 使用外部action。这个action专门用来安装Qt</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">jurplel/install-qt-action@v2.0.0</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line">          <span class="comment"># Version of Qt to install</span></span><br><span class="line"><span class="attr">          version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_ver</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Target platform for build</span></span><br><span class="line"><span class="attr">          target:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_target</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Architecture for Windows/Android</span></span><br><span class="line"><span class="attr">          arch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="comment"># 拉取代码</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          fetch-depth:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 编译msvc</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">build-msvc</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">cmd</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          vc_arch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.msvc_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%</span></span><br><span class="line"><span class="string">          qmake</span></span><br><span class="line"><span class="string">          nmake</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e7%ae%80%e4%bb%8b&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%8e%9f%e7%90%86&quot;&gt;原理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e7%bc%93%e5%ad%98actions%e6%a
      
    
    </summary>
    
      <category term="玩转Qt" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQt/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="持续集成(CI)" scheme="https://jaredtao.github.io/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-CI/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qt(11)-github-Actions自动化发行</title>
    <link href="https://jaredtao.github.io/2019/12/03/%E7%8E%A9%E8%BD%ACQt(11)-github-Actions%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8F%91%E8%A1%8C/"/>
    <id>https://jaredtao.github.io/2019/12/03/玩转Qt(11)-github-Actions自动化发行/</id>
    <published>2019-12-03T04:44:23.000Z</published>
    <updated>2020-12-25T10:09:38.793Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e7%ae%80%e4%bb%8b">简介</a></li><li><a href="#qt%e9%a1%b9%e7%9b%ae%e7%9a%84%e7%bc%96%e8%af%91%e6%b5%81%e7%a8%8b">Qt项目的编译流程</a></li><li><a href="#qt%e9%a1%b9%e7%9b%ae%e7%9a%84%e5%8f%91%e5%b8%83%e6%b5%81%e7%a8%8b">Qt项目的发布流程</a><ul><li><a href="#%e6%9f%a5%e6%89%be%e4%be%9d%e8%b5%96">查找依赖</a></li><li><a href="#%e5%88%b6%e4%bd%9c%e5%8c%85">制作包</a></li><li><a href="#%e4%b8%8a%e4%bc%a0">上传</a></li></ul></li><li><a href="#%e5%ae%9a%e5%88%b6%e5%8f%91%e5%b8%83%e6%b5%81%e7%a8%8b">定制发布流程</a><ul><li><a href="#%e5%8f%91%e5%b8%83%e6%97%b6%e6%9c%ba">发布时机</a></li><li><a href="#%e6%89%93%e5%8c%85%e6%ad%a5%e9%aa%a4">打包步骤</a></li><li><a href="#%e5%a4%9a%e5%b9%b3%e5%8f%b0%e5%8f%91%e5%b8%83">多平台发布</a></li><li><a href="#%e6%9c%80%e7%bb%88%e9%85%8d%e7%bd%ae">最终配置</a><ul><li><a href="#windows%e7%89%88%e7%9a%84%e6%9c%80%e7%bb%88%e9%85%8d%e7%bd%ae">windows版的最终配置</a></li><li><a href="#macos%e6%9c%80%e7%bb%88%e9%85%8d%e7%bd%ae">MacOS最终配置</a></li></ul></li><li><a href="#%e7%bb%93%e6%9e%9c%e5%92%8c%e4%bb%a3%e7%a0%81">结果和代码</a></li></ul></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在上一篇文章《github-Actions自动化编译》中，介绍了github-Actions的基本用法，</p><p>本文来介绍github-Actions的自动化发布。</p><h2 id="Qt项目的编译流程"><a href="#Qt项目的编译流程" class="headerlink" title="Qt项目的编译流程"></a>Qt项目的编译流程</h2><p>先来回顾一下,上一篇文章中的Qt项目的编译流程</p><ol><li><p>安装Qt环境</p><p>这一步用第三方Action模板：<a href="https://github.com/jurplel/install-qt-action" target="_blank" rel="noopener">install-qt-action</a></p></li><li><p>获取项目代码</p><p>这一步用Actions官方核心模板：<a href="https://github.com/actions/checkout" target="_blank" rel="noopener">actions/checkout</a></p></li><li><p>执行qmake、make</p><p> 这一步用自定义脚本，也可以换成cmake、qbs、gn、ninja等构建工具</p></li><li><p>执行test</p><p> 这一步可以引入单元测试、自动化UI测试等。暂无完善的方案，以后再说。</p></li><li><p>发布</p><p> 见下文。</p></li></ol><h2 id="Qt项目的发布流程"><a href="#Qt项目的发布流程" class="headerlink" title="Qt项目的发布流程"></a>Qt项目的发布流程</h2><p>Qt程序在编译完成后，发布的大致流程是：</p><p>1、 查找依赖库</p><p>2、制作压缩包或者安装包</p><p>3、上传压缩包或者安装包到网站、网盘。</p><h3 id="查找依赖"><a href="#查找依赖" class="headerlink" title="查找依赖"></a>查找依赖</h3><p>Qt官方提供的查找依赖库的命令行工具，包括：Windows平台的Windeployqt、MacOS平台的Macosdeployqt。</p><p>在这两个平台，只使用Qt库的情况下，这两个工具足够了。</p><h3 id="制作包"><a href="#制作包" class="headerlink" title="制作包"></a>制作包</h3><p>做压缩包比较简单。(我们常说的‘绿色软件’，就是一个压缩包)</p><p>一般安装7z、rar之类的压缩工具，用一条命令行就行了。</p><p>涛哥这里再说一下，github-Actions给所有平台都提供了PowerShell，而PowerShell内置了压缩命令Compress-Archive。</p><p>使用也很简单，只要路径和名字，例如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Compress-Archive</span> -Path .\MyFolder <span class="string">'MyRelease.zip'</span></span><br></pre></td></tr></table></figure><p>做安装包，Qt官方有功能很全面的安装包制作工具：QtInstallFrameWork, 稍微翻看一下文档或者例子即可。本文先不展开了。</p><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>github 本身提供了’Release’功能，每个仓库都有一个’Release’页面</p><p><img src="/images/QtActions2/1.png" alt=""></p><p>可以将打包好的压缩包或者安装包，直接上传上去, 供他人下载。</p><p><img src="/images/QtActions2/2.png" alt=""></p><p>github-Actions还提供了 创建’Release’、上传’Release’的模板</p><p><a href="https://github.com/actions/create-release" target="_blank" rel="noopener">actions/create-release</a></p><p><a href="https://github.com/actions/upload-release-asset" target="_blank" rel="noopener">actions/upload-release-asset</a></p><p>这两个模板的用法也很简单，在yml文件中直接use就行了，不赘述了。</p><h2 id="定制发布流程"><a href="#定制发布流程" class="headerlink" title="定制发布流程"></a>定制发布流程</h2><p>前面介绍了一些简单的理论，接下来通过实例，教大家github-Actions的使用。</p><p>以<a href="https://github.com/jaredtao/HelloActions-Qt" target="_blank" rel="noopener">HelloActions-Qt</a>项目为例，做一些定制。</p><p>需求如下：</p><p>1、每次提交代码，同时在Windows、MacOS、Ubuntu、Android、IOS五个平台编译</p><p>2、每次提交tag，在windows和MacOS平台制作软件包，并发布到同一个github-‘Release’</p><p>需求1已经实现了，着重讨论一下需求2：</p><h3 id="发布时机"><a href="#发布时机" class="headerlink" title="发布时机"></a>发布时机</h3><p>‘每次提交tag’限定了发布的时机。</p><p>涛哥尝试了一番，最终得到答案。</p><p>回顾一下, Windows平台的编译配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Windows</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push,pull_request]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Build</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line"><span class="attr">    strategy:</span></span><br><span class="line"><span class="attr">      matrix:</span></span><br><span class="line"><span class="attr">        qt_ver:</span> <span class="string">[5.12.6]</span></span><br><span class="line"><span class="attr">        qt_target:</span> <span class="string">[desktop]</span></span><br><span class="line"><span class="attr">        qt_arch:</span> <span class="string">[win64_msvc2017_64,</span> <span class="string">win32_msvc2017]</span></span><br><span class="line"><span class="attr">        include:</span></span><br><span class="line"><span class="attr">          - qt_arch:</span> <span class="string">win64_msvc2017_64</span></span><br><span class="line"><span class="attr">            msvc_arch:</span> <span class="string">x64</span></span><br><span class="line"><span class="attr">          - qt_arch:</span> <span class="string">win32_msvc2017</span></span><br><span class="line"><span class="attr">            msvc_arch:</span> <span class="string">x86</span></span><br><span class="line">    <span class="comment"># 步骤</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line">      <span class="comment"># 安装Qt</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Install</span> <span class="string">Qt</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">jurplel/install-qt-action@v2.0.0</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_ver</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          target:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_target</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          arch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="comment"># 拉取代码</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          fetch-depth:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 编译msvc</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">build-msvc</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">cmd</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          vc_arch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.msvc_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%</span></span><br><span class="line"><span class="string">          qmake</span></span><br><span class="line"><span class="string">          nmake</span></span><br></pre></td></tr></table></figure><p>steps中的每一个步骤，可以有触发条件。我们可以在这里指定，只有github的事件为tag时才执行:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="string">。。。</span></span><br><span class="line">  <span class="comment"># tag 打包</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">package</span></span><br><span class="line"><span class="attr">    if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      。。。</span></span><br></pre></td></tr></table></figure><h3 id="打包步骤"><a href="#打包步骤" class="headerlink" title="打包步骤"></a>打包步骤</h3><p>这里给出一个实际的打包步骤：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag 打包</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">package</span></span><br><span class="line"><span class="attr">  if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">  env:</span></span><br><span class="line"><span class="attr">    VCINSTALLDIR:</span> <span class="string">'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC'</span></span><br><span class="line"><span class="attr">    archiveName:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_ver</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">matrix.qt_target</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">matrix.qt_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    targetName:</span> <span class="string">HelloActions-Qt.exe</span></span><br><span class="line"><span class="attr">  shell:</span> <span class="string">pwsh</span></span><br><span class="line"><span class="attr">  run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    # 创建文件夹</span></span><br><span class="line"><span class="string">    New-Item -ItemType Directory $&#123;env:archiveName&#125;</span></span><br><span class="line"><span class="string">    # 拷贝exe</span></span><br><span class="line"><span class="string">    Copy-Item bin\$&#123;env:targetName&#125; $&#123;env:archiveName&#125;\</span></span><br><span class="line"><span class="string">    # 拷贝依赖</span></span><br><span class="line"><span class="string">    windeployqt --qmldir . $&#123;env:archiveName&#125;\$&#123;env:targetName&#125;</span></span><br><span class="line"><span class="string">    # 打包zip</span></span><br><span class="line"><span class="string">    Compress-Archive -Path $&#123;env:archiveName&#125; $&#123;env:archiveName&#125;'.zip'</span></span><br><span class="line"><span class="string">    # 记录环境变量packageName给后续step</span></span><br><span class="line"><span class="string">    $name = $&#123;env:archiveName&#125;</span></span><br><span class="line"><span class="string">    echo "::set-env name=packageName::$name"</span></span><br><span class="line"><span class="string">    # 打印环境变量packageName</span></span><br><span class="line"><span class="string">    Write-Host 'packageName:'$&#123;env:packageName&#125;</span></span><br></pre></td></tr></table></figure><p>做一些说明：</p><ul><li>vs运行时</li></ul><p>其中的VCINSTALLDIR环境变量，是给windeployqt用的。有了这个环境变量，windeployqt会去msvc的安装路径提取‘运行时安装程序’。</p><ul><li>记录包名称</li></ul><p>打包完以后，将包名设置为环境变量，后续的步骤就可以通过环境变量拿到包名字了。</p><p>普通的设置环境变量，在步骤执行完成后就失效了，</p><p>这里使用github-Actions的‘记录命令’set-env ，具体可以参考文档<a href="https://help.github.com/zh/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions" target="_blank" rel="noopener">github-Actions记录命令</a>         </p><p>文档说不要用双引号，应该都是针对linux的，我试出来的PowerShell用法如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span> = $&#123;env:archiveName&#125;</span><br><span class="line">echo <span class="string">"::set-env name=packageName::<span class="variable">$name</span>"</span></span><br></pre></td></tr></table></figure><p>先取环境变量到一个局部变量，再在‘记录命令’中引用局部变量。</p><h3 id="多平台发布"><a href="#多平台发布" class="headerlink" title="多平台发布"></a>多平台发布</h3><p>如果只有一个平台、一种配置，直接用那两个模板就能解决问题。</p><p>这是官方给的例子<a href="https://github.com/actions/upload-release-asset" target="_blank" rel="noopener">upload-release-asset</a>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line"><span class="attr">    uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Build</span> <span class="string">project</span> <span class="comment"># This would actually build your project, using zip for an example artifact</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      zip --junk-paths my-artifact README.md</span></span><br><span class="line"><span class="string"></span><span class="attr">  - name:</span> <span class="string">Create</span> <span class="string">Release</span></span><br><span class="line"><span class="attr">    id:</span> <span class="string">create_release</span></span><br><span class="line"><span class="attr">    uses:</span> <span class="string">actions/create-release@v1.0.0</span></span><br><span class="line"><span class="attr">    env:</span></span><br><span class="line"><span class="attr">      GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    with:</span></span><br><span class="line"><span class="attr">      tag_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">      release_name:</span> <span class="string">Release</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">      draft:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      prerelease:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Upload</span> <span class="string">Release</span> <span class="string">Asset</span></span><br><span class="line"><span class="attr">    id:</span> <span class="string">upload-release-asset</span> </span><br><span class="line"><span class="attr">    uses:</span> <span class="string">actions/upload-release-asset@v1.0.1</span></span><br><span class="line"><span class="attr">    env:</span></span><br><span class="line"><span class="attr">      GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    with:</span></span><br><span class="line"><span class="attr">      upload_url:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.create_release.outputs.upload_url</span> <span class="string">&#125;&#125;</span> <span class="comment"># This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps </span></span><br><span class="line"><span class="attr">      asset_path:</span> <span class="string">./my-artifact.zip</span></span><br><span class="line"><span class="attr">      asset_name:</span> <span class="string">my-artifact.zip</span></span><br><span class="line"><span class="attr">      asset_content_type:</span> <span class="string">application/zip</span></span><br></pre></td></tr></table></figure><p>在多平台 或者 多配置的情况下，同一个tag, 只有第一个执行create-release的任务可以成功，后续任务</p><p>再次执行create-release时，该tag下已经有了同名的‘Release’，所以会create失败。</p><p>这个问题折磨了涛哥好一阵子。找不到现成的解决方案，涛哥就自己实现了一种:</p><ol><li><p>先用github的REST API去判断该tag下有没有‘Release’:</p><p> 没有则执行create-release，并提取upload_url；</p><p> 有则提取upload_url。</p></li><li><p>最后执行upload-release-asset </p></li></ol><p>调用REST API，涛哥依旧使用了方便的PowerShell,</p><p>实际的配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag 查询github-Release</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">queryReleaseWin</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">queryReleaseWin</span></span><br><span class="line"><span class="attr">  if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">  shell:</span> <span class="string">pwsh</span></span><br><span class="line"><span class="attr">  env:</span></span><br><span class="line"><span class="attr">    githubFullName:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.repository.full_name</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    [string]$tag = $&#123;env:ref&#125;.Substring($&#123;env:ref&#125;.LastIndexOf('/') + 1)</span></span><br><span class="line"><span class="string">    [string]$url = 'https://api.github.com/repos/' + $&#123;env:githubFullName&#125; + '/releases/tags/' + $&#123;tag&#125;</span></span><br><span class="line"><span class="string">    $response=&#123;&#125;</span></span><br><span class="line"><span class="string">    try &#123;</span></span><br><span class="line"><span class="string">      $response = Invoke-RestMethod -Uri $url -Method Get</span></span><br><span class="line"><span class="string">    &#125; catch &#123;</span></span><br><span class="line"><span class="string">      Write-Host "StatusCode:" $_.Exception.Response.StatusCode.value__ </span></span><br><span class="line"><span class="string">      Write-Host "StatusDescription:" $_.Exception.Response.StatusDescription</span></span><br><span class="line"><span class="string">      # 没查到，输出</span></span><br><span class="line"><span class="string">      echo "::set-output name=needCreateRelease::true"  </span></span><br><span class="line"><span class="string">      return</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    [string]$latestUpUrl = $response.upload_url</span></span><br><span class="line"><span class="string">    Write-Host 'latestUpUrl:'$latestUpUrl</span></span><br><span class="line"><span class="string">    if ($latestUpUrl.Length -eq 0) &#123;</span></span><br><span class="line"><span class="string">      # 没查到，输出</span></span><br><span class="line"><span class="string">      echo "::set-output name=needCreateRelease::true"  </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"># tag 创建github-Release</span></span><br><span class="line"><span class="string"></span><span class="attr">- name:</span> <span class="string">createReleaseWin</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">createReleaseWin</span></span><br><span class="line"><span class="attr">  if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span> <span class="string">&amp;&amp;</span> <span class="string">steps.queryReleaseWin.outputs.needCreateRelease</span> <span class="string">==</span> <span class="string">'true'</span></span><br><span class="line"><span class="attr">  env:</span></span><br><span class="line"><span class="attr">    GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  uses:</span> <span class="string">actions/create-release@v1.0.0</span></span><br><span class="line"><span class="attr">  with:</span></span><br><span class="line"><span class="attr">    tag_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    release_name:</span> <span class="string">Release</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    body:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    draft:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    prerelease:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># tag 重定向upload_url到环境变量uploadUrl。</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">getLatestTagRelease</span></span><br><span class="line"><span class="attr">  if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">  shell:</span> <span class="string">pwsh</span></span><br><span class="line"><span class="attr">  env:</span></span><br><span class="line"><span class="attr">    githubFullName:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.repository.full_name</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    upUrl:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.createReleaseWin.outputs.upload_url</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    # upUrl不为空，导出就完事</span></span><br><span class="line"><span class="string">    if ($&#123;env:upUrl&#125;.Length -gt 0) &#123;</span></span><br><span class="line"><span class="string">        $v=$&#123;env:upUrl&#125;</span></span><br><span class="line"><span class="string">        echo "::set-env name=uploadUrl::$v"</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">    # upUrl为空则重新获取</span></span><br><span class="line"><span class="string">    [string]$tag = $&#123;env:ref&#125;.Substring($&#123;env:ref&#125;.LastIndexOf('/') + 1)</span></span><br><span class="line"><span class="string">    [string]$url = 'https://api.github.com/repos/' + $&#123;env:githubFullName&#125; + '/releases/tags/' + $&#123;tag&#125;</span></span><br><span class="line"><span class="string">    $response = Invoke-RestMethod -Uri $url -Method Get</span></span><br><span class="line"><span class="string">    [string]$latestUpUrl = $response.upload_url</span></span><br><span class="line"><span class="string">    Write-Host 'latestUpUrl:'$latestUpUrl</span></span><br><span class="line"><span class="string">    # 导出</span></span><br><span class="line"><span class="string">    echo "::set-env name=uploadUrl::$latestUpUrl"</span></span><br><span class="line"><span class="string">    Write-Host 'env uploadUrl:'$&#123;env:uploadUrl&#125;</span></span><br><span class="line"><span class="string"># tag 上传Release</span></span><br><span class="line"><span class="string"></span><span class="attr">- name:</span> <span class="string">uploadRelease</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">uploadRelease</span></span><br><span class="line"><span class="attr">  if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">  env:</span></span><br><span class="line"><span class="attr">    GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  uses:</span> <span class="string">actions/upload-release-asset@v1.0.1</span></span><br><span class="line"><span class="attr">  with:</span></span><br><span class="line"><span class="attr">    upload_url:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.uploadUrl</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    asset_path:</span> <span class="string">./$&#123;&#123;</span> <span class="string">env.packageName</span> <span class="string">&#125;&#125;.zip</span></span><br><span class="line"><span class="attr">    asset_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.packageName</span> <span class="string">&#125;&#125;.zip</span></span><br><span class="line"><span class="attr">    asset_content_type:</span> <span class="string">application/zip</span></span><br></pre></td></tr></table></figure><h3 id="最终配置"><a href="#最终配置" class="headerlink" title="最终配置"></a>最终配置</h3><h4 id="windows版的最终配置"><a href="#windows版的最终配置" class="headerlink" title="windows版的最终配置"></a>windows版的最终配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Windows</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="comment"># push代码时触发workflow</span></span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line">    <span class="comment"># 忽略README.md</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span></span><br><span class="line">  <span class="comment"># pull_request时触发workflow</span></span><br><span class="line"><span class="attr">  pull_request:</span></span><br><span class="line">    <span class="comment"># 忽略README.md</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Build</span></span><br><span class="line">    <span class="comment"># 运行平台， windows-latest目前是windows server 2019</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line"><span class="attr">    strategy:</span></span><br><span class="line">      <span class="comment"># 矩阵配置</span></span><br><span class="line"><span class="attr">      matrix:</span></span><br><span class="line"><span class="attr">        qt_ver:</span> <span class="string">[5.12.6]</span></span><br><span class="line"><span class="attr">        qt_target:</span> <span class="string">[desktop]</span></span><br><span class="line"><span class="attr">        qt_arch:</span> <span class="string">[win64_msvc2017_64,</span> <span class="string">win32_msvc2017]</span></span><br><span class="line">        <span class="comment"># 额外设置msvc_arch</span></span><br><span class="line"><span class="attr">        include:</span></span><br><span class="line"><span class="attr">          - qt_arch:</span> <span class="string">win64_msvc2017_64</span></span><br><span class="line"><span class="attr">            msvc_arch:</span> <span class="string">x64</span></span><br><span class="line"><span class="attr">            qt_arch_install:</span> <span class="string">msvc2017_64</span></span><br><span class="line"><span class="attr">          - qt_arch:</span> <span class="string">win32_msvc2017</span></span><br><span class="line"><span class="attr">            msvc_arch:</span> <span class="string">x86</span></span><br><span class="line"><span class="attr">            qt_arch_install:</span> <span class="string">msvc2017</span></span><br><span class="line"><span class="attr">    env:</span></span><br><span class="line"><span class="attr">      targetName:</span> <span class="string">HelloActions-Qt.exe</span></span><br><span class="line">    <span class="comment"># 步骤</span></span><br><span class="line"><span class="attr">    steps:</span>  </span><br><span class="line">      <span class="comment"># 安装Qt</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Install</span> <span class="string">Qt</span></span><br><span class="line">        <span class="comment"># 使用外部action。这个action专门用来安装Qt</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">jurplel/install-qt-action@v2.0.0</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line">          <span class="comment"># Version of Qt to install</span></span><br><span class="line"><span class="attr">          version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_ver</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Target platform for build</span></span><br><span class="line"><span class="attr">          target:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_target</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Architecture for Windows/Android</span></span><br><span class="line"><span class="attr">          arch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="comment"># 拉取代码</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          fetch-depth:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 编译msvc</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">build-msvc</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">cmd</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          vc_arch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.msvc_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%</span></span><br><span class="line"><span class="string">          qmake</span></span><br><span class="line"><span class="string">          nmake</span></span><br><span class="line"><span class="string">      # tag 打包</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">package</span></span><br><span class="line"><span class="attr">        if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          VCINSTALLDIR:</span> <span class="string">'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC'</span></span><br><span class="line"><span class="attr">          archiveName:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_ver</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">matrix.qt_target</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">matrix.qt_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">pwsh</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 创建文件夹</span></span><br><span class="line"><span class="string">          New-Item -ItemType Directory $&#123;env:archiveName&#125;</span></span><br><span class="line"><span class="string">          # 拷贝exe</span></span><br><span class="line"><span class="string">          Copy-Item bin\$&#123;env:targetName&#125; $&#123;env:archiveName&#125;\</span></span><br><span class="line"><span class="string">          # 拷贝依赖</span></span><br><span class="line"><span class="string">          windeployqt --qmldir . $&#123;env:archiveName&#125;\$&#123;env:targetName&#125;</span></span><br><span class="line"><span class="string">          # 打包zip</span></span><br><span class="line"><span class="string">          Compress-Archive -Path $&#123;env:archiveName&#125; $&#123;env:archiveName&#125;'.zip'</span></span><br><span class="line"><span class="string">          # 记录环境变量packageName给后续step</span></span><br><span class="line"><span class="string">          $name = $&#123;env:archiveName&#125;</span></span><br><span class="line"><span class="string">          echo "::set-env name=packageName::$name"</span></span><br><span class="line"><span class="string">          # 打印环境变量packageName</span></span><br><span class="line"><span class="string">          Write-Host 'packageName:'$&#123;env:packageName&#125;</span></span><br><span class="line"><span class="string">      # tag 查询github-Release</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">queryReleaseWin</span></span><br><span class="line"><span class="attr">        id:</span> <span class="string">queryReleaseWin</span></span><br><span class="line"><span class="attr">        if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">pwsh</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          githubFullName:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.repository.full_name</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          [string]$tag = $&#123;env:ref&#125;.Substring($&#123;env:ref&#125;.LastIndexOf('/') + 1)</span></span><br><span class="line"><span class="string">          [string]$url = 'https://api.github.com/repos/' + $&#123;env:githubFullName&#125; + '/releases/tags/' + $&#123;tag&#125;</span></span><br><span class="line"><span class="string">          $response=&#123;&#125;</span></span><br><span class="line"><span class="string">          try &#123;</span></span><br><span class="line"><span class="string">            $response = Invoke-RestMethod -Uri $url -Method Get</span></span><br><span class="line"><span class="string">          &#125; catch &#123;</span></span><br><span class="line"><span class="string">            Write-Host "StatusCode:" $_.Exception.Response.StatusCode.value__ </span></span><br><span class="line"><span class="string">            Write-Host "StatusDescription:" $_.Exception.Response.StatusDescription</span></span><br><span class="line"><span class="string">            # 没查到，输出</span></span><br><span class="line"><span class="string">            echo "::set-output name=needCreateRelease::true"  </span></span><br><span class="line"><span class="string">            return</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          [string]$latestUpUrl = $response.upload_url</span></span><br><span class="line"><span class="string">          Write-Host 'latestUpUrl:'$latestUpUrl</span></span><br><span class="line"><span class="string">          if ($latestUpUrl.Length -eq 0) &#123;</span></span><br><span class="line"><span class="string">            # 没查到，输出</span></span><br><span class="line"><span class="string">            echo "::set-output name=needCreateRelease::true"  </span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">      # tag 创建github-Release</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">createReleaseWin</span></span><br><span class="line"><span class="attr">        id:</span> <span class="string">createReleaseWin</span></span><br><span class="line"><span class="attr">        if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span> <span class="string">&amp;&amp;</span> <span class="string">steps.queryReleaseWin.outputs.needCreateRelease</span> <span class="string">==</span> <span class="string">'true'</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/create-release@v1.0.0</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          tag_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          release_name:</span> <span class="string">Release</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          body:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          draft:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">          prerelease:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 重定向upload_url到环境变量uploadUrl。</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">getLatestTagRelease</span></span><br><span class="line">        <span class="comment"># tag 上一步无论成功还是失败都执行</span></span><br><span class="line"><span class="attr">        if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">pwsh</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          githubFullName:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.repository.full_name</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          upUrl:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.createReleaseWin.outputs.upload_url</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # upUrl不为空，导出就完事</span></span><br><span class="line"><span class="string">          if ($&#123;env:upUrl&#125;.Length -gt 0) &#123;</span></span><br><span class="line"><span class="string">              $v=$&#123;env:upUrl&#125;</span></span><br><span class="line"><span class="string">              echo "::set-env name=uploadUrl::$v"</span></span><br><span class="line"><span class="string">              return</span></span><br><span class="line"><span class="string">          &#125; </span></span><br><span class="line"><span class="string">          [string]$tag = $&#123;env:ref&#125;.Substring($&#123;env:ref&#125;.LastIndexOf('/') + 1)</span></span><br><span class="line"><span class="string">          [string]$url = 'https://api.github.com/repos/' + $&#123;env:githubFullName&#125; + '/releases/tags/' + $&#123;tag&#125;</span></span><br><span class="line"><span class="string">          $response = Invoke-RestMethod -Uri $url -Method Get</span></span><br><span class="line"><span class="string">          [string]$latestUpUrl = $response.upload_url</span></span><br><span class="line"><span class="string">          Write-Host 'latestUpUrl:'$latestUpUrl</span></span><br><span class="line"><span class="string">          echo "::set-env name=uploadUrl::$latestUpUrl"</span></span><br><span class="line"><span class="string">          Write-Host 'env uploadUrl:'$&#123;env:uploadUrl&#125;</span></span><br><span class="line"><span class="string">      # tag 上传Release</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">uploadRelease</span></span><br><span class="line"><span class="attr">        id:</span> <span class="string">uploadRelease</span></span><br><span class="line"><span class="attr">        if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/upload-release-asset@v1.0.1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          upload_url:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.uploadUrl</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          asset_path:</span> <span class="string">./$&#123;&#123;</span> <span class="string">env.packageName</span> <span class="string">&#125;&#125;.zip</span></span><br><span class="line"><span class="attr">          asset_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.packageName</span> <span class="string">&#125;&#125;.zip</span></span><br><span class="line"><span class="attr">          asset_content_type:</span> <span class="string">application/zip</span></span><br></pre></td></tr></table></figure><h4 id="MacOS最终配置"><a href="#MacOS最终配置" class="headerlink" title="MacOS最终配置"></a>MacOS最终配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">MacOS</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span></span><br><span class="line"><span class="attr">  pull_request:</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Build</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    strategy:</span></span><br><span class="line"><span class="attr">      matrix:</span></span><br><span class="line"><span class="attr">        os:</span> <span class="string">[macos-latest]</span></span><br><span class="line"><span class="attr">        qt_ver:</span> <span class="string">[5.12.6]</span></span><br><span class="line"><span class="attr">        qt_arch:</span> <span class="string">[clang_64]</span></span><br><span class="line"><span class="attr">    env:</span></span><br><span class="line"><span class="attr">      targetName:</span> <span class="string">HelloActions-Qt</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Install</span> <span class="string">Qt</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">jurplel/install-qt-action@v2.0.0</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_ver</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          fetch-depth:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">build</span> <span class="string">macos</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          qmake</span></span><br><span class="line"><span class="string">          make</span></span><br><span class="line"><span class="string">      # tag 打包</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">package</span></span><br><span class="line"><span class="attr">        if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 拷贝依赖</span></span><br><span class="line"><span class="string">          macdeployqt bin/$&#123;targetName&#125;.app -qmldir=. -verbose=1 -dmg</span></span><br><span class="line"><span class="string">      # tag 查询github-Release</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">queryRelease</span></span><br><span class="line"><span class="attr">        id:</span> <span class="string">queryReleaseMacos</span></span><br><span class="line"><span class="attr">        if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">pwsh</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          githubFullName:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.repository.full_name</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          [string]$tag = $&#123;env:ref&#125;.Substring($&#123;env:ref&#125;.LastIndexOf('/') + 1)</span></span><br><span class="line"><span class="string">          [string]$url = 'https://api.github.com/repos/' + $&#123;env:githubFullName&#125; + '/releases/tags/' + $&#123;tag&#125;</span></span><br><span class="line"><span class="string">          $response=&#123;&#125;</span></span><br><span class="line"><span class="string">          try &#123;</span></span><br><span class="line"><span class="string">            $response = Invoke-RestMethod -Uri $url -Method Get</span></span><br><span class="line"><span class="string">          &#125; catch &#123;</span></span><br><span class="line"><span class="string">            Write-Host "StatusCode:" $_.Exception.Response.StatusCode.value__ </span></span><br><span class="line"><span class="string">            Write-Host "StatusDescription:" $_.Exception.Response.StatusDescription</span></span><br><span class="line"><span class="string">            # 没查到，输出</span></span><br><span class="line"><span class="string">            echo "::set-output name=needCreateRelease::true"  </span></span><br><span class="line"><span class="string">            return</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          [string]$latestUpUrl = $response.upload_url</span></span><br><span class="line"><span class="string">          Write-Host 'latestUpUrl:'$latestUpUrl</span></span><br><span class="line"><span class="string">          if ($latestUpUrl.Length -eq 0) &#123;</span></span><br><span class="line"><span class="string">            # 没查到，输出</span></span><br><span class="line"><span class="string">            echo "::set-output name=needCreateRelease::true"  </span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">      # tag 创建github-Release</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">createReleaseWin</span></span><br><span class="line"><span class="attr">        id:</span> <span class="string">createReleaseWin</span></span><br><span class="line"><span class="attr">        if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span> <span class="string">&amp;&amp;</span> <span class="string">steps.queryReleaseMacos.outputs.needCreateRelease</span> <span class="string">==</span> <span class="string">'true'</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/create-release@v1.0.0</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          tag_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          release_name:</span> <span class="string">Release</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          body:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          draft:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">          prerelease:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 重定向upload_url到环境变量uploadUrl。</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">getLatestTagRelease</span></span><br><span class="line">        <span class="comment"># tag 上一步无论成功还是失败都执行</span></span><br><span class="line"><span class="attr">        if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">pwsh</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          githubFullName:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.repository.full_name</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          upUrl:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.queryReleaseMacos.outputs.upload_url</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # upUrl不为空，导出就完事</span></span><br><span class="line"><span class="string">          if ($&#123;env:upUrl&#125;.Length -gt 0) &#123;</span></span><br><span class="line"><span class="string">              $v=$&#123;env:upUrl&#125;</span></span><br><span class="line"><span class="string">              echo "::set-env name=uploadUrl::$v"</span></span><br><span class="line"><span class="string">              return</span></span><br><span class="line"><span class="string">          &#125; </span></span><br><span class="line"><span class="string">          [string]$tag = $&#123;env:ref&#125;.Substring($&#123;env:ref&#125;.LastIndexOf('/') + 1)</span></span><br><span class="line"><span class="string">          [string]$url = 'https://api.github.com/repos/' + $&#123;env:githubFullName&#125; + '/releases/tags/' + $&#123;tag&#125;</span></span><br><span class="line"><span class="string">          $response = Invoke-RestMethod -Uri $url -Method Get</span></span><br><span class="line"><span class="string">          [string]$latestUpUrl = $response.upload_url</span></span><br><span class="line"><span class="string">          Write-Host 'latestUpUrl:'$latestUpUrl</span></span><br><span class="line"><span class="string">          echo "::set-env name=uploadUrl::$latestUpUrl"</span></span><br><span class="line"><span class="string">          Write-Host 'env uploadUrl:'$&#123;env:uploadUrl&#125;</span></span><br><span class="line"><span class="string">      # tag 上传Release</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">uploadRelease</span></span><br><span class="line"><span class="attr">        id:</span> <span class="string">uploadRelease</span></span><br><span class="line"><span class="attr">        if:</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/upload-release-asset@v1.0.1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          upload_url:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.uploadUrl</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          asset_path:</span> <span class="string">./bin/$&#123;&#123;</span> <span class="string">env.targetName</span> <span class="string">&#125;&#125;.dmg</span></span><br><span class="line"><span class="attr">          asset_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.targetName</span> <span class="string">&#125;&#125;.dmg</span></span><br><span class="line"><span class="attr">          asset_content_type:</span> <span class="string">application/applefile</span></span><br></pre></td></tr></table></figure><h3 id="结果和代码"><a href="#结果和代码" class="headerlink" title="结果和代码"></a>结果和代码</h3><p><img src="/images/QtActions2/2.png" alt=""></p><p>代码在github <a href="https://github.com/jaredtao/HelloActions-Qt" target="_blank" rel="noopener">HelloActions-Qt</a></p><p>另外在涛哥的Qml控件库TaoQuick，也使用了这一套配置</p><p> <a href="https://github.com/jaredtao/TaoQuick" target="_blank" rel="noopener">TaoQuick</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e7%ae%80%e4%bb%8b&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#qt%e9%a1%b9%e7%9b%ae%e7%9a%84%e7%bc%96%e8%af%91%e6%b5%81%e7%a8%8b&quot;&gt;Qt项目的编译流
      
    
    </summary>
    
      <category term="玩转Qt" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQt/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="持续集成(CI)" scheme="https://jaredtao.github.io/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-CI/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qt(10)-github-Actions自动化编译</title>
    <link href="https://jaredtao.github.io/2019/11/19/%E7%8E%A9%E8%BD%ACQt(10)-github-Actions%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BC%96%E8%AF%91/"/>
    <id>https://jaredtao.github.io/2019/11/19/玩转Qt(10)-github-Actions自动化编译/</id>
    <published>2019-11-19T04:44:23.000Z</published>
    <updated>2020-12-25T10:07:46.513Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#前言">前言</a></li><li><a href="#简介">简介</a></li><li><a href="#代码仓库">代码仓库</a></li><li><a href="#效果预览">效果预览</a></li><li><a href="#使用方式">使用方式</a></li><li><a href="#原理">原理</a><ul><li><a href="#actions官方文档">Actions官方文档</a></li><li><a href="#actions的默认环境">Actions的默认环境</a></li><li><a href="#actions语法">Actions语法</a></li><li><a href="#actions模板">Actions模板</a></li><li><a href="#qt项目的编译流程">Qt项目的编译流程</a></li><li><a href="#qt相关的actions模板">Qt相关的Actions模板</a><ul><li><a href="#install-qt-action">install-qt-action</a></li><li><a href="#action-setup-qt">action-setup-qt</a></li></ul></li></ul></li><li><a href="#扩展">扩展</a><ul><li><a href="#windows平台">Windows平台</a><ul><li><a href="#默认mingw不能用">默认mingw不能用</a></li><li><a href="#windows平台指定shell">Windows平台指定shell</a></li></ul></li><li><a href="#ubuntu平台">Ubuntu平台</a></li><li><a href="#macos平台">MacOS平台</a></li><li><a href="#android平台">Android平台</a></li><li><a href="#ios平台">IOS平台</a></li></ul></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>几个月前写过两篇持续集成的教程，当时使用的是travis和appveyor这两个第三方网址提供的服务。</p><p>由于配置比较复杂，劝退了很多同学……</p><p>2019年8月份，github正式上线了Actions功能，提供了十分强大的CI(持续集成)/CD(持续部署)服务，</p><p>使用非常简单、方便，再加上github的Marketplace(github的应用商店)有各路大神开源的Actions模板, 完全可以抛弃那些落后的第三方服务了。</p><p>注：Actions也能在私有仓库上用(微软良心)。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这回涛哥将给大家提供一个简易的Qt项目的Action模板，让每一个有追求的Qter，都能轻松地用上强大的CI/CD功能。</p><p>(本文先说自动化编译，自动化发布下次说。)</p><h2 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h2><p>我创建了一个新的代码仓库，地址在这:</p><p><a href="https://github.com/jaredtao/HelloActions-Qt" target="_blank" rel="noopener">https://github.com/jaredtao/HelloActions-Qt</a></p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>先来看看效果吧</p><p>这是github的Actions页面</p><p><img src="/images/QtActions/1.png" alt=""></p><p>图中可以看到，最后一次提交的代码，在Windows、Ubuntu、MacOS、Android、IOS五个平台都编译通过了(通过显示绿色的对勾✔，未通过显示红色的叉❌)。</p><p>涛哥是个徽章爱好者，把这些徽章都链接进了README文件中。别人在预览代码仓库的时候，很容易就能看到仓库的编译状态。<br><img src="/images/QtActions/2.png" alt=""></p><p>当然，在commit页面，还可以详细查看每一次commit的代码，是否都编译通过<br><img src="/images/QtActions/3.png" alt=""></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>(这里假设各位读者会使用基本的git、github操作，不会的请去搜索相关教程)</p><ol><li>下载涛哥的仓库HelloActions-Qt</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jaredtao/HelloActions-Qt</span><br></pre></td></tr></table></figure><ol start="2"><li><p>拷贝文件夹’.github’到你的代码仓库根目录</p></li><li><p>在你的仓库中commit并添加.github文件夹中的文件</p></li><li><p>push你的仓库到github</p></li></ol><p>push完就可以了，到你的github相应仓库页面-Actions子页面查看状态吧。</p><p>没错，复制、粘贴，就这么简单。</p><p>.github/workflows文件夹中包括写好的5个模板：</p><p><img src="/images/QtActions/4.png" alt=""></p><p>你也可以根据你的需要，只选择你需要的。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>授人以鱼，不如授人以渔</p><p>这里再来介绍一些基本的原理。</p><h3 id="Actions官方文档"><a href="#Actions官方文档" class="headerlink" title="Actions官方文档"></a>Actions官方文档</h3><p>可以参考 <a href="https://help.github.com/cn/actions/automating-your-workflow-with-github-actions" target="_blank" rel="noopener">github Actions官方文档</a></p><p>中文文档目前翻译不全面，建议优先看英文的。</p><h3 id="Actions的默认环境"><a href="#Actions的默认环境" class="headerlink" title="Actions的默认环境"></a>Actions的默认环境</h3><p>github-Actions 主要提供了windows server 2019、macos 10.15、ubuntu 18.04三个平台的docker环境，</p><p>并预装了大量开发者常用的软件,比如Java SDK、Android SDK、VisualStudio、python、golang、nodejs等，</p><p>可以在文档<a href="https://help.github.com/cn/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners" target="_blank" rel="noopener">github Actions默认环境及预装软件</a> 中看到详细的信息。</p><h3 id="Actions语法"><a href="#Actions语法" class="headerlink" title="Actions语法"></a>Actions语法</h3><p>github-Actions和大部分docker环境一样，使用yaml/yml格式的配置文件。</p><p>同时github-Actions还提供了一些便利的功能、函数，可以参考</p><p><a href="https://help.github.com/cn/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions" target="_blank" rel="noopener">github Actions配置文件语法</a></p><p>更多细节请大家参考文档，这里就不赘述了。</p><h3 id="Actions模板"><a href="#Actions模板" class="headerlink" title="Actions模板"></a>Actions模板</h3><p>每个github仓库，都有一个Actions页面，在这里可以创建、管理Actions</p><p><img src="/images/QtActions/5.png" alt=""></p><p>一般使用nodejs、python、golang等环境的项目，github提供了现成的Actions模板，可以</p><p>直接在Actions创建页面或者Marketplace(github的应用商店)进行搜索、引用。</p><p><img src="/images/QtActions/6.png" alt=""></p><p>有闲暇的开发者，也可以开发自己的Actions并提交到github商店，甚至可以赚点零花钱哦。</p><p>(Actions开发使用TypeScript)</p><h3 id="Qt项目的编译流程"><a href="#Qt项目的编译流程" class="headerlink" title="Qt项目的编译流程"></a>Qt项目的编译流程</h3><p>简单总结一下Qt项目的编译流程</p><ol><li><p>安装Qt环境</p><p>这一步用下文的Action模板：install-qt-action</p></li><li><p>获取项目代码</p><p>这一步用Actions官方核心模板：actions/checkout@v1</p></li><li><p>执行qmake、make</p><p> 这一步用自定义脚本，可以换成qbs、cmake、gn、ninja等构建工具</p></li><li><p>执行test</p><p> 这一步可以引入单元测试、自动化UI测试等。以后再说。</p></li><li><p>执行deployment</p><p> 等我下一篇文章</p></li></ol><h3 id="Qt相关的Actions模板"><a href="#Qt相关的Actions模板" class="headerlink" title="Qt相关的Actions模板"></a>Qt相关的Actions模板</h3><p><img src="/images/QtActions/7.png" alt=""></p><h4 id="install-qt-action"><a href="#install-qt-action" class="headerlink" title="install-qt-action"></a>install-qt-action</h4><p>Qt项目暂时没有公开、完整的Actions模板,不过有一个安装Qt的Actions，解决了在不同平台安装不同版本Qt的问题。</p><p><a href="https://github.com/marketplace/actions/install-qt" target="_blank" rel="noopener">install-qt-action</a></p><p>github的Actions有一个非常强大的功能，就是引用外部模板。</p><p>比如要引入这个install-qt-Actions模板，只要在配置文件中添加两行即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Install</span> <span class="string">Qt</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">jurplel/install-qt-action@v2</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>Qt的安装路径、版本、目标平台、目标架构都有默认配置，当然你也可以手动配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Install</span> <span class="string">Qt</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">jurplel/install-qt-action@v2</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line">          <span class="comment"># 安装目录,默认当前路径</span></span><br><span class="line">          <span class="comment">#dir: # optional</span></span><br><span class="line">          <span class="comment"># 版本,默认最新的LTS(5.12.6)</span></span><br><span class="line"><span class="attr">          version:</span> <span class="number">5.12</span><span class="number">.6</span></span><br><span class="line">          <span class="comment"># 编译平台。一般不修改。</span></span><br><span class="line">          <span class="comment">#host: # optional</span></span><br><span class="line">          <span class="comment"># 目标平台。默认desktop，可选android、ios</span></span><br><span class="line"><span class="attr">          target:</span> <span class="string">desktop</span></span><br><span class="line">          <span class="comment"># 架构</span></span><br><span class="line"><span class="attr">          arch:</span> <span class="string">win64_msvc2017_64</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>这个Actions模板的实现，是按照Actions的工作原理（TypeScript），调用另一个python仓库<a href="https://github.com/miurahr/aqtinstall" target="_blank" rel="noopener">aqtinstall</a>,</p><p>把配置参数传递过去，由该库完成Qt的安装。</p><p>aqtinstall由一位日本的程序员使用python开发，直接访问Qt官方的发布仓库</p><p><a href="http://download.qt.io/online/qtsdkrepository/" target="_blank" rel="noopener">http://download.qt.io/online/qtsdkrepository/</a> , 下载指定平台的各模块压缩包，并解压到指定目录。</p><p>直接绕过了我们平常使用的Qt安装器。</p><p>aqtinstall没有实现‘只安装指定模块’，默认全安装。希望后续能做支持，毕竟Qt全安装太大了。</p><h4 id="action-setup-qt"><a href="#action-setup-qt" class="headerlink" title="action-setup-qt"></a>action-setup-qt</h4><p>涛哥还发现一个开源的action，并没有进商店，功能是适配所有平台的Qt环境变量</p><p><a href="https://github.com/Skycoder42/action-setup-qt" target="_blank" rel="noopener">https://github.com/Skycoder42/action-setup-qt</a></p><p>可以在该作者的’Json序列化库’中，看到实际应用</p><p><a href="https://github.com/Skycoder42/QtJsonSerializer" target="_blank" rel="noopener">https://github.com/Skycoder42/QtJsonSerializer</a></p><p>目前是固定在Qt5.13.2版本，包含winrt、wasm等所有平台。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>接下来，说一下涛哥提供的模板，对各平台的配置。</p><p>以方便那些，需要对模板做修改的同学。</p><h3 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h3><p>涛哥在这个配置文件中，写了一些注释。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Windows</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="comment"># push代码时触发workflow</span></span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line">    <span class="comment"># 忽略README.md</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span></span><br><span class="line">  <span class="comment"># pull_request时触发workflow</span></span><br><span class="line"><span class="attr">  pull_request:</span></span><br><span class="line">    <span class="comment"># 忽略README.md</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Build</span></span><br><span class="line">    <span class="comment"># 运行平台， windows-latest目前是windows server 2019</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line"><span class="attr">    strategy:</span></span><br><span class="line">      <span class="comment"># 矩阵配置</span></span><br><span class="line"><span class="attr">      matrix:</span></span><br><span class="line"><span class="attr">        qt_ver:</span> <span class="string">[5.9.8,5.12.6]</span></span><br><span class="line"><span class="attr">        qt_target:</span> <span class="string">[desktop]</span></span><br><span class="line">        <span class="comment"># mingw用不了</span></span><br><span class="line">        <span class="comment"># qt_arch: [win64_msvc2017_64, win32_msvc2017, win32_mingw53,win32_mingw73]</span></span><br><span class="line"><span class="attr">        qt_arch:</span> <span class="string">[win64_msvc2017_64,</span> <span class="string">win32_msvc2017]</span></span><br><span class="line">        <span class="comment"># 从矩阵中除外的配置</span></span><br><span class="line"><span class="attr">        exclude:</span> </span><br><span class="line">          <span class="comment"># 不存在5.9.8-win32_msvc2017的版本</span></span><br><span class="line"><span class="attr">          - qt_ver:</span> <span class="number">5.9</span><span class="number">.8</span></span><br><span class="line"><span class="attr">            qt_arch:</span> <span class="string">win32_msvc2017</span></span><br><span class="line">          <span class="comment"># mingw用不了</span></span><br><span class="line">          <span class="comment"># - qt_ver: 5.9.8</span></span><br><span class="line">          <span class="comment">#   qt_arch: win32_mingw73</span></span><br><span class="line">          <span class="comment"># - qt_ver: 5.12.6</span></span><br><span class="line">          <span class="comment">#   qt_arch: win32_mingw53</span></span><br><span class="line">        <span class="comment"># 额外设置msvc_arch</span></span><br><span class="line"><span class="attr">        include:</span></span><br><span class="line"><span class="attr">          - qt_arch:</span> <span class="string">win64_msvc2017_64</span></span><br><span class="line"><span class="attr">            msvc_arch:</span> <span class="string">x64</span></span><br><span class="line"><span class="attr">          - qt_arch:</span> <span class="string">win32_msvc2017</span></span><br><span class="line"><span class="attr">            msvc_arch:</span> <span class="string">x86</span></span><br><span class="line">    <span class="comment"># 步骤</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line">      <span class="comment"># 安装Qt</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Install</span> <span class="string">Qt</span></span><br><span class="line">        <span class="comment"># 使用外部action。这个action专门用来安装Qt</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">jurplel/install-qt-action@v2.0.0</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line">          <span class="comment"># Version of Qt to install</span></span><br><span class="line"><span class="attr">          version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_ver</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Target platform for build</span></span><br><span class="line"><span class="attr">          target:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_target</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Architecture for Windows/Android</span></span><br><span class="line"><span class="attr">          arch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="comment"># 拉取代码</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          fetch-depth:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 编译msvc</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">build-msvc</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">cmd</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          vc_arch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.msvc_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%</span></span><br><span class="line"><span class="string">          qmake</span></span><br><span class="line"><span class="string">          nmake</span></span><br></pre></td></tr></table></figure><p>大部分配置都是显而易见的，这里对一些特殊情况做一些说明吧。</p><h4 id="默认mingw不能用"><a href="#默认mingw不能用" class="headerlink" title="默认mingw不能用"></a>默认mingw不能用</h4><p>windows平台优先推荐用msvc编译，不过有些情况不得不用mingw。</p><p>github-Actions提供的Windows Server 2019环境，预装Mingw为8.1.0，版本太高了。</p><p>Qt5.9需要的mingw版本是5.3，而5.12则需要7.3，涛哥试过简单的HelloWorld程序，都会报链接失败。</p><p>所以需要使用MinGW的同学，需要自己安装了。</p><h4 id="Windows平台指定shell"><a href="#Windows平台指定shell" class="headerlink" title="Windows平台指定shell"></a>Windows平台指定shell</h4><p>github-Actions在Windows平台默认的shell是PowerShell，其它平台是bash。</p><p>使用msvc命令行编译项目时，一般要先调用’vcvarsxxx.bat’脚本来设置环境变量。</p><p>Powershell虽然强大，却不太方便直接调用这个bat。要么安装Powershell扩展Pcsx，要么</p><p>用一些取巧的方式：</p><p><a href="https://stackoverflow.com/questions/2124753/how-can-i-use-powershell-with-the-visual-studio-command-prompt" target="_blank" rel="noopener">https://stackoverflow.com/questions/2124753/how-can-i-use-powershell-with-the-visual-studio-command-prompt</a></p><p>github-Actions当然也可以直接指定使用cmd。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line">      <span class="comment"># 编译msvc</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">build-msvc</span></span><br><span class="line"><span class="attr">        shell:</span> <span class="string">cmd</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          vc_arch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.msvc_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%</span></span><br><span class="line"><span class="string">          qmake</span></span><br><span class="line"><span class="string">          nmake</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><h3 id="Ubuntu平台"><a href="#Ubuntu平台" class="headerlink" title="Ubuntu平台"></a>Ubuntu平台</h3><p>Ubuntu 平台看配置吧。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Ubuntu</span></span><br><span class="line"><span class="comment"># Qt官方没有linux平台的x86包</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span></span><br><span class="line"><span class="attr">  pull_request:</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Build</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    strategy:</span></span><br><span class="line"><span class="attr">      matrix:</span></span><br><span class="line"><span class="attr">        os:</span> <span class="string">[ubuntu-16.04,ubuntu-18.04]</span></span><br><span class="line"><span class="attr">        qt_ver:</span> <span class="string">[5.9.8,5.12.6]</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Install</span> <span class="string">Qt</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">jurplel/install-qt-action@v2.0.0</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_ver</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">ubuntu</span> <span class="string">install</span> <span class="string">GL</span> <span class="string">library</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="bullet">-y</span> <span class="string">libglew-dev</span> <span class="string">libglfw3-dev</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          fetch-depth:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">build</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          qmake</span></span><br><span class="line"><span class="string">          make</span></span><br></pre></td></tr></table></figure><h3 id="MacOS平台"><a href="#MacOS平台" class="headerlink" title="MacOS平台"></a>MacOS平台</h3><p>MacOS平台和Ubuntu差别不大</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># macos.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">MacOS</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span></span><br><span class="line"><span class="attr">  pull_request:</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Build</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    strategy:</span></span><br><span class="line"><span class="attr">      matrix:</span></span><br><span class="line"><span class="attr">        os:</span> <span class="string">[macos-latest]</span></span><br><span class="line"><span class="attr">        qt_ver:</span> <span class="string">[5.9.8,5.12.6]</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Install</span> <span class="string">Qt</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">jurplel/install-qt-action@v2.0.0</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_ver</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          fetch-depth:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">build</span> <span class="string">macos</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          qmake</span></span><br><span class="line"><span class="string">          make</span></span><br></pre></td></tr></table></figure><h3 id="Android平台"><a href="#Android平台" class="headerlink" title="Android平台"></a>Android平台</h3><p>Android使用ubuntu编译，Windows那个ndk似乎没装，未尝试。</p><p>如果只使用Qt5.12.6，默认的配置可以直接用，编译前设置环境变量 ANDROID_SDK_ROOT</p><p>和ANDROID_NDK_ROOT就可以了。</p><p>Qt5.9.8要指定低版本的NDK、SDK才行，这里涛哥没有进一步尝试。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># android.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Android</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span>      </span><br><span class="line"><span class="attr">  pull_request:</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'LICENSE'</span>      </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Build</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    strategy:</span></span><br><span class="line"><span class="attr">      matrix:</span></span><br><span class="line"><span class="attr">        os:</span> <span class="string">[ubuntu-latest]</span></span><br><span class="line">        <span class="comment"># 5.9.8 版本低，需要额外设置工具链。这里暂不支持。</span></span><br><span class="line"><span class="attr">        qt_ver:</span> <span class="string">[5.12.6]</span></span><br><span class="line"><span class="attr">        qt_target:</span> <span class="string">[android]</span></span><br><span class="line">        <span class="comment"># android_arm64_v8a 暂时不支持. install-qt-action 依赖的aqtinstall版本为0.5*,需要升级</span></span><br><span class="line">        <span class="comment"># qt_arch: [android_x86,android_armv7,android_arm64_v8a]</span></span><br><span class="line"><span class="attr">        qt_arch:</span> <span class="string">[android_x86,android_armv7]</span></span><br><span class="line">        <span class="comment"># exclude:</span></span><br><span class="line">        <span class="comment">#   - qt_ver: 5.9.8</span></span><br><span class="line">        <span class="comment">#     qt_arch: android_arm64_v8a</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Install</span> <span class="string">Qt</span></span><br><span class="line">        <span class="comment"># if: steps.cacheqt.outputs.cache-hit != 'true'</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">jurplel/install-qt-action@v2.0.0</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line">          <span class="comment"># Version of Qt to install</span></span><br><span class="line"><span class="attr">          version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_ver</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Target platform for build</span></span><br><span class="line"><span class="attr">          target:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_target</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Architecture for Windows/Android</span></span><br><span class="line"><span class="attr">          arch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_arch</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          fetch-depth:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">build</span> <span class="string">android</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          export ANDROID_SDK_ROOT=$ANDROID_HOME</span></span><br><span class="line"><span class="string">          export ANDROID_NDK_ROOT=$ANDROID_HOME/ndk-bundle</span></span><br><span class="line"><span class="string">          qmake</span></span><br><span class="line"><span class="string">          make</span></span><br></pre></td></tr></table></figure><h3 id="IOS平台"><a href="#IOS平台" class="headerlink" title="IOS平台"></a>IOS平台</h3><p>ios只能使用MacOS编译。</p><p>qmake的时候要指定平台、release模式等。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ios.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">IOS</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="attr">  pull_request:</span></span><br><span class="line"><span class="attr">    paths-ignore:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'README.md'</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Build</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    strategy:</span></span><br><span class="line"><span class="attr">      matrix:</span></span><br><span class="line"><span class="attr">        os:</span> <span class="string">[macos-latest]</span></span><br><span class="line"><span class="attr">        qt_ver:</span> <span class="string">[5.12.6]</span></span><br><span class="line"><span class="attr">        qt_target:</span> <span class="string">[ios]</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Install</span> <span class="string">Qt</span></span><br><span class="line">        <span class="comment"># if: steps.cacheqt.outputs.cache-hit != 'true'</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">jurplel/install-qt-action@v2.0.0</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line">          <span class="comment"># Version of Qt to install</span></span><br><span class="line"><span class="attr">          version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_ver</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Target platform for build</span></span><br><span class="line"><span class="attr">          target:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.qt_target</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          fetch-depth:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">build</span> <span class="string">ios</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          qmake -r -spec macx-ios-clang CONFIG+=release CONFIG+=iphoneos</span></span><br><span class="line"><span class="string">          make</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#简介&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#代码仓库&quot;&gt;代码仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#效果预览&quot;&gt;效果预览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a 
      
    
    </summary>
    
      <category term="玩转Qt" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQt/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="持续集成(CI)" scheme="https://jaredtao.github.io/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-CI/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qt(9)-程序发布指南</title>
    <link href="https://jaredtao.github.io/2019/09/12/%E7%8E%A9%E8%BD%ACQt(9)-%E7%A8%8B%E5%BA%8F%E5%8F%91%E5%B8%83%E6%8C%87%E5%8D%97/"/>
    <id>https://jaredtao.github.io/2019/09/12/玩转Qt(9)-程序发布指南/</id>
    <published>2019-09-12T10:44:23.000Z</published>
    <updated>2020-11-10T04:11:32.862Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e7%ae%80%e4%bb%8b">简介</a></li><li><a href="#%e8%83%8c%e6%99%af">背景</a></li><li><a href="#qt%e7%9a%84%e5%ae%89%e8%a3%85">Qt的安装</a></li><li><a href="#qt%e7%9a%84%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84">Qt的目录结构</a><ul><li><a href="#qt%e5%ae%89%e8%a3%85%e8%b7%af%e5%be%84">Qt安装路径</a></li><li><a href="#qt%e6%a0%b8%e5%bf%83%e8%b7%af%e5%be%84">Qt核心路径</a></li></ul></li><li><a href="#hellodeploy">HelloDeploy</a></li><li><a href="#window%e7%bc%96%e8%af%91%e5%92%8c%e5%8f%91%e5%b8%83">Window编译和发布</a><ul><li><a href="#window-%e7%bc%96%e8%af%91">Window 编译</a></li><li><a href="#window-%e5%8f%91%e5%b8%83">Window 发布</a></li><li><a href="#vs%e8%bf%90%e8%a1%8c%e6%97%b6%e5%ba%93">VS运行时库</a></li><li><a href="#%e5%b8%b8%e8%a7%81%e7%9a%84%e9%94%99%e8%af%af%e5%a4%84%e7%90%86">常见的错误处理</a><ul><li><a href="#%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f%e6%97%a0%e6%b3%95%e6%ad%a3%e5%b8%b8%e5%90%af%e5%8a%a8">应用程序无法正常启动</a></li><li><a href="#%e5%90%af%e5%8a%a8%e5%a4%b1%e8%b4%a5---no-qt-platform-plugin">启动失败 - no Qt platform plugin</a></li><li><a href="#opengl-context-%e5%88%9b%e5%bb%ba%e5%a4%b1%e8%b4%a5">OpenGL Context 创建失败</a></li></ul></li><li><a href="#%e6%95%b4%e7%90%86">整理</a></li><li><a href="#%e7%ae%80%e5%8d%95%e8%a3%81%e5%89%aa">简单裁剪</a><ul><li><a href="#%e5%88%a0%e5%87%8fdll">删减dll</a></li><li><a href="#%e5%88%a0%e5%87%8fplugins">删减plugins</a></li><li><a href="#%e5%88%a0%e5%87%8fqml">删减qml</a></li></ul></li></ul></li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这次讨论发布Qt应用程序的知识点。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>有很多人向涛哥询问，Qt程序发布的相关问题，网络上虽然可以搜到一大堆教程，但是可靠的比较少。</p><p>所以这次尽我所能，全面、详细地整理一些Qt程序发布的知识点，希望能帮助到更多人。</p><p>对老手来说，很多坑都踩过了，无非就是把正确的dll放在正确的路径。</p><p>对新手来说，细节上能多说几句，都将是莫大的帮助，少走弯路，节省几个小时、甚至几天都是有可能的。</p><p>如果有疏漏、错误，也欢迎大家补充、指正。</p><h1 id="Qt的安装"><a href="#Qt的安装" class="headerlink" title="Qt的安装"></a>Qt的安装</h1><p>Qt官网下载地址在这： <a href="http://download.qt.io/official_releases" target="_blank" rel="noopener">http://download.qt.io/official_releases</a></p><p>离线安装包 或者 在线安装包 都行。</p><p>关于Qt版本的选择，涛哥建议：</p><pre><code>体验新特性，就用最新版本；项目开发，用长期支持版(LTS)的最后一个修正版本，稳定、bug最少。</code></pre><p>可以在Qt官方wiki上查看相关信息 <a href="https://wiki.qt.io/Main" target="_blank" rel="noopener">https://wiki.qt.io/Main</a></p><p>目前为止(2019/9/2)，最新版为5.13.0，LTS版本有5.9 和 5.12， 而5.9最后一个修正版本是5.9.8， 5.12则是到5.12.4</p><p><img src="/images/QtDeployment/01.png" alt="预览"></p><p>例如上图是5.9.8的离线安装包，提供了windows、mac以及linux三种系统的可执行程序。</p><p>其中windows的安装程序”qt-opensource-windoiws-x86-5.9.8.exe”, 大小有2.4G，里面</p><p>包含了msvc_x86、msvc_x64、mingw、Android等多个版本的Qt工具链。在下载完成，安装</p><p>过程中可以分别勾选。其它版本也是类似的。</p><p>如何安装Qt，就不细说了，搞不定的去参考入门级教程吧…</p><h1 id="Qt的目录结构"><a href="#Qt的目录结构" class="headerlink" title="Qt的目录结构"></a>Qt的目录结构</h1><p>这里假设大家都装好了Qt，先来了解一下Qt的安装路径都有哪些东西。</p><p>涛哥用的是Windows 10系统，安装的Qt版本是5.12.4，以此为例来说明，其它系统和版本以实际为准。</p><h2 id="Qt安装路径"><a href="#Qt安装路径" class="headerlink" title="Qt安装路径"></a>Qt安装路径</h2><p>涛哥安装在了D:\Qt\Online 路径下, 如图:</p><p><img src="/images/QtDeployment/QtStruct.png" alt="预览"></p><p>其中“vcredist”文件夹包含了msvc2015 和 msvc2017的运行时库安装程序(后面会说怎么用,不是msvc编译器不需要)</p><p><img src="/images/QtDeployment/2.png" alt="预览"></p><p>“Tools”文件夹，包括QtCreator、OpenSSL库(可选)以及两种版本MinGW(可选)。</p><p><img src="/images/QtDeployment/3.png" alt="预览"></p><p>(图中还有Qt3DStudio,可忽略)</p><p>“5.12.4”文件夹，是Qt的核心路径, 里面包含多个版本的Qt工具链、头文件、动态链接库等</p><p><img src="/images/QtDeployment/1.png" alt="预览"></p><p>这里涛哥安装了msvc2017、msvc2017_64、mingw73_64以及android_x86.</p><p>注意msvc2017是x86架构的Qt库，msvc2017_64则是x64架构的。</p><p>如果有msvc2013、msvc2015也同理。</p><h2 id="Qt核心路径"><a href="#Qt核心路径" class="headerlink" title="Qt核心路径"></a>Qt核心路径</h2><p>接下来看一下重点，Qt的核心路径， 以msvc2017_64文件夹为例</p><p><img src="/images/QtDeployment/4.png" alt="预览"></p><p>bin文件夹包含了Qt提供的各种工具exe程序，以及动态链接库的dll</p><p>其中工具包括qmake.exe 和 windeployqt.exe，windeployqt.exe是我们今天主要讨论的工具。</p><p>动态链接库全部是两份dll，比如Qt5Cored.dll和Qt5Core.dll，文件名末尾带’d’表示debug版本的，另一个不带’d’的是release版本。</p><p><img src="/images/QtDeployment/5.png" alt="预览"></p><p>debug版本和release版本的主要区别：debug没有开编译器优化、携带了调试信息，release开了编译器优化O2,去掉了多余的信息</p><p>(图中还有pdb文件，是涛哥单独安装的，用来调试Qt源码，可以忽略)</p><p>和bin同级的，还有plugins文件夹，包含一些Qt用到的插件</p><p><img src="/images/QtDeployment/6.png" alt="预览"></p><p>比如imageformats文件夹中提供了jepg、gif、webp等图片格式的功能支持的插件，platforms文件夹则提供了平台插件，特别是</p><p>qwindows.dll这一个，在windows平台是必不可少的。</p><p>和bin同级的，另外一个文件夹是’qml’文件夹，包含Qml的各种功能模块。</p><p>和bin同级的其它文件夹，resources是WebEngine模块专用的，translations提供了</p><p>Qt内置的翻译文件，剩下的和发布无关，就不多说了。</p><h1 id="HelloDeploy"><a href="#HelloDeploy" class="headerlink" title="HelloDeploy"></a>HelloDeploy</h1><p>这里新建一个简单的Hello World程序，名字就叫”HelloDeploy”。</p><p>同时为了说明问题，涛哥添加一些常用的模块。</p><p>在pro文件中，QT += 那一行该写的都写上：</p><p><img src="/images/QtDeployment/8.png" alt="预览"></p><p>在main.cpp中包含一下各个模块的头文件，再分别创建一个对象实例，调用一些简单的函数：</p><p><img src="/images/QtDeployment/9.png" alt="预览"></p><p>这样一个多模块依赖的程序就写好了。</p><h1 id="Window编译和发布"><a href="#Window编译和发布" class="headerlink" title="Window编译和发布"></a>Window编译和发布</h1><h2 id="Window-编译"><a href="#Window-编译" class="headerlink" title="Window 编译"></a>Window 编译</h2><p>这里要特别注意，编译器的选择, 以及编译用的是debug模式还是release模式。</p><p>涛哥这里是msvc2017_x64版本</p><p><img src="/images/QtDeployment/10.png" alt="预览"></p><p>一般发布用release模式。</p><p><img src="/images/QtDeployment/11.png" alt="预览"></p><p>编译完成后，默认在build-xxxx-release/release/文件夹中会生成我们的exe程序。</p><p><img src="/images/QtDeployment/12.png" alt="预览"></p><p><img src="/images/QtDeployment/13.png" alt="预览"></p><p>我们将这个exe复制出来，新建一个release文件夹，放进去</p><p><img src="/images/QtDeployment/14.png" alt="预览"></p><p>这时候可以尝试双击运行它，会提示缺少dll</p><p><img src="/images/QtDeployment/15.png" alt="预览"></p><h2 id="Window-发布"><a href="#Window-发布" class="headerlink" title="Window 发布"></a>Window 发布</h2><p>发布程序，其实就是把exe程序依赖的dll和相关资源都放在一起，保证双击运行即可。</p><p>我们前面提过的windeployqt.exe，是Qt提供的命令行工具，能帮助我们自动把需要的dll或资源复制过来。</p><ol><li>我们先打开一个命令行</li></ol><p>可以从开始菜单找到Qt提供的命令行</p><p><img src="/images/QtDeployment/16.png" alt="预览"></p><p>注意选对版本。这种命令行在启动时已经设置好了QT的环境变量，可以直接输入windeployqt.exe</p><p>也可以用普通的命令行，使用windeployqt.exe时带上绝对路径即可。</p><p>涛哥一般用普通的命令行，因为绝对路径不易出错。</p><ol start="2"><li>cd到release目录</li></ol><p>这里说一个windows启动命令行的小技巧：在release文件夹中，按住键盘shift键，然后按鼠标右键，弹出的右键菜单，</p><p>会比普通的右键菜单多一个“在此处打开命令窗口”，点击就能在release文件夹打开命令行窗口。</p><p><img src="/images/QtDeployment/17.png" alt="预览"></p><p>如果没有这个功能，就得手动输入cd指令，进入release路径。</p><p><img src="/images/QtDeployment/18.png" alt="预览"></p><ol start="3"><li>执行windeployqt命令</li></ol><p>这里通过绝对路径来使用windeployqt：</p><p>d:\qt\Online\5.12.4\msvc2017_64\bin\windeployqt.exe HelloDeploy.exe</p><p><img src="/images/QtDeployment/19.png" alt="预览"></p><p>HelloDeploy这个程序还用到了Qml，用到Qml的程序，要给windeployqt加上qmldir参数，写上你的Qml文件所在文件夹</p><p>(没用到qml的程序，不要加这一步)</p><p>d:\qt\Online\5.12.4\msvc2017_64\bin\windeployqt.exe HelloDeploy.exe –qmldir .\qml</p><p><img src="/images/QtDeployment/20.png" alt="预览"></p><p>写好windeployqt命令后按回车执行</p><p><img src="/images/QtDeployment/21.png" alt="预览"></p><p>正确执行后，release文件夹下，多了很多dll，以及一些文件夹。</p><p><img src="/images/QtDeployment/22.png" alt="预览"></p><p>这时候我们双击运行HelloDeploy.exe, 就可以正常启动了。</p><p>将整个文件夹压缩或拷贝到其它没有Qt环境的电脑上，也是可以启动的。</p><p>只要dll齐备了，制作安装包也不是问题。(后续有时间，我再写安装包制作的教程)</p><h2 id="VS运行时库"><a href="#VS运行时库" class="headerlink" title="VS运行时库"></a>VS运行时库</h2><p>如果是VS编译的程序，需要将QT路径下对应的vcredist_xxx.exe带上。</p><p>如果其它电脑上有vs运行时则可以直接运行，如果没有，就需要运行一下vs运行时安装包。</p><p>或者将运行时库里面的dll复制出来即可。</p><p>一般在VS的安装路径，都有展开的dll，可以直接拷贝。</p><p>例如，涛哥电脑上的vs2017路径如下：</p><p><img src="/images/QtDeployment/msvc.png" alt="预览"></p><p>按实际的路径找到这几个dll，全部拷贝即可。注意x86和x64，别拿错了。</p><h2 id="常见的错误处理"><a href="#常见的错误处理" class="headerlink" title="常见的错误处理"></a>常见的错误处理</h2><p>一般使用windeployqt，大部分库都能自动拷贝，不需要手动处理，</p><p>只有极少数情况下，windeployqt跑完，会缺失一些库，还要手动处理一下。</p><p>遇到这种情况，用依赖检查工具Dependencies即可快速定位问题。</p><p>Dependencies下载链接:  <a href="https://github.com/lucasg/Dependencies" target="_blank" rel="noopener">https://github.com/lucasg/Dependencies</a></p><p>Dependencies 下载好，点击”DependenciesGui.exe”就可以打开界面。注意是名字带Gui的那个，不带gui的“Dependencies.exe”是命令行程序。</p><p><img src="/images/QtDeployment/depency.jpg" alt="预览"></p><p>下面列举一些常见的错误信息</p><h3 id="应用程序无法正常启动"><a href="#应用程序无法正常启动" class="headerlink" title="应用程序无法正常启动"></a>应用程序无法正常启动</h3><p><img src="/images/QtDeployment/23.png" alt="预览"></p><p>最容易出现这种错误的情况是，程序是64位编译出来的，而同级目录下的dll是32位的，</p><p>或者同级目录下没有dll，但是环境变量中指向了32位的dll。(所以涛哥没有设置环境变量)</p><p>32位和64位倒过来也是。</p><p>如果dll版本是匹配的，还有可能出现的情况是缺少第三方库。</p><p>这里说一个检查依赖的方法：</p><p>将HelloDeploy.exe重命名为HelloDeploy.dll，然后用Dependencies打开，就可以查看少哪些库</p><p><img src="/images/QtDeployment/24.png" alt="预览"></p><p>如上图，红色问号的表示缺少的库。</p><p>找齐了依赖的库，再把程序的扩展名改回exe即可。</p><h3 id="启动失败-no-Qt-platform-plugin"><a href="#启动失败-no-Qt-platform-plugin" class="headerlink" title="启动失败 - no Qt platform plugin"></a>启动失败 - no Qt platform plugin</h3><p><img src="/images/QtDeployment/27.png" alt="预览"></p><p>这种情况，是QT路径下的 plugins/platforms/qwindows.dll文件没有复制过来。</p><p>注意这个dll文件直接复制到exe同级是不起作用的，要放在exe程序同级的platforms文件夹里，或者同级</p><p>的plugins/platforms文件夹里</p><h3 id="OpenGL-Context-创建失败"><a href="#OpenGL-Context-创建失败" class="headerlink" title="OpenGL Context 创建失败"></a>OpenGL Context 创建失败</h3><p><img src="/images/QtDeployment/25.png" alt="预览"></p><p>这种情况，一般是OpenGL相关的库没有复制过来，补上就好了</p><p><img src="/images/QtDeployment/26.png" alt="预览"></p><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><p>我们看到，exe同级目录下，windeployqt将一堆的文件夹放在了那里，有些混乱。</p><p><img src="/images/QtDeployment/28.png" alt="预览"></p><p>涛哥观察并验证了一下，其实可以做个简单的整理。</p><p><img src="/images/QtDeployment/29.png" alt="预览"></p><p>Qt开头的文件夹都是qml的模块，剩下的文件夹除了translations都是Qt的插件，</p><p>所以新建两个文件夹qml和plugins, 分别把qml模块和插件归入其中。</p><p><img src="/images/QtDeployment/30.png" alt="预览"></p><p>这样的结构，和QT安装路径下的结构是相似的。</p><p>这也正是Qt支持的插件加载路径、qml模块加载路径。</p><p>同级的dll则是windows系统默认的动态库加载规则，不方便修改</p><p>可以参考msdn：</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order</a></p><h2 id="简单裁剪"><a href="#简单裁剪" class="headerlink" title="简单裁剪"></a>简单裁剪</h2><p>如果你熟悉Qt的各个模块，可以进行一些裁剪。以下都是些个人经验。</p><p>不熟悉请慎重！</p><p>不熟悉请慎重！</p><p>不熟悉请慎重！</p><p>(当然静态编译也是一种裁剪的途径)</p><h3 id="删减dll"><a href="#删减dll" class="headerlink" title="删减dll"></a>删减dll</h3><p>首先可以把单元测试的dll去掉</p><p>Qt5Test.dll</p><p>Qt5QuickTest.dll</p><p>如果没用到windows扩展，Qt5WinExtras.dll也可以去掉</p><p>其次，如果你不需要内置的翻译文件，translations文件夹也可以删掉</p><p><img src="/images/QtDeployment/32.png" alt="预览"></p><h3 id="删减plugins"><a href="#删减plugins" class="headerlink" title="删减plugins"></a>删减plugins</h3><p>再来看一下plugins：</p><p>其中platforms是必不可少的，剩下的HelloDeploy都没用到，可以去掉。</p><p><img src="/images/QtDeployment/33.png" alt="预览"></p><p>常见程序会用的包括:</p><p> imageformats 图片格式支持</p><p> iconengines 小图标功能</p><p> sqldrivers 数据库驱动，这个保留用到的数据库足够了</p><p> 其他的看情况删减。</p><h3 id="删减qml"><a href="#删减qml" class="headerlink" title="删减qml"></a>删减qml</h3><p>最后看一下Qml文件夹，如果程序完全没用qml，直接删掉就好了。</p><p><img src="/images/QtDeployment/34.png" alt="预览"></p><p>按windeployqt给HelloDeploy提供的这些，逐个文件夹来说:</p><ul><li>Qt/labs 一般不推荐Qml中引入labs中的实验品，但是有些情况下功能缺失，只能引入。</li></ul><p>如果Qml中使用了Quick.Dialog(不是labs.Dialog)，它本身还是依赖的labs中的东西，一般是folderlistmodel和settings，</p><p>这时候还是不要动labs了，就按照windeployqt给的放着。</p><ul><li><p>Qt/WebSockets Qml的Websocket功能，用了就放着，没用可以删掉。</p></li><li><p>QtGraphicalEffects Qml的一些ShaderEffect特效，用了就放着，没用到可以删掉</p></li><li><p>QtMultimedia Qml的多媒体模块，用了就放着，没用到可以删掉</p></li><li><p>QtQml/Models.2 数据Model, 经常用。</p></li><li><p>QtQuick 这里面大部分都是Qml中常用的，QtQuick/Extras可以按情况删掉</p></li><li><p>QtQuick.2 常用的</p></li><li><p>QtTest 单元测试，删掉吧</p></li><li><p>QtWinExtras Windows扩展，没用到可以去掉</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e7%ae%80%e4%bb%8b&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e8%83%8c%e6%99%af&quot;&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#qt%e7%9a%84%e5%ae%89%e8%a3%85
      
    
    </summary>
    
      <category term="玩转Qt" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQt/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qt实用技能" scheme="https://jaredtao.github.io/tags/Qt%E5%AE%9E%E7%94%A8%E6%8A%80%E8%83%BD/"/>
    
      <category term="Qt发布" scheme="https://jaredtao.github.io/tags/Qt%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qt(8)-掌握信号槽使用细节</title>
    <link href="https://jaredtao.github.io/2019/09/02/%E7%8E%A9%E8%BD%ACQt(8)-%E6%8E%8C%E6%8F%A1%E4%BF%A1%E5%8F%B7%E6%A7%BD%E4%BD%BF%E7%94%A8%E7%BB%86%E8%8A%82/"/>
    <id>https://jaredtao.github.io/2019/09/02/玩转Qt(8)-掌握信号槽使用细节/</id>
    <published>2019-09-02T04:44:23.000Z</published>
    <updated>2020-12-25T10:07:06.969Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e7%ae%80%e4%bb%8b">简介</a></li><li><a href="#%e4%bf%a1%e5%8f%b7%e4%b8%8e%e6%a7%bd%e7%9a%84%e5%a3%b0%e6%98%8e">信号与槽的声明</a></li><li><a href="#%e4%bf%a1%e5%8f%b7-%e6%a7%bd%e7%9a%84%e4%bd%bf%e7%94%a8">信号-槽的使用</a><ul><li><a href="#%e4%bf%a1%e5%8f%b7%e7%9a%84%e4%bd%bf%e7%94%a8">信号的使用</a></li><li><a href="#%e6%a7%bd%e5%87%bd%e6%95%b0%e7%9a%84%e4%bd%bf%e7%94%a8">槽函数的使用</a></li><li><a href="#%e4%bf%a1%e5%8f%b7-%e6%a7%bd%e7%9a%84%22%e5%85%83%e8%b0%83%e7%94%a8%22">信号-槽的”元调用”</a></li></ul></li><li><a href="#%e4%bf%a1%e5%8f%b7%e5%92%8c%e4%bf%a1%e5%8f%b7%e7%9a%84%e5%8f%82%e6%95%b0">信号和信号的参数</a><ul><li><a href="#%e6%b3%a8%e5%86%8c%e5%85%83%e7%b1%bb%e5%9e%8b">注册元类型</a></li></ul></li><li><a href="#%e4%bf%a1%e5%8f%b7-%e6%a7%bd%e7%9a%84%e8%bf%9e%e6%8e%a5-connect%e5%87%bd%e6%95%b0">信号-槽的连接 connect函数</a><ul><li><a href="#%e8%bf%9e%e6%8e%a5%e7%9a%84%e4%b8%8d%e5%90%8c%e5%86%99%e6%b3%95">连接的不同写法</a><ul><li><a href="#%e5%85%83%e6%96%b9%e6%b3%95%e5%bc%8f">元方法式</a></li><li><a href="#%e5%87%bd%e6%95%b0%e6%8c%87%e9%92%88%e5%bc%8f">函数指针式</a><ul><li><a href="#%e5%87%bd%e6%95%b0%e9%87%8d%e8%bd%bd%e7%9a%84%e5%a4%84%e7%90%86">函数重载的处理</a></li></ul></li><li><a href="#functor%e5%bc%8f">functor式</a><ul><li><a href="#%e5%85%b3%e4%ba%8efunctor">关于functor</a></li><li><a href="#functor">functor</a></li></ul></li></ul></li><li><a href="#connect%e7%9a%84%e8%bf%9e%e6%8e%a5%e7%b1%bb%e5%9e%8b">connect的连接类型</a></li><li><a href="#connect%e7%9a%84%e8%bf%94%e5%9b%9e%e5%80%bc">connect的返回值</a></li></ul></li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>之前的文章《认清信号槽的本质》、《窥探信号槽的实现细节》讨论了一些原理，</p><p>这次我们来讨论一些信号-槽的使用细节。</p><h1 id="信号与槽的声明"><a href="#信号与槽的声明" class="headerlink" title="信号与槽的声明"></a>信号与槽的声明</h1><p>要使用信号-槽功能，先决条件是继承QObject类，并在类声明中增加Q_OBJECT宏。</p><p>之后在”signals:” 字段之后声明一些函数，这些函数就是信号。</p><p>在”public slots:” 之后声明的函数，就是槽函数。</p><p>例如下面的代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tom.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tom</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Tom(QObject *parent = <span class="literal">nullptr</span>) : QObject(parent)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">miaow</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        qDebug() &lt;&lt;  <span class="string">u8"喵!"</span> ;</span><br><span class="line">        <span class="function">emit <span class="title">miao</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">miao</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Jerry.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jerry</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Jerry(QObject *parent = <span class="literal">nullptr</span>) : QObject(parent)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">runAway</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">u8"那只猫又来了，快溜！"</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="信号-槽的使用"><a href="#信号-槽的使用" class="headerlink" title="信号-槽的使用"></a>信号-槽的使用</h1><p>使用比较简单，先说一下使用。</p><h2 id="信号的使用"><a href="#信号的使用" class="headerlink" title="信号的使用"></a>信号的使用</h2><p>信号 就是普通的类成员函数，信号只要声明(declare)，不需要实现(implement)，实现由moc(元对象编译器)自动生成。</p><p>信号的触发，可以用emit，也可以直接调用函数。</p><p>例如:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化一个tom对象</span></span><br><span class="line">Tom tom;</span><br><span class="line"><span class="comment">//通过emit发射信号</span></span><br><span class="line">emit tom.miao();</span><br><span class="line"><span class="comment">//直接调用信号。效果和emit一样。</span></span><br><span class="line">tom.miao();</span><br></pre></td></tr></table></figure><p>Qt源码的qobejctdefs.h头文件中，可以看到emit宏其实是空的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//qobejctdefs.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_EMIT</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> emit</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="槽函数的使用"><a href="#槽函数的使用" class="headerlink" title="槽函数的使用"></a>槽函数的使用</h2><p>槽函数和普通的成员函数一样。。。</p><h2 id="信号-槽的”元调用”"><a href="#信号-槽的”元调用”" class="headerlink" title="信号-槽的”元调用”"></a>信号-槽的”元调用”</h2><p>信号-槽特殊的地方，是moc(元对象编译器)为其生成了一份”元信息”,可以通过QMetaObject::invokeMethod的方式调用</p><p>例如:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化一个tom对象</span></span><br><span class="line">Tom tom;</span><br><span class="line"><span class="comment">//通过invok方式调用信号</span></span><br><span class="line">QMetaObject::invokeMethod(&amp;tom, <span class="string">"miao"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化一个jerry对象</span></span><br><span class="line">Jerry jerry;</span><br><span class="line"><span class="comment">//通过invok方式调用槽</span></span><br><span class="line">QMetaObject::invokeMethod(&amp;jerry, <span class="string">"runAway"</span>);</span><br></pre></td></tr></table></figure><p>一般在知道如何声明qobject的场景，没必要多此一举用invoke。</p><p>在一些需要”运行期反射”的情况下(头文件都没有,只知道有这么个对象,和函数的名字)，invoke十分有用。</p><p>invokeMethod还可以带参数、可以获取返回值，这不是本文的重点，这里就不展开了，详细的可以参考Qt帮助文档和元对象系统。</p><h1 id="信号和信号的参数"><a href="#信号和信号的参数" class="headerlink" title="信号和信号的参数"></a>信号和信号的参数</h1><p>信号可以带参数，参数的类型，必须是元对象系统能够识别的类型, 即元类型。（元对象系统后面再细说）</p><h2 id="注册元类型"><a href="#注册元类型" class="headerlink" title="注册元类型"></a>注册元类型</h2><p>Qt已经将大部分常用的基础类型，都注册进了元对象系统，可以在QMetaType类中看到。</p><p>通常写的继承于QObject的子类，本身已经附带了元信息，可以直接在信号-槽中使用。</p><p>不是继承于QObject的结构体、类等自定义类型，可以通过Q_DECLARE_METATYPE宏 和 qRegisterMetaType函数进行注册，之后就可以在信号-槽中使用。</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE(MyStruct)</span><br></pre></td></tr></table></figure><p>或者带命名空间的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MyNamespace</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE(MyNamespace::MyStruct)</span><br></pre></td></tr></table></figure><p>这里说明一下细节，Q_DECLARE_METATYPE宏声明过后，只是生成了元信息，可以被QVariant识别，还不能</p><p>用于队列方式的信号、槽，需要用qRegisterMetaType进行注册。而qRegisterMetaType要求”全定义”，也就是</p><p>提供类的”复制构造函数”和”赋值操作符”。</p><p>前面那种简单类型，C++编译器默认提供浅拷贝的”复制构造函数”和”赋值操作符”实现，可以直接用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而复杂一些的类，就要提供”全定义”。</p><p>(顺带一提，信号的参数可以是任意注册过的对象，而C++11的lambda、std::bind也是对象，只要注册过，也是可以通过信号参数发送出去的。)</p><h1 id="信号-槽的连接-connect函数"><a href="#信号-槽的连接-connect函数" class="headerlink" title="信号-槽的连接 connect函数"></a>信号-槽的连接 connect函数</h1><p>信号与槽，通过connect函数进行连接，之后就可以用信号去触发槽函数了。</p><p>连接的一般格式是Connectin = connect(obj1, signal1, obj2, slot1, connectType);</p><h2 id="连接的不同写法"><a href="#连接的不同写法" class="headerlink" title="连接的不同写法"></a>连接的不同写法</h2><p>connect函数重载实现了多种不同的参数写法，以Qt5.12为例，大致分为三类:</p><p> 元方法式、函数指针式、functor式</p><h3 id="元方法式"><a href="#元方法式" class="headerlink" title="元方法式"></a>元方法式</h3><p>元方法式是最常用的写法，函数声明如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//connect(1) 字符串式信号槽</span></span><br><span class="line">   <span class="keyword">static</span> QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">const</span> <span class="keyword">char</span> *signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> <span class="keyword">char</span> *member, Qt::ConnectionType = Qt::AutoConnection)</span></span>;</span><br><span class="line">   <span class="comment">//connect(2) QMetaMethod式信号槽</span></span><br><span class="line">   <span class="keyword">static</span> QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">const</span> QMetaMethod &amp;signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> QMetaMethod &amp;method,</span></span></span><br><span class="line"><span class="function"><span class="params">                       Qt::ConnectionType type = Qt::AutoConnection)</span></span>;</span><br><span class="line"><span class="comment">//connect(3) 对(1)的重载, 非static去掉receiver</span></span><br><span class="line"><span class="keyword">inline</span> QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">const</span> <span class="keyword">char</span> *signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">const</span> <span class="keyword">char</span> *member, Qt::ConnectionType type = Qt::AutoConnection)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Qt应用程序中用到最多的是connect(1)的写法，例如:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tom tom;</span><br><span class="line">Jerry jerry;</span><br><span class="line">connect(&amp;tom, SIGNAL(miao()), &amp;jerry, SLOT(runAway()))</span><br></pre></td></tr></table></figure><p>其中SIGNAL、SLOT两个宏, 作用是将函数转换成字符串。</p><p>connect(1)的实现是靠字符串去查找元方法，以实现连接。</p><p>connect(2) 则是把信号槽的字符串换成了元方法QMetaMethod, 一般不会直接用这种写法。</p><p>connect(3)是对connect(1)的重载，非静态成员函数，本身有this指针，所以省略了receiver参数。</p><h3 id="函数指针式"><a href="#函数指针式" class="headerlink" title="函数指针式"></a>函数指针式</h3><p>函数指针式写法，声明如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//connect(4) 连接信号到qobject的成员函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Func1, <span class="keyword">typename</span> Func2&gt;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">inline</span> QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func2&gt;::Object *receiver, Func2 slot,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Qt::ConnectionType type = Qt::AutoConnection)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//connect(5) 连接信号到非成员函数。</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Func1, <span class="keyword">typename</span> Func2&gt;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;<span class="keyword">int</span>(QtPrivate::FunctionPointer&lt;Func2&gt;::ArgumentCount) &gt;= <span class="number">0</span>, QMetaObject::Connection&gt;::type</span><br><span class="line">           connect(<span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal, Func2 slot);</span><br><span class="line">   </span><br><span class="line"><span class="comment">//connect(6) 连接信号到非成员函数。比(5)多一个context,可以设置连接类型</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Func1, <span class="keyword">typename</span> Func2&gt;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;<span class="keyword">int</span>(QtPrivate::FunctionPointer&lt;Func2&gt;::ArgumentCount) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                         !QtPrivate::FunctionPointer&lt;Func2&gt;::IsPointerToMemberFunction, QMetaObject::Connection&gt;::type</span><br><span class="line">           connect(<span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal, <span class="keyword">const</span> QObject *context, Func2 slot,</span><br><span class="line">                   Qt::ConnectionType type = Qt::AutoConnection);</span><br></pre></td></tr></table></figure><p>connect(4)用的也比较多，用法如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tom tom;</span><br><span class="line">Jerry jerry;</span><br><span class="line">connect(&amp;tom, &amp;Tom::miao, &amp;jerry, &amp;Jerry::runAway);</span><br></pre></td></tr></table></figure><p>信号-槽换成了C++的 取成员函数指针 的形式。</p><p>connect(4)本身的实现，比connect(1)快一些，因为省去了字符串查找的过程。</p><p>而连接建立后，从信号触发到槽函数的执行，两种写法是没有区别的。</p><p>在一些需要”运行期反射”的情况下(头文件都没有,只知道有这么个对象,和函数的名字),只能用connect(1)。</p><p>connect(5)可以连接信号到任意非成员函数指针上。除了槽函数，普通的函数也可以连接。这种连接不支持设置连接类型，可以看作是单纯的函数调用。</p><p>connect(6)是对connect(5)的重载,增加了一个context对象代替reveicer对象的作用。这种连接是可以设置连接类型的。</p><h4 id="函数重载的处理"><a href="#函数重载的处理" class="headerlink" title="函数重载的处理"></a>函数重载的处理</h4><p>信号-槽函数有重载的情况下，写函数指针式connect会报错，就需要类型转换。</p><p>比如：QLocalSocket有一个成员函数error,也有一个信号error,直接写connect会报错的。</p><p>Qt为我们提供了QOverload这个模板类，以解决这个问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接重载过的函数，使用QOverload做leixing 转换</span></span><br><span class="line">connect(socket, QOverload&lt;QLocalSocket::LocalSocketError&gt;::of(&amp;QLocalSocket::error), <span class="keyword">this</span>, &amp;XXX::onError);</span><br></pre></td></tr></table></figure><p>编译器支持C++14，还可以用qOverload模板函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接重载过的函数，使用QOverload做leixing 转换</span></span><br><span class="line">connect(socket, qOverload&lt;QLocalSocket::LocalSocketError&gt;(&amp;QLocalSocket::error), <span class="keyword">this</span>, &amp;XXX::onError);</span><br></pre></td></tr></table></figure><p>还有像QNetworkReply::error、QProcess::finished等等，都有重载，用的时候要转换处理一下。</p><h3 id="functor式"><a href="#functor式" class="headerlink" title="functor式"></a>functor式</h3><h4 id="关于functor"><a href="#关于functor" class="headerlink" title="关于functor"></a>关于functor</h4><p>问: 什么是functor？functor有什么用?</p><p>答: 在C++11之前, Qt通过自己的实现来推导函数指针及其参数，即QtPrivate::FunctionPointer, 用来处理信号-槽的连接。</p><p>C++11带来了lambda, 以及std::bind和std::function, std::function本身可以存储lambda、std::bind以及FunctionPointer。</p><p>这时候Qt已有的connect(4)、connect(5)、connect(6)是可以支持FunctionPointer的,而新出现的lambda以及std::bind是不支持的，</p><p>QtPrivate::FunctionPointer推导不出这些类型。所以Qt把这些不支持的新类型(主要是lambda和std::bind)称为functor(文档和源码都这么命名)，</p><p>并增加了connect(7)和connect(8)以支持functor。</p><h4 id="functor"><a href="#functor" class="headerlink" title="functor"></a>functor</h4><p>functor式写法，声明如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//connect(7) 连接信号到任意functor</span></span><br><span class="line">   <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Func1, <span class="keyword">typename</span> Func2&gt;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;QtPrivate::FunctionPointer&lt;Func2&gt;::ArgumentCount == <span class="number">-1</span>, QMetaObject::Connection&gt;::type</span><br><span class="line">           connect(<span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal, Func2 slot);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//connect(8) 连接信号到任意functor。比(7)多一个context,可以设置连接类型</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Func1, <span class="keyword">typename</span> Func2&gt;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;QtPrivate::FunctionPointer&lt;Func2&gt;::ArgumentCount == <span class="number">-1</span>, QMetaObject::Connection&gt;::type</span><br><span class="line">           connect(<span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal, <span class="keyword">const</span> QObject *context, Func2 slot,</span><br><span class="line">                   Qt::ConnectionType type = Qt::AutoConnection);</span><br></pre></td></tr></table></figure><p>connect(7)可以连接信号到任意lambda、std::bind上。</p><p>connect(8)是对(7)的重载，增加了一个context对象代替reveicer对象的作用。这种连接是可以设置连接类型的。</p><h2 id="connect的连接类型"><a href="#connect的连接类型" class="headerlink" title="connect的连接类型"></a>connect的连接类型</h2><p>connectType为连接类型，默认为AutoConnection，即Qt自动处理，大部分情况下也不用管。个别情况，需要手动指定。</p><p>可选的连接类型有<br>自动 AutoConnection<br>直连 DirectConnection<br>队列 QueuedConnection<br>唯一连接 UniqueConnection</p><p>自动处理的逻辑是，如果发送信号的线程和receiver在同一个线程，就是DirectConnection(直接函数调用),不是同一个线程，则转换为QueuedConnection。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;引用自《Qt原理-窥探信号槽的实现细节》</span><br><span class="line"></span><br><span class="line">如果信号-槽连接方式为QueuedConnection，不论是否在同一个线程，按队列处理。</span><br><span class="line"></span><br><span class="line">如果信号-槽连接方式为Auto，且不在同一个线程，也按队列处理。</span><br><span class="line"></span><br><span class="line">如果信号-槽连接方式为阻塞队列BlockingQueuedConnection，按阻塞处理。</span><br><span class="line"> </span><br><span class="line">(注意同一个线程就不要按阻塞队列调用了。因为同一个线程，同时只能做一件事，</span><br><span class="line"></span><br><span class="line">本身就是阻塞的，直接调用就好了，如果走阻塞队列，则多了加锁的过程。如果槽中又发了</span><br><span class="line"></span><br><span class="line">同样的信号，就会出现死锁：加锁之后还未解锁，又来申请加锁。)</span><br><span class="line"></span><br><span class="line">队列处理，就是把槽函数的调用，转化成了QMetaCallEvent事件，通过QCoreApplication::postEvent</span><br><span class="line"></span><br><span class="line">放进了事件循环, 等到下一次事件分发，相应的线程才会去调用槽函数。</span><br></pre></td></tr></table></figure><p>下面举例一些需要手动指定连接类型的场景：</p><p>例1-跨多个线程：</p><p>A线程中写connect，让B线程中的信号连到C线程的槽中，希望C的槽在C中执行。</p><p>这种情况要明确指定QueuedConnection，不写的话按照Auto处理，C中的槽会在A中执行。</p><p>例2-跨线程DirectConnection</p><p>(这种用法在Qml的渲染引擎SceneGraph中比较常见)。</p><p>A线程为内部代码，不能修改，一些特定的节点会有信号发出。</p><p>B线程为用户代码，有一些功能函数，希望在A线程中去执行。</p><p>这种情况，将A的信号连接到B的函数，连接方式指定为DirectConnection，就可以把B的函数插入到A线程发信号的地方了。</p><p>效果类似于子类重载父类的函数。</p><h2 id="connect的返回值"><a href="#connect的返回值" class="headerlink" title="connect的返回值"></a>connect的返回值</h2><p>connect的返回值为QMetaObject::Connection,代表一个连接。大部分情况下，不用管返回值。</p><p>Connection可以用来验证链接是否有效，可以用来断开连接。</p><p>一般用disconnect函数就可以断开连接；而signal-functor的这种形式的连接，没有object的存在，只能用Connection断开。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e7%ae%80%e4%bb%8b&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%bf%a1%e5%8f%b7%e4%b8%8e%e6%a7%bd%e7%9a%84%e5%a3%b0%e6%98%8e&quot;&gt;信号与槽的声明&lt;/a
      
    
    </summary>
    
      <category term="玩转Qt" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQt/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qt实用技能" scheme="https://jaredtao.github.io/tags/Qt%E5%AE%9E%E7%94%A8%E6%8A%80%E8%83%BD/"/>
    
      <category term="信号-槽" scheme="https://jaredtao.github.io/tags/%E4%BF%A1%E5%8F%B7-%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qt(7)-窥探信号槽的实现细节</title>
    <link href="https://jaredtao.github.io/2019/08/30/%E7%8E%A9%E8%BD%ACQt(7)-%E7%AA%A5%E6%8E%A2%E4%BF%A1%E5%8F%B7%E6%A7%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/"/>
    <id>https://jaredtao.github.io/2019/08/30/玩转Qt(7)-窥探信号槽的实现细节/</id>
    <published>2019-08-30T10:44:23.000Z</published>
    <updated>2020-12-25T10:06:48.362Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e7%ae%80%e4%bb%8b">简介</a></li><li><a href="#%e7%8c%ab%e5%92%8c%e8%80%81%e9%bc%a0%e7%9a%84%e6%95%85%e4%ba%8b">猫和老鼠的故事</a></li><li><a href="#%e5%a3%b0%e6%98%8e%e4%b8%8e%e5%ae%9e%e7%8e%b0">声明与实现</a></li><li><a href="#qobject%e5%ae%8f">Q_OBJECT宏</a></li><li><a href="#%e4%bf%a1%e5%8f%b7%e7%9a%84moc%e7%94%9f%e6%88%90">信号的moc生成</a></li><li><a href="#%e4%bf%a1%e5%8f%b7%e7%9a%84%e8%a7%a6%e5%8f%91">信号的触发</a></li><li><a href="#%e6%a7%bd%e5%92%8cmoc%e7%94%9f%e6%88%90">槽和moc生成</a></li><li><a href="#%e7%ac%ac%e4%b8%89%e6%96%b9%e4%bf%a1%e5%8f%b7%e6%a7%bd%e5%ae%9e%e7%8e%b0">第三方信号槽实现</a></li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这次讨论Qt信号-槽的实现细节。</p><p>上次的文章《认清信号槽的本质》中介绍过，信号-槽是一种对象之间的通信机制，是</p><p>Qt在标准C++之外，使用元对象编译器(MOC)实现的语法糖。</p><p>这次通过一个简单的案例，学习一些信号-槽的实现细节。</p><h1 id="猫和老鼠的故事"><a href="#猫和老鼠的故事" class="headerlink" title="猫和老鼠的故事"></a>猫和老鼠的故事</h1><p><img src="/images/Qt4/1.jpg" alt="预览"></p><p>还是拿上次的设定来说明：Tom有个技能叫”喵”，就是发出猫叫，而正在偷吃东西的Jerry,听见猫叫声就会逃跑。</p><p>我们用信号-槽的方式写出来。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tom.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tom</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Tom(QObject *parent = <span class="literal">nullptr</span>) : QObject(parent)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">miaow</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        qDebug() &lt;&lt;  <span class="string">u8"喵!"</span> ;</span><br><span class="line">        <span class="function">emit <span class="title">miao</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">miao</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Jerry.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jerry</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Jerry(QObject *parent = <span class="literal">nullptr</span>) : QObject(parent)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">runAway</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">u8"那只猫又来了，快溜！"</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上面的代码为例，要使用信号-槽功能，先决条件是继承QObject类，并在类声明中增加Q_OBJECT宏。</p><p>之后在”signals:” 字段之后声明一些函数，这些函数就是信号。</p><p>在”public slots:” 之后声明的函数，就是槽函数。</p><p>接下来看看我们的main函数:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Tom.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Jerry.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    Tom tom;</span><br><span class="line">    Jerry jerry;</span><br><span class="line"></span><br><span class="line">    QObject::connect(&amp;tom, &amp;Tom::miao, &amp;jerry, &amp;Jerry::runAway);</span><br><span class="line">    tom.miaow();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>信号-槽都准备好了，接下来创建两个对象实例，并使用QObject::connect将信号和槽连接起来。</p><p>最后使用emit发送信号，就会自动触发槽函数了。</p><p>运行结果：</p><p><img src="/images/Qt5/1.jpg" alt="预览"></p><h1 id="声明与实现"><a href="#声明与实现" class="headerlink" title="声明与实现"></a>声明与实现</h1><p>信号和槽的本质都是函数。</p><p>我们知道C++中的函数要有声明(declare)，也要有实现(implement),</p><p>而信号只要声明，不需要写实现。这是因为moc会为我们自动生成。</p><p>另外触发信号时，不写emit关键字，直接调用信号函数，也是没有问题的。</p><h1 id="Q-OBJECT宏"><a href="#Q-OBJECT宏" class="headerlink" title="Q_OBJECT宏"></a>Q_OBJECT宏</h1><p>我们来看一下Q_OBJECT宏，展开如下：</p><p>(不同的Qt版本有些差异，涛哥这里用的是5.12.4，以此为例)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>: \</span><br><span class="line">    QT_WARNING_PUSH \</span><br><span class="line">    Q_OBJECT_NO_OVERRIDE_WARNING \</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> QMetaObject staticMetaObject; \</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> QMetaObject *<span class="title">metaObject</span><span class="params">()</span> <span class="keyword">const</span></span>; \</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> *<span class="title">qt_metacast</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>; \</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">qt_metacall</span><span class="params">(QMetaObject::Call, <span class="keyword">int</span>, <span class="keyword">void</span> **)</span></span>; \</span><br><span class="line">    QT_TR_FUNCTIONS \</span><br><span class="line"><span class="keyword">private</span>: \</span><br><span class="line">    Q_OBJECT_NO_ATTRIBUTES_WARNING \</span><br><span class="line">    <span class="function">Q_DECL_HIDDEN_STATIC_METACALL <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qt_static_metacall</span><span class="params">(QObject *, QMetaObject::Call, <span class="keyword">int</span>, <span class="keyword">void</span> **)</span></span>; \</span><br><span class="line">    QT_WARNING_POP \</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QPrivateSignal</span> &#123;</span>&#125;; \</span><br><span class="line">    QT_ANNOTATE_CLASS(qt_qobject, <span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>我们看到，关键的地方，是声明了一个只读的静态成员变量staticMetaObject，以及3个public的成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> QMetaObject staticMetaObject; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> QMetaObject *<span class="title">metaObject</span><span class="params">()</span> <span class="keyword">const</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> *<span class="title">qt_metacast</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">qt_metacall</span><span class="params">(QMetaObject::Call, <span class="keyword">int</span>, <span class="keyword">void</span> **)</span></span>;</span><br></pre></td></tr></table></figure><p>还有一个private的静态成员函数qt_static_metacall</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qt_static_metacall</span><span class="params">(QObject *, QMetaObject::Call, <span class="keyword">int</span>, <span class="keyword">void</span> **)</span></span></span><br></pre></td></tr></table></figure><p>那么声明的这些成员变量/函数，在哪里实现？答案是moc生成的cpp文件。</p><h1 id="信号的moc生成"><a href="#信号的moc生成" class="headerlink" title="信号的moc生成"></a>信号的moc生成</h1><p><img src="/images/Qt5/2.jpg" alt="预览"></p><p>如上图所示目录结构，项目编译完成后，在build文件夹中，自动生成了moc_Jerry.cpp 和 moc_Tom.cpp两个文件</p><p>其中moc_Tom.cpp内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************************************************************************</span></span><br><span class="line"><span class="comment">** Meta object code from reading C++ file 'Tom.h'</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">** Created by: The Qt Meta Object Compiler version 67 (Qt 5.12.4)</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">** WARNING! All changes made in this file will be lost!</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../TomJerry/Tom.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qbytearray.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qmetatype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(Q_MOC_OUTPUT_REVISION)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">error</span> <span class="meta-string">"The header file 'Tom.h' doesn't include &lt;QObject&gt;."</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> Q_MOC_OUTPUT_REVISION != 67</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">error</span> <span class="meta-string">"This file was generated using the moc from 5.12.4. It"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">error</span> <span class="meta-string">"cannot be used with the include files from this version of Qt."</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">error</span> <span class="meta-string">"(The moc has changed too much.)"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_MOC_NAMESPACE</span><br><span class="line">QT_WARNING_PUSH</span><br><span class="line">QT_WARNING_DISABLE_DEPRECATED</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qt_meta_stringdata_Tom_t</span> &#123;</span></span><br><span class="line">    QByteArrayData data[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">char</span> stringdata0[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_MOC_LITERAL(idx, ofs, len) \</span></span><br><span class="line">    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \</span><br><span class="line">    qptrdiff(offsetof(qt_meta_stringdata_Tom_t, stringdata0) + ofs \</span><br><span class="line">        - idx * <span class="keyword">sizeof</span>(QByteArrayData)) \</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> qt_meta_stringdata_Tom_t qt_meta_stringdata_Tom = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">QT_MOC_LITERAL(<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>), <span class="comment">// "Tom"</span></span><br><span class="line">QT_MOC_LITERAL(<span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>), <span class="comment">// "miao"</span></span><br><span class="line">QT_MOC_LITERAL(<span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>) <span class="comment">// ""</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"Tom\0miao\0"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> QT_MOC_LITERAL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> uint qt_meta_data_Tom[] = &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// content:</span></span><br><span class="line">       <span class="number">8</span>,       <span class="comment">// revision</span></span><br><span class="line">       <span class="number">0</span>,       <span class="comment">// classname</span></span><br><span class="line">       <span class="number">0</span>,    <span class="number">0</span>, <span class="comment">// classinfo</span></span><br><span class="line">       <span class="number">1</span>,   <span class="number">14</span>, <span class="comment">// methods</span></span><br><span class="line">       <span class="number">0</span>,    <span class="number">0</span>, <span class="comment">// properties</span></span><br><span class="line">       <span class="number">0</span>,    <span class="number">0</span>, <span class="comment">// enums/sets</span></span><br><span class="line">       <span class="number">0</span>,    <span class="number">0</span>, <span class="comment">// constructors</span></span><br><span class="line">       <span class="number">0</span>,       <span class="comment">// flags</span></span><br><span class="line">       <span class="number">1</span>,       <span class="comment">// signalCount</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// signals: name, argc, parameters, tag, flags</span></span><br><span class="line">       <span class="number">1</span>,    <span class="number">0</span>,   <span class="number">19</span>,    <span class="number">2</span>, <span class="number">0x06</span> <span class="comment">/* Public */</span>,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// signals: parameters</span></span><br><span class="line">    QMetaType::Void,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>        <span class="comment">// eod</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Tom::qt_static_metacall(QObject *_o, QMetaObject::Call _c, <span class="keyword">int</span> _id, <span class="keyword">void</span> **_a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_c == QMetaObject::InvokeMetaMethod) &#123;</span><br><span class="line">        <span class="keyword">auto</span> *<span class="keyword">_t</span> = <span class="keyword">static_cast</span>&lt;Tom *&gt;(_o);</span><br><span class="line">        Q_UNUSED(<span class="keyword">_t</span>)</span><br><span class="line">        <span class="keyword">switch</span> (_id) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">_t</span>-&gt;miao(); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_c == QMetaObject::IndexOfMethod) &#123;</span><br><span class="line">        <span class="keyword">int</span> *result = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">int</span> *&gt;(_a[<span class="number">0</span>]);</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">_t</span> = <span class="keyword">void</span> (Tom::*)();</span><br><span class="line">            <span class="keyword">if</span> (*<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">_t</span> *&gt;(_a[<span class="number">1</span>]) == <span class="keyword">static_cast</span>&lt;<span class="keyword">_t</span>&gt;(&amp;Tom::miao)) &#123;</span><br><span class="line">                *result = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Q_UNUSED(_a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QT_INIT_METAOBJECT <span class="keyword">const</span> QMetaObject Tom::staticMetaObject = &#123; &#123;</span><br><span class="line">    &amp;QObject::staticMetaObject,</span><br><span class="line">    qt_meta_stringdata_Tom.data,</span><br><span class="line">    qt_meta_data_Tom,</span><br><span class="line">    qt_static_metacall,</span><br><span class="line">    <span class="literal">nullptr</span>,</span><br><span class="line">    <span class="literal">nullptr</span></span><br><span class="line">&#125; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> QMetaObject *Tom::metaObject() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> QObject::d_ptr-&gt;metaObject ? QObject::d_ptr-&gt;dynamicMetaObject() : &amp;staticMetaObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> *Tom::qt_metacast(<span class="keyword">const</span> <span class="keyword">char</span> *_clname)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_clname) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(_clname, qt_meta_stringdata_Tom.stringdata0))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span>*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> QObject::qt_metacast(_clname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Tom::qt_metacall(QMetaObject::Call _c, <span class="keyword">int</span> _id, <span class="keyword">void</span> **_a)</span><br><span class="line">&#123;</span><br><span class="line">    _id = QObject::qt_metacall(_c, _id, _a);</span><br><span class="line">    <span class="keyword">if</span> (_id &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> _id;</span><br><span class="line">    <span class="keyword">if</span> (_c == QMetaObject::InvokeMetaMethod) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_id &lt; <span class="number">1</span>)</span><br><span class="line">            qt_static_metacall(<span class="keyword">this</span>, _c, _id, _a);</span><br><span class="line">        _id -= <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_c == QMetaObject::RegisterMethodArgumentMetaType) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_id &lt; <span class="number">1</span>)</span><br><span class="line">            *<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">int</span>*&gt;(_a[<span class="number">0</span>]) = <span class="number">-1</span>;</span><br><span class="line">        _id -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SIGNAL 0</span></span><br><span class="line"><span class="keyword">void</span> Tom::miao()</span><br><span class="line">&#123;</span><br><span class="line">    QMetaObject::activate(<span class="keyword">this</span>, &amp;staticMetaObject, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line">QT_WARNING_POP</span><br><span class="line">QT_END_MOC_NAMESPACE</span><br></pre></td></tr></table></figure><p>可以大致看出，生成的cpp文件中，就是变量staticMetaObject以及 那几个函数的实现。</p><p>staticMetaObject是一个结构体，用来存储Tom这个类的信号、槽等元信息，并把</p><p>qt_static_metacall静态函数作为函数指针存储起来。</p><p>因为是静态成员，所以实例化多少个Tom对象，它们的元信息都是一样的。</p><p>qt_static_metacall函数提供了两种“元调用的实现”：</p><p>如果是InvokeMetaMethod类型的调用，则直接 把参数中的QObject对象，</p><p>转换成Tom类然后调用其miao函数</p><p>如果是IndexOfMethod类型的调用，即获取元函数的索引号，则计算miao函数的偏移并返回。</p><p>而moc_Tom.cpp末尾的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SIGNAL 0</span></span><br><span class="line"><span class="keyword">void</span> Tom::miao()</span><br><span class="line">&#123;</span><br><span class="line">    QMetaObject::activate(<span class="keyword">this</span>, &amp;staticMetaObject, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是信号函数的实现。</p><h1 id="信号的触发"><a href="#信号的触发" class="headerlink" title="信号的触发"></a>信号的触发</h1><p>miao信号的实现，直接调用了QMetaObject::activate函数。其中0代表miao这个函数的索引号。</p><p>QMetaObject::activate函数的实现，在Qt源码的QObject.cpp文件中，略微复杂一些，</p><p>且不同版本的Qt，实现差异都比较大，这里总结一下大致的实现：</p><p>先找出与当前信号连接的所有对象-槽函数，再逐个处理：</p><p>这里处理的方式，分为三种：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((c-&gt;connectionType == Qt::AutoConnection &amp;&amp; !receiverInSameThread)</span><br><span class="line">                || (c-&gt;connectionType == Qt::QueuedConnection)) &#123;</span><br><span class="line">    <span class="comment">// 队列处理</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (c-&gt;connectionType == Qt::BlockingQueuedConnection) &#123;</span><br><span class="line">    <span class="comment">// 阻塞处理</span></span><br><span class="line">    <span class="comment">// 如果同线程，打印潜在死锁。</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//直接调用槽函数或回调函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>receiverInSameThread表示当前线程id和接收信号的对象的所在线程id是否相等。</p><p>如果信号-槽连接方式为QueuedConnection，不论是否在同一个线程，按队列处理。</p><p>如果信号-槽连接方式为Auto，且不在同一个线程，也按队列处理。</p><p>如果信号-槽连接方式为阻塞队列BlockingQueuedConnection，按阻塞处理。</p><p>(注意同一个线程就不要按阻塞队列调用了。因为同一个线程，同时只能做一件事，</p><p>本身就是阻塞的，直接调用就好了，如果走阻塞队列，则多了加锁的过程。如果槽中又发了</p><p>同样的信号，就会出现死锁：加锁之后还未解锁，又来申请加锁。)</p><p>队列处理，就是把槽函数的调用，转化成了QMetaCallEvent事件，通过QCoreApplication::postEvent</p><p>放进了事件循环, 等到下一次事件分发，相应的线程才会去调用槽函数。</p><p>关于事件循环，可以参考之前的文章《Qt实用技能3-理解事件循环》</p><h1 id="槽和moc生成"><a href="#槽和moc生成" class="headerlink" title="槽和moc生成"></a>槽和moc生成</h1><p>slot函数我们自己实现了，moc不会做额外的处理，所以自动生成的moc_Jerry.cpp文件中，</p><p>只有Q_OBJECT宏的展开，和前面的moc_Tom.cpp是一致的，不赘述了。</p><h1 id="第三方信号槽实现"><a href="#第三方信号槽实现" class="headerlink" title="第三方信号槽实现"></a>第三方信号槽实现</h1><p>信号-槽是非常优秀的通信机制，但Qt的moc实现方式，被一些人诟病，所以他们造了新的轮子,比如：</p><p><a href="https://woboq.com/blog/verdigris-qt-without-moc.html" target="_blank" rel="noopener">https://woboq.com/blog/verdigris-qt-without-moc.html</a></p><p><a href="http://sigslot.sourceforge.net/" target="_blank" rel="noopener">http://sigslot.sourceforge.net/</a></p><p><a href="https://github.com/NoAvailableAlias/nano-signal-slot" target="_blank" rel="noopener">https://github.com/NoAvailableAlias/nano-signal-slot</a></p><p><a href="https://github.com/pbhogan/Signals" target="_blank" rel="noopener">https://github.com/pbhogan/Signals</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e7%ae%80%e4%bb%8b&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e7%8c%ab%e5%92%8c%e8%80%81%e9%bc%a0%e7%9a%84%e6%95%85%e4%ba%8b&quot;&gt;猫和老鼠的故事&lt;/a
      
    
    </summary>
    
      <category term="玩转Qt" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQt/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="信号-槽" scheme="https://jaredtao.github.io/tags/%E4%BF%A1%E5%8F%B7-%E6%A7%BD/"/>
    
      <category term="Qt原理" scheme="https://jaredtao.github.io/tags/Qt%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qt(6)-认清信号槽的本质</title>
    <link href="https://jaredtao.github.io/2019/07/23/%E7%8E%A9%E8%BD%ACQt(6)-%E8%AE%A4%E6%B8%85%E4%BF%A1%E5%8F%B7%E6%A7%BD%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>https://jaredtao.github.io/2019/07/23/玩转Qt(6)-认清信号槽的本质/</id>
    <published>2019-07-23T10:44:23.000Z</published>
    <updated>2020-12-25T10:06:35.051Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e7%ae%80%e4%bb%8b">简介</a></li><li><a href="#%e7%8c%ab%e5%92%8c%e8%80%81%e9%bc%a0%e7%9a%84%e6%95%85%e4%ba%8b">猫和老鼠的故事</a></li><li><a href="#%e5%af%b9%e8%b1%a1%e4%b9%8b%e9%97%b4%e7%9a%84%e9%80%9a%e4%bf%a1%e6%9c%ba%e5%88%b6">对象之间的通信机制</a><ul><li><a href="#%e5%b0%9d%e8%af%95%e4%b8%80%e7%9b%b4%e6%8e%a5%e8%b0%83%e7%94%a8">尝试一：直接调用</a></li><li><a href="#%e5%b0%9d%e8%af%95%e4%ba%8c%e5%9b%9e%e8%b0%83%e5%87%bd%e6%95%b0%e6%98%a0%e5%b0%84%e8%a1%a8">尝试二：回调函数+映射表</a></li></ul></li><li><a href="#%e8%a7%82%e5%af%9f%e8%80%85%e6%a8%a1%e5%bc%8f">观察者模式</a></li><li><a href="#qt%e7%9a%84%e4%bf%a1%e5%8f%b7-%e6%a7%bd">Qt的信号-槽</a><ul><li><a href="#%e4%bf%a1%e5%8f%b7-%e6%a7%bd%e7%ae%80%e4%bb%8b">信号-槽简介</a></li><li><a href="#%e4%bf%a1%e5%8f%b7-%e6%a7%bd%e5%88%86%e4%b8%a4%e7%a7%8d">信号-槽分两种</a></li><li><a href="#%e4%bf%a1%e5%8f%b7-%e6%a7%bd%e7%9a%84%e5%ae%9e%e7%8e%b0-%e5%85%83%e5%af%b9%e8%b1%a1%e7%bc%96%e8%af%91%e5%99%a8moc">信号-槽的实现 元对象编译器moc</a></li><li><a href="#moc%e7%9a%84%e6%9c%ac%e8%b4%a8-%e5%8f%8d%e5%b0%84">moc的本质-反射</a></li></ul></li><li><a href="#%e5%8f%82%e8%80%83%e6%96%87%e7%8c%ae">参考文献</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这次讨论Qt信号-槽相关的知识点。</p><p>信号-槽是Qt框架中最核心的机制，也是每个Qt开发者必须掌握的技能。</p><p>网络上有很多介绍信号-槽的文章，也可以参考。</p><p>涛哥的专栏是《Qt进阶之路》，如果连信号-槽的文章都没有，将是没有灵魂的。</p><p>所以这次涛哥就由浅到深地说一说信号-槽。</p><h2 id="猫和老鼠的故事"><a href="#猫和老鼠的故事" class="headerlink" title="猫和老鼠的故事"></a>猫和老鼠的故事</h2><p>如果一上来就讲一大堆概念和定义，读者很容易读睡着。所以涛哥从一个故事/场景开始说起。</p><p>涛哥小时候喜欢看动画片《猫和老鼠》, 里面有汤姆猫(Tom)和杰瑞鼠(Jerry)斗智斗勇的故事。。。</p><p><img src="/images/Qt4/1.jpg" alt="预览"></p><p>现在做个简单的设定：Tom有个技能叫”喵”，就是发出猫叫，而正在偷吃东西的Jerry,听见猫叫声就会逃跑。</p><p><img src="/images/Qt4/TomCat.png" alt="预览"></p><p><img src="/images/Qt4/jerry.jpg" alt="预览"></p><p>我们尝试用C++面向对象的思想，描述这个设定。</p><p>先是定义Tom和Jerry两种对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tom的定义</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tom</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//猫叫</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Miaow</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"喵!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略其它</span></span><br><span class="line">    ... </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Jerry的定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jerry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//逃跑</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RunAway</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"那只猫又来了，快溜！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略其它</span></span><br><span class="line">    ... </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来模拟场景</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//实例化tom</span></span><br><span class="line">    Tom tom;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化jerry</span></span><br><span class="line">    Jerry jerry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//tom发出叫声</span></span><br><span class="line">    tom.Miaow();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//jerry逃跑</span></span><br><span class="line">    jerry.RunAway();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个场景看起来很简单，tom发出叫声之后手动调用了jerry的逃跑。</p><p>我们再看几种稍微复杂的场景:</p><p>场景一:</p><p>假如jerry逃跑后过段时间，又回来偷吃东西。Tom再次发出叫声，jerry再次逃跑。。。</p><p>这个场景要重复几十次。我们能否实现，只要tom的Miaow被调用了，jerry的RunAway就自动被调用，而不是每次都手动调用?</p><p>场景二:</p><p>假如jerry是藏在“厨房的柜子里的米袋子后面”，无法直接发现它(不能直接获取到jerry对象，并调用它的函数)。</p><p>这种情况下，该怎么建立 “猫叫-老鼠逃跑” 的模型？</p><p>场景三：</p><p>假如有多只jerry，一只tom发出叫声时，所有jerry都逃跑。这种模型该怎么建立？</p><p>假如有多只tom，任意一只发出叫声时，所有jerry都逃跑。这种模型又该怎么建立？</p><p>场景四：</p><p>假如不知道猫的确切品种或者名字，也不知道老鼠的品种或者名字，只要 猫 这种动物发出叫声，老鼠 这种动物就要逃跑。</p><p>这样的模型又该如何建立?</p><p>…</p><p> 还有很多场景，就不赘述了。</p><h2 id="对象之间的通信机制"><a href="#对象之间的通信机制" class="headerlink" title="对象之间的通信机制"></a>对象之间的通信机制</h2><p>这里概括一下要实现的功能：</p><p>要提供一种对象之间的通信机制。这种机制，要能够给两个不同对象中的函数建立映射关系，前者被调用时后者也能被自动调用。</p><p>再深入一些，两个对象都互相不知道对方的存在，仍然可以建立联系。甚至一对一的映射可以扩展到多对多，具体对象之间的映射可以扩展到抽象概念之间。</p><h3 id="尝试一：直接调用"><a href="#尝试一：直接调用" class="headerlink" title="尝试一：直接调用"></a>尝试一：直接调用</h3><p>应该会有人说， Miaow()的函数中直接调用RunAway()不就行了？</p><p>明显场景二就把这种方案pass掉了。</p><p>直接调用的问题是，猫要知道老鼠有个函数/接口叫逃跑，然后主动调用了它。</p><p>这就好比Tom叫了一声，然后Tom主动拧着Jerry的腿让它跑。这样是不合理的。(Jerry表示一脸懵逼!)</p><p>真实的逻辑是，猫的叫声在空气/介质中传播，传到了老鼠的耳朵里，老鼠就逃跑了。猫和老鼠互相都没看见呢。</p><h3 id="尝试二：回调函数-映射表"><a href="#尝试二：回调函数-映射表" class="headerlink" title="尝试二：回调函数+映射表"></a>尝试二：回调函数+映射表</h3><p>似乎是可行的。</p><p>稍微思考一下，我们要做这两件事情：</p><p>1 把RunAway函数取出来存储在某个地方</p><p>2 建立Miaow函数和RunAway的映射关系，能够在前者被调用时，自动调用后者。</p><p>RunAway函数可以用 函数指针|成员函数指针 或者C++11-function 来存储，都可以称作 “回调函数”。</p><p>(下面的代码以C++11 function的写法为主，函数指针的写法稍微复杂一些，本质一样)</p><p>我们先用一个简单的Map来存储映射关系, 就用一个字符串作为映射关系的名字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt;&gt; callbackMap;</span><br></pre></td></tr></table></figure><p>我们还要实现 “建立映射关系” 和 “调用”功能，所以这里封装一个Connections类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connections</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//按名称“建立映射关系”</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;name, <span class="keyword">const</span> <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; &amp;callback)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_callbackMap[name] = callback;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按名称“调用”</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invok</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = m_callbackMap.find(name);</span><br><span class="line">        <span class="comment">//迭代器判断</span></span><br><span class="line">        <span class="keyword">if</span> (it != m_callbackMap.end()) &#123;</span><br><span class="line">            <span class="comment">//迭代器有效的情况，直接调用</span></span><br><span class="line">            it-&gt;second();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt;&gt; m_callbackMap;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么这个映射关系存储在哪里呢? 显然是一个Tom和Jerry共有的”上下文环境”中。</p><p>我们用一个全局变量来表示，这样就可以简单地模拟了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局共享的Connections。</span></span><br><span class="line"><span class="keyword">static</span> Connections s_connections;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tom的定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tom</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//猫叫</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Miaow</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"喵!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">//调用一下名字为mouse的回调</span></span><br><span class="line">        s_connections.invok(<span class="string">"mouse"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略其它</span></span><br><span class="line">    ... </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Jerry的定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jerry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Jerry() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造函数中，建立映射关系。std::bind属于基本用法。</span></span><br><span class="line">        s_connections.connect(<span class="string">"mouse"</span>, <span class="built_in">std</span>::bind(&amp;Jerry::RunAway, <span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//逃跑</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RunAway</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"那只猫又来了，快溜！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略其它</span></span><br><span class="line">    ... </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//模拟嵌套层级很深的场景，外部不能直接访问到tom</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">B</span> &#123;</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">C</span> &#123;</span></span><br><span class="line">                <span class="keyword">private</span>:</span><br><span class="line">                    <span class="comment">//Tom在很深的结构中</span></span><br><span class="line">                    Tom tom;</span><br><span class="line">                <span class="keyword">public</span>:</span><br><span class="line">                    <span class="function"><span class="keyword">void</span> <span class="title">MiaoMiaoMiao</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">                    </span>&#123;</span><br><span class="line">                        tom.Miaow();</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;c;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">MiaoMiao</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                c.MiaoMiaoMiao();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;b;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Miao</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            b.MiaoMiao();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;a;</span><br><span class="line">    <span class="comment">//模拟嵌套层级很深的场景，外部不能直接访问到jerry</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">D</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">F</span> &#123;</span></span><br><span class="line">                <span class="keyword">private</span>:</span><br><span class="line">                    <span class="comment">//jerry在很深的结构中</span></span><br><span class="line">                    Jerry jerry;</span><br><span class="line">            &#125;f;</span><br><span class="line">        &#125;e;</span><br><span class="line">    &#125;d;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//A间接调用tom的MiaoW，发出猫叫声</span></span><br><span class="line">    a.Miao();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下运行结果：</p><p><img src="/images/Qt4/run.png" alt="预览"></p><p>RunAway没有被直接调用，而是被自动触发。</p><p>分析：这里是以”mouse”这个字符串作为连接tom和jerry的关键。这只是一种简单、粗糙的示例实现。</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>在GOF四人帮的书籍《设计模式》中，有一种观察者模式，可以比较优雅地实现同样的功能。</p><p>(顺便说一下，GOF总结的设计模式一共有23种，涛哥曾经用C++11实现了全套的，github地址是:<a href="https://github.com/jaredtao/DesignPattern" target="_blank" rel="noopener">https://github.com/jaredtao/DesignPattern</a>)</p><p>初级的观察者模式，涛哥就不重复了。这里涛哥用C++11搭配一点模板技巧，实现一个更加通用的观察者模式。</p><p>也可以叫发布-订阅模式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Subject.hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Subject 事件或消息的主体。模板参数为观察者类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ObserverType&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//订阅</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">subscibe</span><span class="params">(ObserverType *obs)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> itor = <span class="built_in">std</span>::find(m_observerList.begin(), m_observerList.end(), obs);</span><br><span class="line">        <span class="keyword">if</span> (m_observerList.end() == itor) &#123;</span><br><span class="line">            m_observerList.push_back(obs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取消订阅</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unSubscibe</span><span class="params">(ObserverType *obs)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_observerList.erase(<span class="built_in">std</span>::remove(m_observerList.begin(), m_observerList.end(), obs));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发布。这里的模板参数为函数类型。</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> FuncType&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">publish</span><span class="params">(FuncType func)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> obs: m_observerList)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//调用回调函数，将obs作为第一个参数传递</span></span><br><span class="line">            func(obs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ObserverType *&gt; m_observerList;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Subject.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CatObserver 接口 猫的观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatObserver</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//猫叫事件</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onMiaow</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~CatObserver() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tom 继承于Subject模板类，模板参数为CatObserver。这样Tom就拥有了订阅、发布的功能。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tom</span> :</span> <span class="keyword">public</span> Subject&lt;CatObserver&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">miaoW</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"喵!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">//发布"猫叫"。</span></span><br><span class="line">        <span class="comment">//这里取CatObserver类的成员函数指针onMiaow。而成员函数指针调用时，要传递一个对象的this指针才行的。</span></span><br><span class="line">        <span class="comment">//所以用std::bind 和 std::placeholders::_1将第一个参数 绑定为 函数被调用时的第一个参数，也就是前面Subject::publish中的obs</span></span><br><span class="line">        publish(<span class="built_in">std</span>::bind(&amp;CatObserver::onMiaow, <span class="built_in">std</span>::placeholders::_1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Jerry 继承于 CatObserver</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jerry</span>:</span> <span class="keyword">public</span> CatObserver</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//重写“猫叫事件”</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onMiaow</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//发生 “猫叫”时 调用 逃跑</span></span><br><span class="line">        RunAway();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RunAway</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"那只猫又来了，快溜！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tom tom;</span><br><span class="line">    Jerry jerry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拿jerry去订阅Tom的 猫叫事件</span></span><br><span class="line">    tom.subscibe(&amp;jerry);</span><br><span class="line"></span><br><span class="line">    tom.miaoW();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任意类只要继承Subject模板类，提供观察者参数，就拥有了发布-订阅功能。</p><h2 id="Qt的信号-槽"><a href="#Qt的信号-槽" class="headerlink" title="Qt的信号-槽"></a>Qt的信号-槽</h2><h3 id="信号-槽简介"><a href="#信号-槽简介" class="headerlink" title="信号-槽简介"></a>信号-槽简介</h3><p>信号-槽 是Qt自定义的一种通信机制，它不同于标准C/C++ 语言。</p><p>信号-槽的使用方法，是在普通的函数声明之前，加上signal、slot标记，然后通过connect函数把信号与槽 连接起来。</p><p>后续只要调用 信号函数,就可以触发连接好的信号或槽函数。</p><p><img src="/images/Qt4/signals-slot.png" alt="预览"></p><p>连接的时候，前面的是发送者，后面的是接收者。信号与信号也可以连接，这种情况把接收者信号看做槽即可。</p><h3 id="信号-槽分两种"><a href="#信号-槽分两种" class="headerlink" title="信号-槽分两种"></a>信号-槽分两种</h3><p>信号-槽要分成两种来看待，一种是同一个线程内的信号-槽，另一种是跨线程的信号-槽。</p><p>同一个线程内的信号-槽，就相当于函数调用，和前面的观察者模式相似，只不过信号-槽稍微有些性能损耗(这个后面细说)。</p><p>跨线程的信号-槽，在信号触发时，发送者线程将槽函数的调用转化成了一次“调用事件”，放入事件循环中。</p><p>接收者线程执行到下一次事件处理时，处理“调用事件”，调用相应的函数。</p><p>(关于事件循环，可以参考专栏上一篇文章《Qt实用技能3-理解事件循环》)</p><h3 id="信号-槽的实现-元对象编译器moc"><a href="#信号-槽的实现-元对象编译器moc" class="headerlink" title="信号-槽的实现 元对象编译器moc"></a>信号-槽的实现 元对象编译器moc</h3><p>信号-槽的实现，借助一个工具：元对象编译器MOC(Meta Object Compiler)。</p><p>这个工具被集成在了Qt的编译工具链qmake中，在开始编译Qt工程时，会先去执行MOC，从代码中</p><p>解析signals、slot、emit等等这些标准C/C++不存在的关键字，以及处理Q_OBJECT、Q_PROPERTY、</p><p>Q_INVOKABLE等相关的宏，生成一个moc_xxx.cpp的C++文件。(使用黑魔法来变现语法糖)</p><p>比如信号函数只要声明、不需要自己写实现，就是在这个moc_xxx.cpp文件中，自动生成的。</p><p>MOC之后就是常规的C/C++编译、链接流程了。</p><h3 id="moc的本质-反射"><a href="#moc的本质-反射" class="headerlink" title="moc的本质-反射"></a>moc的本质-反射</h3><p>MOC的本质，其实是一个反射器。标准C++没有反射功能(将来会有)，所以Qt用moc实现了反射功能。</p><p>什么叫反射呢？ 简单来说，就是运行过程中，获取对象的构造函数、成员函数、成员变量。</p><p>举个例子来说明，有下面这样一个类声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tom</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Tom() &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> &amp; <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;name)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_name = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> m_name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类的使用者,看不到类的声明,头文件都拿不到,不能直接调用类的构造函数、成员函数。</p><p>从配置文件/网络拿到了一段字符串“Tom”，就要创建一个Tom类的对象实例。</p><p>然后又拿到一段“setName”的字符串，就要去调用Tom的setName函数。</p><p>面对这种需求，就需要把Tom类的构造函数、成员函数等信息存储起来，还要能够被调用到。</p><p>这些信息就是 “元信息”，使用者通过“元信息”就可以“使用这个类”。这便是反射了。</p><p>设计模式中的“工厂模式”，就是一个典型的反射案例。不过工厂模式只解决了构造函数的调用，没有成员函数、成员变量等信息。</p><p>反射包括 编译期静态反射 和 运行期动态反射。。。</p><p>文章有点长了，这次先到这里，剩下的下次再讨论。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] Qt帮助文档, 搜索关键词 Signals &amp; Slots<br>[2] IBM文档库 <a href="https://www.ibm.com/developerworks/cn/linux/guitoolkit/qt/signal-slot/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/guitoolkit/qt/signal-slot/index.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e7%ae%80%e4%bb%8b&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e7%8c%ab%e5%92%8c%e8%80%81%e9%bc%a0%e7%9a%84%e6%95%85%e4%ba%8b&quot;&gt;猫和老鼠的故事&lt;/a
      
    
    </summary>
    
      <category term="玩转Qt" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQt/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qt实用技能" scheme="https://jaredtao.github.io/tags/Qt%E5%AE%9E%E7%94%A8%E6%8A%80%E8%83%BD/"/>
    
      <category term="QtCreator" scheme="https://jaredtao.github.io/tags/QtCreator/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qt(5)-理解事件循环</title>
    <link href="https://jaredtao.github.io/2019/07/06/%E7%8E%A9%E8%BD%ACQt(5)-%E7%90%86%E8%A7%A3%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <id>https://jaredtao.github.io/2019/07/06/玩转Qt(5)-理解事件循环/</id>
    <published>2019-07-06T10:44:23.000Z</published>
    <updated>2020-12-25T10:06:08.979Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E4%BA%8B%E4%BB%B6%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">事件与事件循环</a><ul><li><a href="#Hello-World">Hello World</a></li><li><a href="#%E5%BE%AA%E7%8E%AF%E5%A4%84%E7%90%86">循环处理</a></li><li><a href="#%E7%B1%BB%E6%AF%94%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%9A%84%E6%A6%82%E5%BF%B5">类比事件循环的概念</a></li></ul></li><li><a href="#%E4%B8%8D%E5%90%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">不同操作系统的事件循环</a><ul><li><a href="#Windows">Windows</a></li><li><a href="#Linux-X11%E7%AA%97%E5%8F%A3">Linux X11窗口</a></li><li><a href="#MacOS-Cocoa-Application">MacOS Cocoa Application</a></li></ul></li><li><a href="#Qt%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">Qt的事件循环</a><ul><li><a href="#QEventLoop%E7%B1%BB">QEventLoop类</a></li><li><a href="#QCoreApplication-%E4%B8%BB%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">QCoreApplication 主事件循环</a></li></ul></li><li><a href="#Qt%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86">Qt的事件分发和事件处理</a><ul><li><a href="#%E9%87%8D%E8%BD%BD%E4%BA%8B%E4%BB%B6">重载事件</a></li><li><a href="#QEvent">QEvent</a></li><li><a href="#%E4%BA%8B%E4%BB%B6%E8%BF%87%E6%BB%A4%E5%99%A8">事件过滤器</a></li></ul></li><li><a href="#%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%9A%84%E8%BF%90%E7%94%A8">事件循环的运用</a><ul><li><a href="#processEvents%E4%B8%8D%E9%98%BB%E5%A1%9EUI">processEvents不阻塞UI</a></li><li><a href="#QEventLoop%E6%A8%A1%E6%8B%9F%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8">QEventLoop模拟同步调用</a></li></ul></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这次讨论事件循环相关的知识点。</p><h2 id="事件与事件循环"><a href="#事件与事件循环" class="headerlink" title="事件与事件循环"></a>事件与事件循环</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>从Hello World说起吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一段大家都很熟悉的命令行程序，运行起来会在终端输出”Hello World”，之后程序就退出了。</p><h3 id="循环处理"><a href="#循环处理" class="headerlink" title="循环处理"></a>循环处理</h3><p>我们稍微加点需求: 程序能够一直运行，每次用户输入一些信息并按下回车时，打印出用户的输入。直到输入的内容为“quit”时才退出。</p><p>按照这个需求，代码实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> input[<span class="number">1024</span>];   <span class="comment">//假设输入长度不超过1024</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> quitStr[] = <span class="string">"quit"</span>;</span><br><span class="line">    <span class="keyword">bool</span> quit = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">false</span> == quit) &#123;</span><br><span class="line">        scanf_s(<span class="string">"%s"</span>, input, <span class="keyword">sizeof</span> input);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"user input: %s\n"</span>, input);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">memcmp</span>(input, quitStr, <span class="keyword">sizeof</span> quitStr)) &#123;</span><br><span class="line">            quit = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用了一个while循环。在这个循环体内，不停地处理用户的输入。当输入的内容为”quit”时，循环终止条件被设置为true，循环将终止。</p><h3 id="类比事件循环的概念"><a href="#类比事件循环的概念" class="headerlink" title="类比事件循环的概念"></a>类比事件循环的概念</h3><p>在上面这个例子中，“用户输入并按下回车”这件事情，我们可以称作一个“事件”或者“用户输入事件”，不停的去处理“事件”的这段代码，</p><p>我们可以称作“事件循环”, 也可以叫做”消息循环”，是一回事。</p><p>一般对于带UI窗口的程序来说，“事件”是由操作系统或程序框架在不同的时刻发出的。</p><p>当用户按下鼠标、敲下键盘，或者是窗口需要重新绘制的时候，计时器触发的时候，都会发出一个相应的事件。</p><p>我们把“事件循环”的代码 提炼/抽象 如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    initialize();</span><br><span class="line">    <span class="keyword">bool</span> shouldQuit = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">false</span> == shouldQuit)</span><br><span class="line">    &#123;</span><br><span class="line">        var message = get_next_message();</span><br><span class="line">        process_message(message);</span><br><span class="line">        <span class="keyword">if</span> (message == QUIT) </span><br><span class="line">        &#123;</span><br><span class="line">            shouldQuit = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在事件循环中, 不停地去获取下一个事件，然后做出处理。直到quit事件发生，循环结束。</p><p>有“取事件”的过程，那么自然有“存储事件”的地方，要么是操作系统存储，要么是软件框架存储。</p><p>存储事件的地方，我们称作 “事件队列” Event Queue</p><p>处理事件，我们也称作 “事件分发” Event Dispatch</p><h2 id="不同操作系统的事件循环"><a href="#不同操作系统的事件循环" class="headerlink" title="不同操作系统的事件循环"></a>不同操作系统的事件循环</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>先来看一个Windows系统的事件循环示例(win32 API)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MSG msg = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> done = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">bool</span> result = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!done)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (PeekMessage(&amp;msg, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, PM_REMOVE))</span><br><span class="line">    &#123;</span><br><span class="line">        TranslateMessage(&amp;msg);</span><br><span class="line">        DispatchMessage(&amp;msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (msg.message == WM_QUIT)</span><br><span class="line">    &#123;</span><br><span class="line">        done = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路和前面介绍的一致</p><h3 id="Linux-X11窗口"><a href="#Linux-X11窗口" class="headerlink" title="Linux X11窗口"></a>Linux X11窗口</h3><p>有些linux系统使用X11窗口系统，看看其窗口事件循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Atom wmDeleteMessage = XInternAtom(mDisplay, <span class="string">"WM_DELETE_WINDOW"</span>, False);</span><br><span class="line">XSetWMProtocols(display, window, &amp;wmDeleteMessage, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">XEvent event;</span><br><span class="line"><span class="keyword">bool</span> running = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (running)</span><br><span class="line">&#123;</span><br><span class="line">    XNextEvent(display, &amp;event);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> Expose:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Expose\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> ClientMessage:</span><br><span class="line">            <span class="keyword">if</span> (event.xclient.data.l[<span class="number">0</span>] == wmDeleteMessage)</span><br><span class="line">                running = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路也是和前面一致的</p><h3 id="MacOS-Cocoa-Application"><a href="#MacOS-Cocoa-Application" class="headerlink" title="MacOS Cocoa Application"></a>MacOS Cocoa Application</h3><p>在Cocoa Application中, 有一种获取事件的机制，叫做runloop(一个NSRunLoop对象,它允许进程接收窗口服务的各种事件)</p><p>一般的Cocoa Application运行流程是，从runloop的事件队列中获取一个事件(NSEvent)</p><p>派发事件(NSEvent)到合适的对象(Object)</p><p>事件被处理完成后,再取下一个事件(NSEvent),直到应用退出.</p><p>思路也是和前面一致的。</p><h2 id="Qt的事件循环"><a href="#Qt的事件循环" class="headerlink" title="Qt的事件循环"></a>Qt的事件循环</h2><p>Qt作为一个跨平台的UI框架，其事件循环实现原理, 就是把不同平台的事件循环进行了封装，并提供统一的抽象接口。</p><p>和Qt做了类似工作的，还有glfw、SDL等等很多开源库。</p><h3 id="QEventLoop类"><a href="#QEventLoop类" class="headerlink" title="QEventLoop类"></a>QEventLoop类</h3><p>QEventLoop即Qt中的事件循环类，主要接口如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exec</span><span class="params">(QEventLoop::ProcessEventsFlags flags = AllEvents)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> returnCode = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isRunning</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">processEvents</span><span class="params">(QEventLoop::ProcessEventsFlags flags = AllEvents)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processEvents</span><span class="params">(QEventLoop::ProcessEventsFlags flags, <span class="keyword">int</span> maxTime)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wakeUp</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>其中exec是启动事件循环，调用exec以后，调用exec的函数就会被“阻塞”，直到EventLoop里面的while循环结束。</p><p>这里画个简单的示意图:</p><p><img src="/images/Qt3/1.png" alt="预览"></p><p>exit是退出事件循环(将EventLoop中的退出标识设为true)</p><p>processEvents是及时处理队列中的事件(这个很有用，后面还会讲)。</p><p>这里有个问题，exec阻塞了当前函数，还怎么退出EventLoop呢？</p><p>答案是：在派发事件后，某个事件处理的函数中，达到事件退出条件时，调用exit函数，将EventLoop中的退出标识设为true。</p><p><img src="/images/Qt3/2.png" alt="预览"></p><p>这样的程序运行流程，我们叫做 “事件驱动”式的程序。</p><h3 id="QCoreApplication-主事件循环"><a href="#QCoreApplication-主事件循环" class="headerlink" title="QCoreApplication 主事件循环"></a>QCoreApplication 主事件循环</h3><p>一般的Qt程序，main函数中都有一个QCoreApplication/QGuiApplication/QApplication，并在末尾调用 exec。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QCoreApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">//或者QGuiApplication， 或者 QApplication</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Application类中，除去启动参数、版本等相关东西后，关键就是维护了一个QEventLoop，Application的exec就是QEventLoop的exec。</p><p>不过Application中的这个EventLoop，我们称作“主事件循环”Main EventLoop。</p><p>所有的事件分发、事件处理都从这里开始。</p><p>Application还提供了sendEvent和poseEvent两个函数，分别用来发送事件。</p><p>sendEvent发出的事件会立即被处理，也就是“同步”执行。</p><p>postEvent发送的事件会被加入事件队列，在下一轮事件循环时才处理，也就是“异步”执行。</p><p>还有一个特殊的sendPostedEvents，是将已经加入队列中的准备异步执行的事件立即同步执行。</p><h2 id="Qt的事件分发和事件处理"><a href="#Qt的事件分发和事件处理" class="headerlink" title="Qt的事件分发和事件处理"></a>Qt的事件分发和事件处理</h2><p>以QWidget为例来说明。</p><p>QWidget是Widget框架中，大部分UI组件的基类。QWidget类拥有一些名字为xxxEvent的虚函数,比如：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">keyPressEvent</span>(<span class="params">QKeyEvent *<span class="keyword">event</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">keyReleaseEvent</span>(<span class="params">QKeyEvent *<span class="keyword">event</span></span>)</span></span><br></pre></td></tr></table></figure><p>keyPressEvent就表示按键按下时的处理，keyReleaseEvent表示按键松开时的处理。</p><p>主事件循环中(注册过QWidget类之后)，事件分发会在按键按下时调用QWidget的keyPressEvent函数，按键松开时调用QWidget的keyReleaseEvent函数。</p><h3 id="重载事件"><a href="#重载事件" class="headerlink" title="重载事件"></a>重载事件</h3><p>有了上面的事件处理机制，我们就可以在自己的QWidget子类中，通过重载keyPressEvent、keyReleaseEvent等等事件处理函数，做一些自定义的事件处理。</p><h3 id="QEvent"><a href="#QEvent" class="headerlink" title="QEvent"></a>QEvent</h3><p>每一个事件处理函数，都是带有参数的，这个参数是QEvent的子类，携带了各种事件的参数。比如</p><p>按键事件 void keyPressEvent(QKeyEvent *event) 中的QKeyEvent, 就包括了按下的按键值key、 count等等。</p><h3 id="事件过滤器"><a href="#事件过滤器" class="headerlink" title="事件过滤器"></a>事件过滤器</h3><p>Qt还提供了事件过滤机制，在事件分发之前先过滤一部分事件。</p><p>用法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyPressEater</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">eventFilter</span><span class="params">(QObject *obj, QEvent *event)</span> override</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> KeyPressEater::eventFilter(QObject *obj, QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (event-&gt;type() == QEvent::KeyPress) &#123;</span><br><span class="line">        QKeyEvent *keyEvent = <span class="keyword">static_cast</span>&lt;QKeyEvent *&gt;(event);</span><br><span class="line">        qDebug(<span class="string">"Ate key press %d"</span>, keyEvent-&gt;key());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// standard event processing</span></span><br><span class="line">        <span class="keyword">return</span> QObject::eventFilter(obj, event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">。。。</span><br><span class="line"></span><br><span class="line"> monitoredObj-&gt;installEventFilter(filterObj);</span><br></pre></td></tr></table></figure><p>自定义一个QObject子类，重载eventFilter函数。之后在要过滤的QObject对象上，调用installEventFilter函数以安装过滤器上去。</p><p>过滤器函数的返回值为bool，true表示这个事件被过滤掉了，不用再往下分发了。false表示没有过滤。</p><h2 id="事件循环的运用"><a href="#事件循环的运用" class="headerlink" title="事件循环的运用"></a>事件循环的运用</h2><h3 id="processEvents不阻塞UI"><a href="#processEvents不阻塞UI" class="headerlink" title="processEvents不阻塞UI"></a>processEvents不阻塞UI</h3><p>我们的UI界面，要持续不断地刷新（对于QWidget就是触发paintEvent事件），以保证显示流畅、能及时响应用户输入。</p><p>一般要有一个良好的帧率，比如每秒刷新60帧, 即经常说的FPS 60， 换算一下 1000 ms/ 60 ≈ 16 ms,也就是每隔16毫秒刷新一次。</p><p>而我们有时候又需要做一些复杂的计算，这些计算的耗时远远超过了16毫秒。</p><p>在没有计算完成之前，函数不会退出（相当于阻塞），事件循环得不到及时处理，就会发生UI卡住的现象。</p><p>这种场景下，就可以使用Qt为我们提供的接口，立即处理一次事件循环，来保证UI的流畅</p><p>(后续再讨论多线程)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//耗时操作</span></span><br><span class="line">someWork1()</span><br><span class="line"><span class="comment">//适当的位置，插入一个processEvents,保证事件循环被处理</span></span><br><span class="line">QCoreApplication::processEvents();</span><br><span class="line"></span><br><span class="line"><span class="comment">//耗时操作</span></span><br><span class="line">someWork2()</span><br></pre></td></tr></table></figure><h3 id="QEventLoop模拟同步调用"><a href="#QEventLoop模拟同步调用" class="headerlink" title="QEventLoop模拟同步调用"></a>QEventLoop模拟同步调用</h3><p>经常会有这种场景： “触发 ”了某项操作，必须等该操作完成后才能进行“ 下一步 ”</p><p>比如：软件的登录界面，向服务器发起登录请求后，必须等收到服务器返回的登录数据，才知道登录结果并决定下一步如何执行。</p><p>这种场景，如果设计成异步调用，直接用Qt的信号/槽即可，如果要设计成同步调用，就可以使用本地QEventLoop</p><p>这里写段伪代码示例一下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">login</span><span class="params">(<span class="keyword">const</span> QString &amp;userName, <span class="keyword">const</span> QString &amp;passwdHash, <span class="keyword">const</span> QString &amp;slat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//声明本地EventLoop</span></span><br><span class="line">    QEventLoop loop;</span><br><span class="line">    <span class="keyword">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//先连接好信号</span></span><br><span class="line">    connect(&amp;network, &amp;Network::result, [&amp;](<span class="keyword">bool</span> r, <span class="keyword">const</span> QString &amp;info)&#123;</span><br><span class="line">        result = r;</span><br><span class="line">        qDebug() &lt;&lt; info;</span><br><span class="line">        <span class="comment">//槽中退出事件循环</span></span><br><span class="line">        loop.quit();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//发起登录请求</span></span><br><span class="line">    sendLoginRequest(userName, passwdHash, slat);</span><br><span class="line">    <span class="comment">//启动事件循环。阻塞当前函数调用，但是事件循环还能运行。</span></span><br><span class="line">    <span class="comment">//这里不会再往下运行，直到前面的槽中，调用loop.quit之后，才会继续往下走</span></span><br><span class="line">    loop.exec();</span><br><span class="line">    <span class="comment">//返回result。loop退出之前，result中的值已经被更新了。</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%AE%80%E4%BB%8B&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BA%8B%E4%BB%B6%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF&quot;&gt;事件与事件循环&lt;/a
      
    
    </summary>
    
      <category term="玩转Qt" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQt/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qt实用技能" scheme="https://jaredtao.github.io/tags/Qt%E5%AE%9E%E7%94%A8%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qml(16)-移植ShaderToy</title>
    <link href="https://jaredtao.github.io/2019/07/04/%E7%8E%A9%E8%BD%ACQml(16)-%E7%A7%BB%E6%A4%8DShaderToy/"/>
    <id>https://jaredtao.github.io/2019/07/04/玩转Qml(16)-移植ShaderToy/</id>
    <published>2019-07-04T05:44:23.000Z</published>
    <updated>2020-11-10T04:11:32.856Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#简介">简介</a></li><li><a href="#源码">源码</a></li><li><a href="#效果预览">效果预览</a><ul><li><a href="#穿云洞">穿云洞</a></li><li><a href="#星球之光">星球之光</a></li><li><a href="#蜗牛">蜗牛</a></li><li><a href="#超级马里奥">超级马里奥</a></li></ul></li><li><a href="#关于shadertoy">关于ShaderToy</a></li><li><a href="#关于shadereffect">关于ShaderEffect</a></li><li><a href="#shadertoy原理">ShaderToy原理</a><ul><li><a href="#约定的变量">约定的变量</a></li><li><a href="#glsl版本号">glsl版本号</a></li><li><a href="#glsl版本兼容">glsl版本兼容</a></li><li><a href="#shadertoy适配">ShaderToy适配</a></li></ul></li><li><a href="#taoshadertoy">TaoShaderToy</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这次涛哥将会教大家移植ShaderToy的特效到Qml</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>《玩转Qml》系列文章，配套了一个优秀的开源项目:TaoQuick</p><p>github <a href="https://github.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://github.com/jaredtao/TaoQuick</a></p><p>访问不了或者速度太慢，可以用国内的镜像网站gitee</p><p><a href="https://gitee.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://gitee.com/jaredtao/TaoQuick</a></p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>先看几个效果图</p><h3 id="穿云洞"><a href="#穿云洞" class="headerlink" title="穿云洞"></a>穿云洞</h3><p><img src="/images/ShaderToy/Preview1.gif" alt=""></p><h3 id="星球之光"><a href="#星球之光" class="headerlink" title="星球之光"></a>星球之光</h3><p><img src="/images/ShaderToy/Preview2.gif" alt=""></p><h3 id="蜗牛"><a href="#蜗牛" class="headerlink" title="蜗牛"></a>蜗牛</h3><p><img src="/images/ShaderToy/Preview3.gif" alt=""></p><h3 id="超级马里奥"><a href="#超级马里奥" class="headerlink" title="超级马里奥"></a>超级马里奥</h3><p><img src="/images/ShaderToy/Preview4.gif" alt=""></p><p>gif录制质量较低，可编译运行TaoQuick源码或使用涛哥打包好的可执行程序，查看实际运行效果。</p><p>可执行程序下载链接(包括windows 和 MacOS平台) <a href="https://github.com/jaredtao/TaoQuick/releases" target="_blank" rel="noopener">https://github.com/jaredtao/TaoQuick/releases</a>  </p><h2 id="关于ShaderToy"><a href="#关于ShaderToy" class="headerlink" title="关于ShaderToy"></a>关于ShaderToy</h2><p>学习过计算机图形学的人，都应该知道大名鼎鼎的ShaderToy网站 </p><p>用一些Shader代码和简单的纹理，就可以输出各种酷炫的图形效果和音频效果。</p><p>如果你还不知道，赶紧去看看吧<a href="https://www.shadertoy.com" target="_blank" rel="noopener">https://www.shadertoy.com</a></p><p>顺便提一下，该网站的作者是IQ大神，这里有他的博客：</p><p><a href="http://www.iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm" target="_blank" rel="noopener">http://www.iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm</a></p><p>本文主要讨论图形效果，音频效果以后再实现。</p><h2 id="关于ShaderEffect"><a href="#关于ShaderEffect" class="headerlink" title="关于ShaderEffect"></a>关于ShaderEffect</h2><p>Qml中实现ShaderToy，最快的途径就是ShaderEffect了。</p><p>上一篇文章《Qml特效-着色器效果ShaderEffect》已经介绍过ShaderEffect了, 本文重点是移植ShaderToy。</p><p>在涛哥写这篇文章之前，已经有两位前辈做过相关的研究。</p><p>陈锦明： <a href="https://zhuanlan.zhihu.com/p/38942460" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38942460</a></p><p>qyvlik: <a href="https://zhuanlan.zhihu.com/p/44417680" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/44417680</a></p><p>涛哥参考了他们的实现，做了一些改进、完善。</p><p>在此感谢两位前辈。</p><p>下面正文开始</p><h2 id="ShaderToy原理"><a href="#ShaderToy原理" class="headerlink" title="ShaderToy原理"></a>ShaderToy原理</h2><p>OpenGL的可编程渲染管线中，着色器代码是可以动态编译、加载到GPU运行的。</p><p>而OpenGL又包括了桌面版(OpenGL Desktop)、嵌入式版(OpenGL ES)以及网页版(WebGL)</p><p>ShaderToy网站是以WebGL 2.0为基础，提供内置函数、变量，并约定了一些输入变量，由用户按照约定编写着色器代码。</p><p>只要不是太老的OpenGL版本，内置函数、变量基本都是通用的。</p><h3 id="约定的变量"><a href="#约定的变量" class="headerlink" title="约定的变量"></a>约定的变量</h3><p>ShaderToy网站约定的变量如下：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">vec3</span>        iResolution             image/<span class="keyword">buffer</span>        The viewport resolution (z is pixel aspect ratio, usually <span class="number">1.0</span>)</span><br><span class="line"><span class="type">float</span>       iTime                   image/sound/<span class="keyword">buffer</span>Current time <span class="keyword">in</span> seconds</span><br><span class="line"><span class="type">float</span>       iTimeDelta              image/<span class="keyword">buffer</span>        Time it takes to render a frame, <span class="keyword">in</span> seconds</span><br><span class="line"><span class="type">int</span>         iFrame                  image/<span class="keyword">buffer</span>        Current frame</span><br><span class="line"><span class="type">float</span>       iFrameRate              image/<span class="keyword">buffer</span>        Number of frames rendered per second</span><br><span class="line"><span class="type">float</span>       iChannelTime[<span class="number">4</span>]         image/<span class="keyword">buffer</span>        Time <span class="keyword">for</span> channel (<span class="keyword">if</span> video or sound), <span class="keyword">in</span> seconds</span><br><span class="line"><span class="type">vec3</span>        iChannelResolution[<span class="number">4</span>]image/<span class="keyword">buffer</span>/soundInput <span class="built_in">texture</span> resolution <span class="keyword">for</span> each channel</span><br><span class="line"><span class="type">vec4</span>        iMouse                  image/<span class="keyword">buffer</span>        xy = current pixel coords (<span class="keyword">if</span> LMB is down). zw = click pixel</span><br><span class="line"><span class="type">sampler2D</span>iChannel&#123;i&#125;             image/<span class="keyword">buffer</span>/soundSampler <span class="keyword">for</span> input textures i</span><br><span class="line"><span class="type">vec4</span>        iDate                   image/<span class="keyword">buffer</span>/soundYear, month, day, time <span class="keyword">in</span> seconds <span class="keyword">in</span> .xyzw</span><br><span class="line"><span class="type">float</span>       iSampleRate             image/<span class="keyword">buffer</span>/soundThe sound <span class="keyword">sample</span> rate (typically <span class="number">44100</span>)</span><br></pre></td></tr></table></figure><p>Qml中的相应实现</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ShaderEffect</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> shader</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//properties for shader</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//not pass to shader</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> vector3d defaultResolution</span>: Qt.vector3d(shader.width, shader.height, shader.width / shader.height)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calcResolution</span>(<span class="params">channel</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (channel) &#123;</span><br><span class="line">            <span class="keyword">return</span> Qt.vector3d(channel.width, channel.height, channel.width / channel.height);</span><br><span class="line">        &#125; <span class="title">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defaultResolution;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//pass</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> vector3d  iResolution</span>: defaultResolution</span><br><span class="line">    <span class="keyword">property</span><span class="string"> real       iTime</span>: <span class="number">0</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> real       iTimeDelta</span>: <span class="number">100</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> int        iFrame</span>: <span class="number">10</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> real       iFrameRate</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> vector4d   iMouse</span>;</span><br><span class="line">    <span class="keyword">property</span><span class="string"> var iChannel0</span>; <span class="comment">//only Image or ShaderEffectSource</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> var iChannel1</span>; <span class="comment">//only Image or ShaderEffectSource</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> var iChannel2</span>; <span class="comment">//only Image or ShaderEffectSource</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> var iChannel3</span>; <span class="comment">//only Image or ShaderEffectSource</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> var        iChannelTime</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">property</span><span class="string"> var        iChannelResolution</span>: [calcResolution(iChannel0), calcResolution(iChannel1), calcResolution(iChannel2), calcResolution(iChannel3)]</span><br><span class="line">    <span class="keyword">property</span><span class="string"> vector4d   iDate</span>;</span><br><span class="line">    <span class="keyword">property</span><span class="string"> real       iSampleRate</span>: <span class="number">44100</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中时间、日期通过Timer刷新，鼠标位置用MouseArea刷新。</p><p>同时涛哥导出了hoverEnabled、running属性和restart函数，以方便Qml中控制Shader的运行。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ShaderEffect</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> shader</span></span><br><span class="line">...</span><br><span class="line">    <span class="comment">//properties for Qml controller</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> alias hoverEnabled</span>: mouse.hoverEnabled</span><br><span class="line">    <span class="keyword">property</span><span class="string"> bool running</span>: <span class="literal">true</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">restart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        shader.iTime = <span class="number">0</span></span><br><span class="line">        running = <span class="literal">true</span></span><br><span class="line">        timer1.restart()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">Timer</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> timer1</span></span><br><span class="line">        <span class="attribute">running</span>: shader.running</span><br><span class="line">        <span class="attribute">triggeredOnStart</span>: <span class="literal">true</span></span><br><span class="line">        <span class="attribute">interval</span>: <span class="number">16</span></span><br><span class="line">        <span class="attribute">repeat</span>: <span class="literal">true</span></span><br><span class="line">        <span class="attribute">onTriggered</span>: &#123;</span><br><span class="line">            shader.iTime += <span class="number">0.016</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">Timer</span> &#123;</span><br><span class="line">        <span class="attribute">running</span>: shader.running</span><br><span class="line">        <span class="attribute">interval</span>: <span class="number">1000</span></span><br><span class="line">        <span class="attribute">onTriggered</span>: &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="built_in">date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            shader.iDate.x = <span class="built_in">date</span>.getFullYear();</span><br><span class="line">            shader.iDate.y = <span class="built_in">date</span>.getMonth();</span><br><span class="line">            shader.iDate.z = <span class="built_in">date</span>.getDay();</span><br><span class="line">            shader.iDate.w = <span class="built_in">date</span>.getSeconds()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">MouseArea</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> mouse</span></span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">onPositionChanged</span>: &#123;</span><br><span class="line">            shader.iMouse.x = mouseX</span><br><span class="line">            shader.iMouse.y = mouseY</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">onClicked</span>: &#123;</span><br><span class="line">            shader.iMouse.z = mouseX</span><br><span class="line">            shader.iMouse.w = mouseY</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="glsl版本号"><a href="#glsl版本号" class="headerlink" title="glsl版本号"></a>glsl版本号</h3><p>GLSL Versions</p><table><thead><tr><th>OpenGL Version</th><th>GLSL Version</th></tr></thead><tbody><tr><td>2.0</td><td>110</td></tr><tr><td>2.1</td><td>120</td></tr><tr><td>3.0</td><td>130</td></tr><tr><td>3.1</td><td>140</td></tr><tr><td>3.2</td><td>150</td></tr><tr><td>3.3</td><td>330</td></tr><tr><td>4.0</td><td>400</td></tr><tr><td>4.1</td><td>410</td></tr><tr><td>4.2</td><td>420</td></tr><tr><td>4.3</td><td>430</td></tr></tbody></table><p>GLSL ES Versions (Android, iOS, WebGL)</p><table><thead><tr><th>OpenGL ES Version</th><th>GLSL ES Version</th></tr></thead><tbody><tr><td>2.0</td><td>100</td></tr><tr><td>3.0</td><td>300</td></tr></tbody></table><h3 id="glsl版本兼容"><a href="#glsl版本兼容" class="headerlink" title="glsl版本兼容"></a>glsl版本兼容</h3><p>ShaderToy限定了WebGL 2.0，而我们移植到Qml中，自然是希望能够在所有可以运行Qml的设备上运行ShaderToy效果。</p><p>所以要做一些glsl版本相关的处理。</p><p>涛哥研究了Qt的GraphicsEffects模块源码，它的版本处理要么默认，要么 150 core，显然是不够用的。</p><p>glsl各个版本的差异，可以参考这里 <a href="https://github.com/mattdesl/lwjgl-basics/wiki/glsl-versions" target="_blank" rel="noopener">https://github.com/mattdesl/lwjgl-basics/wiki/glsl-versions</a></p><p>涛哥总结出了如下的代码和注释说明：</p><p>注意”#version  xxx”必须是着色器的第一行，不能换行</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    <span class="comment">// 如果环境是OpenGL ES2，默认的version是 version 110, 不需要写出来。</span></span><br><span class="line">    <span class="comment">// 比ES2更老的版本是ES 1.0 和 ES 1.1, 这种古董设备，建议还是不要玩Shader了吧。</span></span><br><span class="line">    <span class="comment">// ES2没有texture函数，要用旧的texture2D代替</span></span><br><span class="line">    <span class="comment">// 精度限定要写成float</span></span><br><span class="line"></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string gles2Ver</span>: <span class="string">"</span></span><br><span class="line"><span class="string">#define texture texture2D</span></span><br><span class="line"><span class="string">precision mediump float;</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    <span class="comment">// 如果环境是OpenGL ES3，version是 version 300 es</span></span><br><span class="line">    <span class="comment">// ES 3.1 ES 3.2也可以。</span></span><br><span class="line">    <span class="comment">// ES3可以用in out 关键字，gl_FragColor也可以用out fragColor取代</span></span><br><span class="line">    <span class="comment">// 精度限定要写成float</span></span><br><span class="line"></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string gles3Ver</span>: <span class="string">"#version 300 es</span></span><br><span class="line"><span class="string">#define varying in</span></span><br><span class="line"><span class="string">#define gl_FragColor fragColor</span></span><br><span class="line"><span class="string">precision mediump float;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">out vec4 fragColor;</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    <span class="comment">// 如果环境是OpenGL Desktop 3.x，version这里参考Qt默认的version 150。大部分Desktop设备应该</span></span><br><span class="line">    <span class="comment">// 都是150, 即3.2版本，第一个区分Core和Compatibility的版本。</span></span><br><span class="line">    <span class="comment">// Core是核心模式，只有核心api以减轻负担。相应的Compatibility是兼容模式，保留全部API以兼容低版本。</span></span><br><span class="line">    <span class="comment">// Desktop 3.x 可以用in out 关键字，gl_FragColor也可以用out fragColor取代</span></span><br><span class="line">    <span class="comment">// 精度限定抹掉，用默认的。不抹掉有些情况下会报错，不能通用。</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string gl3Ver</span>: <span class="string">"#version 150</span></span><br><span class="line"><span class="string">#define varying in</span></span><br><span class="line"><span class="string">#define gl_FragColor fragColor</span></span><br><span class="line"><span class="string">#define lowp</span></span><br><span class="line"><span class="string">#define mediump</span></span><br><span class="line"><span class="string">#define highp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">out vec4 fragColor;</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    <span class="comment">// 如果环境是OpenGL Desktop 2.x，version这里就用2.0的version 110，即2.0版本</span></span><br><span class="line">    <span class="comment">// 2.x 没有texture函数，要用旧的texture2D代替</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string gl2Ver</span>: <span class="string">"#version 110</span></span><br><span class="line"><span class="string">#define texture texture2D</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> string versionString</span>: &#123;</span><br><span class="line">        <span class="keyword">if</span> (Qt.platform.os === <span class="string">"android"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (GraphicsInfo.majorVersion === <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"android gles 3"</span>)</span><br><span class="line">                <span class="keyword">return</span> gles3Ver</span><br><span class="line">            &#125; <span class="title">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"android gles 2"</span>)</span><br><span class="line">                <span class="keyword">return</span> gles2Ver</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="title">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (GraphicsInfo.majorVersion === <span class="number">3</span> ||GraphicsInfo.majorVersion === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> gl3Ver</span><br><span class="line">            &#125; <span class="title">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> gl2Ver</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string forwardString</span>: versionString + <span class="string">"</span></span><br><span class="line"><span class="string">        varying vec2 qt_TexCoord0;</span></span><br><span class="line"><span class="string">        varying vec4 vertex;</span></span><br><span class="line"><span class="string">        uniform lowp   float qt_Opacity;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        uniform vec3   iResolution;</span></span><br><span class="line"><span class="string">        uniform float  iTime;</span></span><br><span class="line"><span class="string">        uniform float  iTimeDelta;</span></span><br><span class="line"><span class="string">        uniform int    iFrame;</span></span><br><span class="line"><span class="string">        uniform float  iFrameRate;</span></span><br><span class="line"><span class="string">        uniform float  iChannelTime[4];</span></span><br><span class="line"><span class="string">        uniform vec3   iChannelResolution[4];</span></span><br><span class="line"><span class="string">        uniform vec4   iMouse;</span></span><br><span class="line"><span class="string">        uniform vec4    iDate;</span></span><br><span class="line"><span class="string">        uniform float   iSampleRate;</span></span><br><span class="line"><span class="string">        uniform sampler2D   iChannel0;</span></span><br><span class="line"><span class="string">        uniform sampler2D   iChannel1;</span></span><br><span class="line"><span class="string">        uniform sampler2D   iChannel2;</span></span><br><span class="line"><span class="string">        uniform sampler2D   iChannel3;</span></span><br><span class="line"><span class="string">    "</span></span><br></pre></td></tr></table></figure><p>versionString 这里，主要测试了Desktop和 android设备，Desktop只要显卡不太搓，都能运行的。</p><p>Android ES3的也是全部支持，ES2的部分不能运行，比如iq大神的蜗牛Shader，使用了textureLod等一系列内置函数，就不能在ES2上面跑。</p><h3 id="ShaderToy适配"><a href="#ShaderToy适配" class="headerlink" title="ShaderToy适配"></a>ShaderToy适配</h3><p>本来是不需要写顶点着色器的。如果我们想把ShaderToy做成一个任意坐标开始的Item来用，就需要适配一下坐标。</p><p>涛哥写的顶点着色器如下，仅在默认着色器的基础上，传递qt_Vertex给下一阶段的vertex</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">vertexShader</span>: <span class="string">"</span></span><br><span class="line"><span class="string">          uniform mat4 qt_Matrix;</span></span><br><span class="line"><span class="string">          attribute vec4 qt_Vertex;</span></span><br><span class="line"><span class="string">          attribute vec2 qt_MultiTexCoord0;</span></span><br><span class="line"><span class="string">          varying vec2 qt_TexCoord0;</span></span><br><span class="line"><span class="string">          varying vec4 vertex;</span></span><br><span class="line"><span class="string">          void main() &#123;</span></span><br><span class="line"><span class="string">              vertex = qt_Vertex;</span></span><br><span class="line"><span class="string">              gl_Position = qt_Matrix * vertex;</span></span><br><span class="line"><span class="string">              qt_TexCoord0 = qt_MultiTexCoord0;</span></span><br><span class="line"><span class="string">          &#125;"</span></span><br></pre></td></tr></table></figure><p>片段着色器这里处理一下，适配出一个符合shaderToy的mainImage作为入口函数</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">readonly <span class="keyword">property</span><span class="string"> string startCode</span>: <span class="string">"</span></span><br><span class="line"><span class="string">    void main(void)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        mainImage(gl_FragColor, vec2(vertex.x, iResolution.y - vertex.y));</span></span><br><span class="line"><span class="string">    &#125;"</span></span><br><span class="line">readonly <span class="keyword">property</span><span class="string"> string defaultPixelShader</span>: <span class="string">"</span></span><br><span class="line"><span class="string">    void mainImage(out vec4 fragColor, in vec2 fragCoord)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        fragColor = vec4(fragCoord, fragCoord.x, fragCoord.y);</span></span><br><span class="line"><span class="string">    &#125;"</span></span><br><span class="line"><span class="keyword">property</span><span class="string"> string pixelShader</span>: <span class="string">""</span></span><br><span class="line"><span class="attribute">fragmentShader</span>: forwardString + (pixelShader ? <span class="attribute">pixelShader</span> : defaultPixelShader) + startCode</span><br></pre></td></tr></table></figure><p>稍微说明一下，qyvlik大佬的Shader使用gl_FragCoord作为片段坐标传进去了，这种用法的ShaderToy坐标将会占据整个Qml的窗口，</p><p>而实际ShaderToy坐标不是整个窗口的时候，超出去的地方就会被切掉，显示出来的只有一小部分。</p><p>涛哥研究了一番后，顶点着色器把vertex传过来，vertex.x就是x坐标，vertex.y坐标从上到下是0 - height，而gl_FragCoord 从下到上是0 - height，</p><p>所以要翻一下。</p><h2 id="TaoShaderToy"><a href="#TaoShaderToy" class="headerlink" title="TaoShaderToy"></a>TaoShaderToy</h2><p>最后，看一下代码的全貌吧</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TaoShaderToy.qml</span></span><br><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.12</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">vec3        iResolution             image/buffer        The viewport resolution (z is pixel aspect ratio, usually 1.0)</span></span><br><span class="line"><span class="comment">float       iTime                   image/sound/bufferCurrent time in seconds</span></span><br><span class="line"><span class="comment">float       iTimeDelta              image/buffer        Time it takes to render a frame, in seconds</span></span><br><span class="line"><span class="comment">int         iFrame                  image/buffer        Current frame</span></span><br><span class="line"><span class="comment">float       iFrameRate              image/buffer        Number of frames rendered per second</span></span><br><span class="line"><span class="comment">float       iChannelTime[4]         image/buffer        Time for channel (if video or sound), in seconds</span></span><br><span class="line"><span class="comment">vec3        iChannelResolution[4]image/buffer/soundInput texture resolution for each channel</span></span><br><span class="line"><span class="comment">vec4        iMouse                  image/buffer        xy = current pixel coords (if LMB is down). zw = click pixel</span></span><br><span class="line"><span class="comment">sampler2DiChannel&#123;i&#125;             image/buffer/soundSampler for input textures i</span></span><br><span class="line"><span class="comment">vec4        iDate                   image/buffer/soundYear, month, day, time in seconds in .xyzw</span></span><br><span class="line"><span class="comment">float       iSampleRate             image/buffer/soundThe sound sample rate (typically 44100)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title">ShaderEffect</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> shader</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//properties for shader</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//not pass to shader</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> vector3d defaultResolution</span>: Qt.vector3d(shader.width, shader.height, shader.width / shader.height)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calcResolution</span>(<span class="params">channel</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (channel) &#123;</span><br><span class="line">            <span class="keyword">return</span> Qt.vector3d(channel.width, channel.height, channel.width / channel.height);</span><br><span class="line">        &#125; <span class="title">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defaultResolution;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//pass</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> vector3d  iResolution</span>: defaultResolution</span><br><span class="line">    <span class="keyword">property</span><span class="string"> real       iTime</span>: <span class="number">0</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> real       iTimeDelta</span>: <span class="number">100</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> int        iFrame</span>: <span class="number">10</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> real       iFrameRate</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> vector4d   iMouse</span>;</span><br><span class="line">    <span class="keyword">property</span><span class="string"> var iChannel0</span>; <span class="comment">//only Image or ShaderEffectSource</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> var iChannel1</span>; <span class="comment">//only Image or ShaderEffectSource</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> var iChannel2</span>; <span class="comment">//only Image or ShaderEffectSource</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> var iChannel3</span>; <span class="comment">//only Image or ShaderEffectSource</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> var        iChannelTime</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">property</span><span class="string"> var        iChannelResolution</span>: [calcResolution(iChannel0), calcResolution(iChannel1), calcResolution(iChannel2), calcResolution(iChannel3)]</span><br><span class="line">    <span class="keyword">property</span><span class="string"> vector4d   iDate</span>;</span><br><span class="line">    <span class="keyword">property</span><span class="string"> real       iSampleRate</span>: <span class="number">44100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//properties for Qml controller</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> alias hoverEnabled</span>: mouse.hoverEnabled</span><br><span class="line">    <span class="keyword">property</span><span class="string"> bool running</span>: <span class="literal">true</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">restart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        shader.iTime = <span class="number">0</span></span><br><span class="line">        running = <span class="literal">true</span></span><br><span class="line">        timer1.restart()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">Timer</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> timer1</span></span><br><span class="line">        <span class="attribute">running</span>: shader.running</span><br><span class="line">        <span class="attribute">triggeredOnStart</span>: <span class="literal">true</span></span><br><span class="line">        <span class="attribute">interval</span>: <span class="number">16</span></span><br><span class="line">        <span class="attribute">repeat</span>: <span class="literal">true</span></span><br><span class="line">        <span class="attribute">onTriggered</span>: &#123;</span><br><span class="line">            shader.iTime += <span class="number">0.016</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">Timer</span> &#123;</span><br><span class="line">        <span class="attribute">running</span>: shader.running</span><br><span class="line">        <span class="attribute">interval</span>: <span class="number">1000</span></span><br><span class="line">        <span class="attribute">onTriggered</span>: &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="built_in">date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            shader.iDate.x = <span class="built_in">date</span>.getFullYear();</span><br><span class="line">            shader.iDate.y = <span class="built_in">date</span>.getMonth();</span><br><span class="line">            shader.iDate.z = <span class="built_in">date</span>.getDay();</span><br><span class="line">            shader.iDate.w = <span class="built_in">date</span>.getSeconds()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">MouseArea</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> mouse</span></span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">onPositionChanged</span>: &#123;</span><br><span class="line">            shader.iMouse.x = mouseX</span><br><span class="line">            shader.iMouse.y = mouseY</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">onClicked</span>: &#123;</span><br><span class="line">            shader.iMouse.z = mouseX</span><br><span class="line">            shader.iMouse.w = mouseY</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果环境是OpenGL ES2，默认的version是 version 110, 不需要写出来。</span></span><br><span class="line">    <span class="comment">// 比ES2更老的版本是ES 1.0 和 ES 1.1, 这种古董设备，还是不要玩Shader了吧。</span></span><br><span class="line">    <span class="comment">// ES2没有texture函数，要用旧的texture2D代替</span></span><br><span class="line">    <span class="comment">// 精度限定要写成float</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string gles2Ver</span>: <span class="string">"</span></span><br><span class="line"><span class="string">#define texture texture2D</span></span><br><span class="line"><span class="string">precision mediump float;</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    <span class="comment">// 如果环境是OpenGL ES3，version是 version 300 es</span></span><br><span class="line">    <span class="comment">// ES 3.1 ES 3.2也可以。</span></span><br><span class="line">    <span class="comment">// ES3可以用in out 关键字，gl_FragColor也可以用out fragColor取代</span></span><br><span class="line">    <span class="comment">// 精度限定要写成float</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string gles3Ver</span>: <span class="string">"#version 300 es</span></span><br><span class="line"><span class="string">#define varying in</span></span><br><span class="line"><span class="string">#define gl_FragColor fragColor</span></span><br><span class="line"><span class="string">precision mediump float;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">out vec4 fragColor;</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    <span class="comment">// 如果环境是OpenGL Desktop 3.x，version这里参考Qt默认的version 150。大部分Desktop设备应该都是150</span></span><br><span class="line">    <span class="comment">// 150 即3.2版本，第一个区分Core和Compatibility的版本。Core是核心模式，只有核心api以减轻负担。相应的Compatibility是兼容模式，保留全部API以兼容低版本。</span></span><br><span class="line">    <span class="comment">// 可以用in out 关键字，gl_FragColor也可以用out fragColor取代</span></span><br><span class="line">    <span class="comment">// 精度限定抹掉，用默认的。不抹掉有些情况下会报错，不能通用。</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string gl3Ver</span>: <span class="string">"#version 150</span></span><br><span class="line"><span class="string">#define varying in</span></span><br><span class="line"><span class="string">#define gl_FragColor fragColor</span></span><br><span class="line"><span class="string">#define lowp</span></span><br><span class="line"><span class="string">#define mediump</span></span><br><span class="line"><span class="string">#define highp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">out vec4 fragColor;</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    <span class="comment">// 如果环境是OpenGL Desktop 2.x，version这里就用2.0的version 110，即2.0版本</span></span><br><span class="line">    <span class="comment">// 2.x 没有texture函数，要用旧的texture2D代替</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string gl2Ver</span>: <span class="string">"#version 110</span></span><br><span class="line"><span class="string">#define texture texture2D</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">property</span><span class="string"> string versionString</span>: &#123;</span><br><span class="line">        <span class="keyword">if</span> (Qt.platform.os === <span class="string">"android"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (GraphicsInfo.majorVersion === <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"android gles 3"</span>)</span><br><span class="line">                <span class="keyword">return</span> gles3Ver</span><br><span class="line">            &#125; <span class="title">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"android gles 2"</span>)</span><br><span class="line">                <span class="keyword">return</span> gles2Ver</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="title">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (GraphicsInfo.majorVersion === <span class="number">3</span> ||GraphicsInfo.majorVersion === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> gl3Ver</span><br><span class="line">            &#125; <span class="title">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> gl2Ver</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">vertexShader</span>: <span class="string">"</span></span><br><span class="line"><span class="string">              uniform mat4 qt_Matrix;</span></span><br><span class="line"><span class="string">              attribute vec4 qt_Vertex;</span></span><br><span class="line"><span class="string">              attribute vec2 qt_MultiTexCoord0;</span></span><br><span class="line"><span class="string">              varying vec2 qt_TexCoord0;</span></span><br><span class="line"><span class="string">              varying vec4 vertex;</span></span><br><span class="line"><span class="string">              void main() &#123;</span></span><br><span class="line"><span class="string">                  vertex = qt_Vertex;</span></span><br><span class="line"><span class="string">                  gl_Position = qt_Matrix * vertex;</span></span><br><span class="line"><span class="string">                  qt_TexCoord0 = qt_MultiTexCoord0;</span></span><br><span class="line"><span class="string">              &#125;"</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string forwardString</span>: versionString + <span class="string">"</span></span><br><span class="line"><span class="string">        varying vec2 qt_TexCoord0;</span></span><br><span class="line"><span class="string">        varying vec4 vertex;</span></span><br><span class="line"><span class="string">        uniform lowp   float qt_Opacity;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        uniform vec3   iResolution;</span></span><br><span class="line"><span class="string">        uniform float  iTime;</span></span><br><span class="line"><span class="string">        uniform float  iTimeDelta;</span></span><br><span class="line"><span class="string">        uniform int    iFrame;</span></span><br><span class="line"><span class="string">        uniform float  iFrameRate;</span></span><br><span class="line"><span class="string">        uniform float  iChannelTime[4];</span></span><br><span class="line"><span class="string">        uniform vec3   iChannelResolution[4];</span></span><br><span class="line"><span class="string">        uniform vec4   iMouse;</span></span><br><span class="line"><span class="string">        uniform vec4    iDate;</span></span><br><span class="line"><span class="string">        uniform float   iSampleRate;</span></span><br><span class="line"><span class="string">        uniform sampler2D   iChannel0;</span></span><br><span class="line"><span class="string">        uniform sampler2D   iChannel1;</span></span><br><span class="line"><span class="string">        uniform sampler2D   iChannel2;</span></span><br><span class="line"><span class="string">        uniform sampler2D   iChannel3;</span></span><br><span class="line"><span class="string">    "</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string startCode</span>: <span class="string">"</span></span><br><span class="line"><span class="string">        void main(void)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            mainImage(gl_FragColor, vec2(vertex.x, iResolution.y - vertex.y));</span></span><br><span class="line"><span class="string">        &#125;"</span></span><br><span class="line">    readonly <span class="keyword">property</span><span class="string"> string defaultPixelShader</span>: <span class="string">"</span></span><br><span class="line"><span class="string">        void mainImage(out vec4 fragColor, in vec2 fragCoord)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            fragColor = vec4(fragCoord, fragCoord.x, fragCoord.y);</span></span><br><span class="line"><span class="string">        &#125;"</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> string pixelShader</span>: <span class="string">""</span></span><br><span class="line">    <span class="attribute">fragmentShader</span>: forwardString + (pixelShader ? <span class="attribute">pixelShader</span> : defaultPixelShader) + startCode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#简介&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#源码&quot;&gt;源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#效果预览&quot;&gt;效果预览&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#穿云洞&quot;&gt;穿云洞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
      <category term="玩转Qml" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQml/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qml" scheme="https://jaredtao.github.io/tags/Qml/"/>
    
      <category term="QtQuick" scheme="https://jaredtao.github.io/tags/QtQuick/"/>
    
      <category term="特效" scheme="https://jaredtao.github.io/tags/%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qml(15)-着色器效果ShaderEffect</title>
    <link href="https://jaredtao.github.io/2019/06/22/%E7%8E%A9%E8%BD%ACQml(15)-%E7%9D%80%E8%89%B2%E5%99%A8%E6%95%88%E6%9E%9CShaderEffect/"/>
    <id>https://jaredtao.github.io/2019/06/22/玩转Qml(15)-着色器效果ShaderEffect/</id>
    <published>2019-06-22T05:44:23.000Z</published>
    <updated>2020-12-25T10:00:28.281Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E5%85%B3%E4%BA%8E%E6%96%87%E7%AB%A0">关于文章</a></li><li><a href="#ShaderEffect">ShaderEffect</a></li><li><a href="#%E6%98%BE%E7%A4%BA%E5%99%A8%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E8%89%B2%E5%BD%A9">显示器如何显示色彩</a></li><li><a href="#GPU%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B">GPU渲染流程</a><ul><li><a href="#%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E5%9B%BE">渲染管线图</a></li><li><a href="#%E5%B9%B6%E8%A1%8C%E7%AE%A1%E7%BA%BF%E7%A4%BA%E6%84%8F%E5%9B%BE">并行管线示意图</a></li></ul></li><li><a href="#%E7%9D%80%E8%89%B2%E5%99%A8%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83">着色器语言编码规范</a></li><li><a href="#%E7%9D%80%E8%89%B2%E5%99%A8%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B">着色器代码示例</a><ul><li><a href="#%E7%A4%BA%E4%BE%8B">示例</a></li><li><a href="#%E7%9D%80%E8%89%B2%E5%99%A8%E4%BB%A3%E7%A0%81">着色器代码</a></li><li><a href="#%E9%A1%B6%E7%82%B9%E7%9D%80%E8%89%B2%E5%99%A8">顶点着色器</a></li><li><a href="#%E7%89%87%E6%AE%B5%E7%9D%80%E8%89%B2%E5%99%A8">片段着色器</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这次涛哥将会教大家一些ShaderEffect(参考QmlBook,译作：着色器效果)的相关知识。</p><p>前面的文章，给大家展示了进场动画，以及页面切换动画，大部分都使用了ShaderEffect，所以这次专门来说一下ShaderEffect。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>《玩转Qml》系列文章，配套了一个优秀的开源项目:TaoQuick</p><p>github <a href="https://github.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://github.com/jaredtao/TaoQuick</a></p><p>访问不了或者速度太慢，可以用国内的镜像网站gitee</p><p><a href="https://gitee.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://gitee.com/jaredtao/TaoQuick</a></p><h2 id="ShaderEffect"><a href="#ShaderEffect" class="headerlink" title="ShaderEffect"></a>ShaderEffect</h2><p>动画只能控制组件的属性整体的变化，做特效需要精确到像素。</p><p>Qml中提供了ShaderEffect这个组件，就能实现像素级别的操作。</p><p>ShaderEffect允许我们在Qml的渲染引擎SceneGraph上，利用强大的GPU进行渲染。</p><p>使用ShaderEffect，需要有一些图形学知识，了解GPU渲染管线，了解图形API如OpenGL、DirectX等，同时也需要一些数学知识。</p><p>图形学的知识体系还是非常庞大的，要系统的学习，需要看很多书籍。入门级的比如“红宝书”《OpenGL编程指南》、“蓝宝书”《OpenGL超级宝典》……</p><p>一篇文章是说不完的，涛哥水平也有限。所以本文从实用的角度出发，按照涛哥自己的理解，提炼一些必要的知识点，省略一些无关的细节，</p><p>让各位Qt开发者能了解GPU原理，能看懂、甚至于自己写一些简单的着色器代码，就大功告成了。说的不对的地方，也欢迎大佬来指点。</p><h2 id="显示器如何显示色彩"><a href="#显示器如何显示色彩" class="headerlink" title="显示器如何显示色彩"></a>显示器如何显示色彩</h2><p>先来了解一下，显示器是如何显示出各种色彩的。</p><p>假如我们把显示器的画面放大100倍，就会看到很多整齐排列的像素点。</p><p><img src="/images/ShaderEffect/1.png" alt=""></p><p>继续放大，就会发现每个像素点，由三种发光的元件组成，这三种元件分别发出红、绿、蓝三种颜色的光。三种颜色的光组合在一起，</p><p>就是人眼看到的颜色。这就是著名的RGB颜色模型。</p><p><img src="/images/ShaderEffect/2.png" alt=""></p><p>如果把这三种光的亮度分为255个等级，就能组合出16777216种不同颜色的光。</p><p>GPU的任务，就是通过计算，给出每一个像素的红、绿、蓝 （简称r g b）三种颜色的数值，让显示器去”发出相应的光”。</p><p>(这样说可能不太严谨、不太专业，只是方便大家理解。另一方面，本文的目的，</p><p>是让大家学习如何写特效，不是去造显卡/造显示器。所以请专业人士见谅！)</p><p>注：参考[1]</p><h2 id="GPU渲染流程"><a href="#GPU渲染流程" class="headerlink" title="GPU渲染流程"></a>GPU渲染流程</h2><p>我们以画一个填充色的三角形为例，来说明</p><p><img src="/images/ShaderEffect/3.png" alt=""></p><h3 id="渲染管线图"><a href="#渲染管线图" class="headerlink" title="渲染管线图"></a>渲染管线图</h3><p>下图是一个简易的渲染管线，引用自 <a href="https://learnopengl-cn.readthedocs.io/zh/latest/" target="_blank" rel="noopener">LearnOpenGL</a></p><p><img src="/images/ShaderEffect/5.png" alt=""></p><p>画一个三角形，要经历顶点着色器、图元装配、几何着色器、片段着色器、光栅化等阶段。</p><p>其中蓝色部分是可以自定义的，自定义是指，按照图形API规范，写一段GPU能编译、运行的代码。</p><p>(这种代码就是着色器代码。可以自定义的这种渲染管线，就是可编程渲染管线，与之相对的是古老的固定渲染管线。)</p><p>这里各个阶段，分别引用一下，LearnOpenGL中的介绍(看不懂可以先跳过，看我画的图)：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 管线的第一个部分是顶点着色器(Vertex Shader)，它把一个单独的顶点作为输入。顶点着色器主要的目的是</span><br><span class="line"></span><br><span class="line">把<span class="number">3</span>D坐标转为另一种<span class="number">3</span>D坐标（后面会解释），同时顶点着色器允许我们对顶点属性进行一些基本处理。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 图元装配(Primitive Assembly)阶段将顶点着色器输出的所有顶点作为输入（如果是GL_POINTS，那么就是一个顶点），</span><br><span class="line"></span><br><span class="line">并所有的点装配成指定图元的形状；本节例子中是一个三角形。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 图元装配阶段的输出会传递给几何着色器(Geometry Shader)。几何着色器把图元形式的一系列顶点的集合作为输入，</span><br><span class="line"></span><br><span class="line">它可以通过产生新顶点构造出新的（或是其它的）图元来生成其他形状。例子中，它生成了另一个三角形。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> 几何着色器的输出会被传入光栅化阶段(Rasterization Stage)，这里它会把图元映射为最终屏幕上相应的像素，</span><br><span class="line"></span><br><span class="line">生成供片段着色器(Fragment Shader)使用的片段(Fragment)。在片段着色器运行之前会执行裁切(Clipping)。</span><br><span class="line"></span><br><span class="line">裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> 片段着色器的主要目的是计算一个像素的最终颜色，这也是所有OpenGL高级效果产生的地方。通常，片段着色器包</span><br><span class="line"></span><br><span class="line">含<span class="number">3</span>D场景的数据（比如光照、阴影、光的颜色等等），这些数据可以被用来计算最终像素的颜色。</span><br></pre></td></tr></table></figure><h3 id="并行管线示意图"><a href="#并行管线示意图" class="headerlink" title="并行管线示意图"></a>并行管线示意图</h3><p>概念还是挺多的，而且很多教程都有渲染管线图。但是涛哥觉得，对于我们开发Shader来说，一定要有并行的意识，然而大部分</p><p>管线图，都没有体现出GPU的并行特性。所以涛哥自己画了一个草图：</p><p><img src="/images/ShaderEffect/6.png" alt=""></p><p>解释一下吧，CPU传入了3个顶点到GPU，GPU将这三个顶点，传递给三个顶点着色器。</p><p>这里要意识到，顶点着色器开始，就是并行处理了。GPU是很强大的SIMD架构（单指令流多数据流）。</p><p>如果我们自定义了一段顶点着色器代码，则三个顶点会同时运行这段代码。（后面的片段着色器代码，就是N个点同时运行）</p><p>顶点着色器进行处理，传递给图元装配。</p><p>图元装配阶段，进行了顶点扩充，变成N个点，N看作三角形面积所在的点。</p><p>之后N个点依次传给 几何着色器-&gt;光栅化-&gt;片段着色器，最后经过测试与混合后，输出到屏幕。</p><p>可以自定义编程的，有顶点着色器、几何着色器、片段着色器（有的地方也叫像素着色器），顺带提一下，还有另外三种：</p><p>曲面控制着色器、曲面评估着色器 和 计算着色器。</p><p>一般我们的关注点，都会在片段着色器上。涛哥之前写的12种特效，就只用了自定义的片段着色器。</p><p>著名的ShaderToy网站，也是只关注片段着色器。<a href="https://www.shadertoy.com" target="_blank" rel="noopener">ShaderToy</a></p><h2 id="着色器语言编码规范"><a href="#着色器语言编码规范" class="headerlink" title="着色器语言编码规范"></a>着色器语言编码规范</h2><p>我们可以把着色器语言，当作运行在GPU上的C语言。</p><p>Qt的ShaderEffect支持的着色器语言包括OpenGL规范中的GLSL，和DirectX规范中的HLSL，这两种着色语法上有些细微的区别，但是可以互相转换。</p><p>我们就以glsl为主。详细的语言规范，在khronos的官网, 各个版本都有: <a href="https://www.khronos.org/registry/OpenGL/specs/gl/" target="_blank" rel="noopener">https://www.khronos.org/registry/OpenGL/specs/gl/</a></p><p><img src="/images/ShaderEffect/8.png" alt=""></p><p>桌面版 OpenGL 版本众多，而嵌入式系统也有专用的OpenGL ES。</p><p>安卓手机、平板设备一般就是OpenGL ES，新的设备都支持ES 3.0，老的设备一般只支持到ES 2.0</p><p>OpenGL ES 的语言规范文档在这里： <a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/" target="_blank" rel="noopener">https://www.khronos.org/registry/OpenGL/specs/es/2.0/</a></p><p>我们就用Qt默认的版本。</p><h2 id="着色器代码示例"><a href="#着色器代码示例" class="headerlink" title="着色器代码示例"></a>着色器代码示例</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>这里用Qt帮助文档中的示例代码，来说明。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line"><span class="title">Rectangle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200</span>; <span class="attribute">height</span>: <span class="number">100</span></span><br><span class="line">    <span class="title">Row</span> &#123;</span><br><span class="line">        <span class="title">Image</span> &#123; <span class="attribute">id:</span><span class="string"> img</span>;</span><br><span class="line">                <span class="title">sourceSize</span> &#123; <span class="attribute">width</span>: <span class="number">100</span>; <span class="attribute">height</span>: <span class="number">100</span> &#125; <span class="attribute">source</span>: <span class="string">"qt-logo.png"</span> &#125;</span><br><span class="line">        <span class="title">ShaderEffect</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100</span>; <span class="attribute">height</span>: <span class="number">100</span></span><br><span class="line">            <span class="keyword">property</span><span class="string"> variant src</span>: img</span><br><span class="line">            <span class="attribute">vertexShader</span>: <span class="string">"</span></span><br><span class="line"><span class="string">                uniform highp mat4 qt_Matrix;</span></span><br><span class="line"><span class="string">                attribute highp vec4 qt_Vertex;</span></span><br><span class="line"><span class="string">                attribute highp vec2 qt_MultiTexCoord0;</span></span><br><span class="line"><span class="string">                varying highp vec2 coord;</span></span><br><span class="line"><span class="string">                void main() &#123;</span></span><br><span class="line"><span class="string">                    coord = qt_MultiTexCoord0;</span></span><br><span class="line"><span class="string">                    gl_Position = qt_Matrix * qt_Vertex;</span></span><br><span class="line"><span class="string">                &#125;"</span></span><br><span class="line">            <span class="attribute">fragmentShader</span>: <span class="string">"</span></span><br><span class="line"><span class="string">                varying highp vec2 coord;</span></span><br><span class="line"><span class="string">                uniform sampler2D src;</span></span><br><span class="line"><span class="string">                uniform lowp float qt_Opacity;</span></span><br><span class="line"><span class="string">                void main() &#123;</span></span><br><span class="line"><span class="string">                    lowp vec4 tex = texture2D(src, coord);</span></span><br><span class="line"><span class="string">                    gl_FragColor = vec4(vec3(dot(tex.rgb,</span></span><br><span class="line"><span class="string">                                        vec3(0.344, 0.5, 0.156))),</span></span><br><span class="line"><span class="string">                                             tex.a) * qt_Opacity;</span></span><br><span class="line"><span class="string">                &#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的效果是</p><p><img src="/images/ShaderEffect/7.png" alt=""></p><p>左边是本来的绿色的Qt的logo，右边是处理过后的灰色logo。</p><h3 id="着色器代码"><a href="#着色器代码" class="headerlink" title="着色器代码"></a>着色器代码</h3><p>ShaderEffect的vertexShader属性就是顶点着色器了，其内容是一段字符串。按照着色器规范实现的。</p><p>同样的，fragmentShader属性 即片段着色器。</p><p>我们能在着色器中看到void main函数，这个便是着色器代码的入口函数，和C语言很像。</p><p>在main之前，还有一些全局变量,我们逐条来说明一下</p><p>在顶点着色器中，有这三种不同用处的变量：uniform、attribute、varying。</p><p>这些变量的值都是从CPU传递过来的。</p><p>如果你写过原生OpenGL的代码，就会知道，其中很大一部分工作，就是在处理CPU数据传递到GPU着色器中。</p><p>而Qml的ShaderEffect简化了这些工作，只要写一个property，名字、类型和着色器中的对应上，就可以了。</p><h3 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">attribute</span> <span class="keyword">highp</span> <span class="type">vec4</span> qt_Vertex;</span><br></pre></td></tr></table></figure><p>attribute是”属性”变量，按照前面涛哥画的管线图来说，三个顶点着色器同时运行时，每个着色器中</p><p>的attribute值都不一样。这里的qt_Vertex，可以理解为分别是三角形的三个顶点。</p><p>highp是精度限定符，这里先忽略，具体细节可以参考语言规范文档。后面的lowp、 medium也是精度限定符。</p><p>vec4就是四维向量，类似QVector4D。</p><p>qt_Vertex是变量的名字。</p><p>这条语句的作用，就是声明一个用来存储顶点的attribute变量qt_Vertex。</p><p>uniform是统一变量，三个顶点着色器同时运行时，它们取得的uniform变量值是一样的。</p><p>varying表示这个顶点着色器的输出数据，将传递给后面的渲染管线。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">void</span> main() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">coord</span> = qt_MultiTexCoord0;</span><br><span class="line">    <span class="attribute">gl_Position</span> = qt_Matrix * qt_Vertex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段main函数，将CPU传进来的纹理坐标qt_MultiTexCoord0数据，通过varying变量coord，传递给了下一个阶段，然后使用矩阵进行了坐标转换，</p><p>并将结果存储在glsl的内置变量gl_Position中。</p><h3 id="片段着色器"><a href="#片段着色器" class="headerlink" title="片段着色器"></a>片段着色器</h3><p>片段着色器中，就没有attribute了。uniform是一样的统一变量，varying是上一个阶段传递进来的数据。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> src;</span><br></pre></td></tr></table></figure><p>sampler2D是二维纹理。所谓纹理嘛，可以理解成一张图片，一个Image。</p><p>src这个变量，就代表外面传进来的那个Image。 sampler2D也可以是任意可视的Item(通过ShaderEffectSource传递进来)</p><p>来看一下main函数</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> main() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">lowp</span> <span class="type">vec4</span> tex = <span class="built_in">texture2D</span>(src, coord);</span><br><span class="line">    <span class="built_in">gl_FragColor</span> = <span class="type">vec4</span>(<span class="type">vec3</span>(<span class="built_in">dot</span>(tex.rgb,<span class="type">vec3</span>(<span class="number">0.344</span>, <span class="number">0.5</span>, <span class="number">0.156</span>))), tex.a) * qt_Opacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了纹理</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lowp</span> <span class="type">vec4</span> tex = <span class="built_in">texture2D</span>(src, coord);</span><br></pre></td></tr></table></figure><p>texture2D是一个内置函数，专业术语叫“对纹理进行采样”，什么意思呢？</p><p>假如coord的值是(0,0),那就是对src指代的这张图片，取x=0、y=0的坐标点的像素，作为返回值，存储在tex变量中。</p><p>这里注意一下纹理坐标的取值范围。假如Qml中图片的大小是100x100，其取值范围从(0, 0) -&gt; (100, 100)</p><p>这里的传进来的纹理坐标，取值范围是(0, 0) -&gt; (1, 1) ，GPU为了方便计算，都进行了归1化处理。将范围缩小到0 - 1</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">gl_FragColor</span> = <span class="type">vec4</span>(<span class="type">vec3</span>(<span class="built_in">dot</span>(tex.rgb, <span class="type">vec3</span>(<span class="number">0.344</span>, <span class="number">0.5</span>, <span class="number">0.156</span>) )), tex.a) * qt_Opacity;</span><br></pre></td></tr></table></figure><p>dot(tex.rgb, vec3(0.344, 0.5, 0.156) ) 是对两个三维向量进行了点乘。</p><p>tex.rgb是GLSL中的取值器语法。 tex是一个四维变量，可以用tex.r tex.g tex.b tex.a分别取出其中一维，也可以任意两个组合、三个</p><p>组合取值。 </p><p>rgba可以取值，xyzw也可以取值， stpq也行，但只能三种选一种，不能混用。</p><p>vec4（vec3(), tex.a) 是用三维向量再加一个变量，构造四维向量。</p><p>这条语句其实是一个RGB转灰度的公式，可以自行搜索相关的资料。</p><p>gl_FragColor 是内置变量，表示所在片段着色器的最终的输出颜色。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/43467096" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/43467096</a></p><p>[2] <a href="https://learnopengl-cn.github.io/" target="_blank" rel="noopener">https://learnopengl-cn.github.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%AE%80%E4%BB%8B&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%B3%E4%BA%8E%E6%96%87%E7%AB%A0&quot;&gt;关于文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ShaderEff
      
    
    </summary>
    
      <category term="玩转Qml" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQml/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qml" scheme="https://jaredtao.github.io/tags/Qml/"/>
    
      <category term="QtQuick" scheme="https://jaredtao.github.io/tags/QtQuick/"/>
    
      <category term="特效" scheme="https://jaredtao.github.io/tags/%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qml(14)-动画特效-梯度</title>
    <link href="https://jaredtao.github.io/2019/06/09/%E7%8E%A9%E8%BD%ACQml(14)-%E5%8A%A8%E7%94%BB%E7%89%B9%E6%95%88-%E6%A2%AF%E5%BA%A6/"/>
    <id>https://jaredtao.github.io/2019/06/09/玩转Qml(14)-动画特效-梯度/</id>
    <published>2019-06-09T01:44:23.000Z</published>
    <updated>2020-11-10T04:11:32.855Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E5%85%B3%E4%BA%8E%E6%96%87%E7%AB%A0">关于文章</a></li><li><a href="#%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88">梯度效果预览</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">实现原理</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这是《Qml特效-进场动画》系列文章的第二篇，涛哥将会教大家一些Qml进场动画相关的知识。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>《玩转Qml》系列文章，配套了一个优秀的开源项目:TaoQuick</p><p>github <a href="https://github.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://github.com/jaredtao/TaoQuick</a></p><p>访问不了或者速度太慢，可以用国内的镜像网站gitee</p><p><a href="https://gitee.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://gitee.com/jaredtao/TaoQuick</a></p><h2 id="梯度效果预览"><a href="#梯度效果预览" class="headerlink" title="梯度效果预览"></a>梯度效果预览</h2><p>梯度效果，支持从四个方向梯度出现</p><p><img src="/images/Animation/2.gif" alt=""></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>通过数值动画，控制百分比属性percent从0 到100变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;AGrad.qml</span><br><span class="line">import QtQuick 2.12</span><br><span class="line">import QtQuick.Controls 2.12</span><br><span class="line">ShaderEffect &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#x2F;&#x2F;枚举声明四种方向</span><br><span class="line">    enum Direct &#123;</span><br><span class="line">        FromLeft &#x3D; 0,</span><br><span class="line">        FromRight &#x3D; 1,</span><br><span class="line">        FromTop &#x3D; 2,</span><br><span class="line">        FromBottom &#x3D; 3</span><br><span class="line">    &#125;</span><br><span class="line">    property int dir: ASlowEnter.Direct.FromLeft</span><br><span class="line">    property int percent: 0</span><br><span class="line">    opacity: percent &gt; 0 ? 1 : 0</span><br><span class="line">    NumberAnimation &#123;</span><br><span class="line">        id: animation</span><br><span class="line">        target: r</span><br><span class="line">        property: &quot;percent&quot;</span><br><span class="line">        from: 0</span><br><span class="line">        to: 100</span><br><span class="line">        alwaysRunToEnd: true</span><br><span class="line">        loops: 1</span><br><span class="line">        duration: 1000</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Shader中，使用glsl片段着色器实现像素的控制：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span> <span class="type">vec2</span> qt_TexCoord0;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">float</span> qt_Opacity;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> effectSource;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">int</span> dir;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">int</span> percent;</span><br><span class="line"><span class="keyword">out</span> <span class="type">vec4</span> fragColor;</span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">vec4</span> color = <span class="built_in">texture2D</span>(effectSource, qt_TexCoord0);</span><br><span class="line">    <span class="type">float</span> p = <span class="type">float</span>(percent) / <span class="number">100.0</span>f;</span><br><span class="line">    <span class="type">float</span> alpha = <span class="number">1.0</span>f;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="number">0</span> ) &#123;</span><br><span class="line">        alpha = <span class="number">1.0</span> - <span class="built_in">step</span>(p, qt_TexCoord0.x);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">1</span>)&#123;</span><br><span class="line">        alpha = <span class="number">1.0</span> - <span class="built_in">step</span>(p, <span class="number">1.0</span> - qt_TexCoord0.x);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">2</span>) &#123;</span><br><span class="line">        alpha = <span class="number">1.0</span>f - <span class="built_in">step</span>(p, qt_TexCoord0.y);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) &#123;</span><br><span class="line">        alpha = <span class="number">1.0</span>f - <span class="built_in">step</span>(p, <span class="number">1.0</span> - qt_TexCoord0.y);</span><br><span class="line">    &#125;</span><br><span class="line">    fragColor = <span class="type">vec4</span>(color.rgb, alpha);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果比较简单，以从左向右为例(dir == 0), 说明一下:</p><p>先是把percent 归一化处理 (float p = percent / 100.0)，</p><p>纹理坐标qt_TexCoord0.x的取值范围为 0 - 1，按照Qml的坐标系统，左边为0，右边为1。</p><p>之后纹理坐标与p进行比较，坐标小于p则显示(透明度为1)，大于p则不显示(透明度为0). (也可以直接用discard丢弃片段)</p><p>step是glsl内置函数，step(p, qt_TexCoord0.x) 就是x小于p返回0，大于等于p返回1。 结果正好与上面分析的相反，用1 减去即可： alpha = 1.0 - step(p, qt_TexCoord0.x);</p><p>最终输出颜色即可:</p><p>fragColor = vec4(color.rgb, alpha);</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%AE%80%E4%BB%8B&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%B3%E4%BA%8E%E6%96%87%E7%AB%A0&quot;&gt;关于文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A2%AF
      
    
    </summary>
    
      <category term="玩转Qml" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQml/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qml" scheme="https://jaredtao.github.io/tags/Qml/"/>
    
      <category term="QtQuick" scheme="https://jaredtao.github.io/tags/QtQuick/"/>
    
      <category term="特效" scheme="https://jaredtao.github.io/tags/%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qml(13)-动画特效-飞入</title>
    <link href="https://jaredtao.github.io/2019/06/08/%E7%8E%A9%E8%BD%ACQml(13)-%E5%8A%A8%E7%94%BB%E7%89%B9%E6%95%88-%E9%A3%9E%E5%85%A5/"/>
    <id>https://jaredtao.github.io/2019/06/08/玩转Qml(13)-动画特效-飞入/</id>
    <published>2019-06-08T04:44:23.000Z</published>
    <updated>2020-11-10T04:11:32.855Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E5%85%B3%E4%BA%8E%E6%96%87%E7%AB%A0">关于文章</a></li><li><a href="#%E9%A3%9E%E5%85%A5%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88">飞入效果预览</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">实现原理</a></li><li><a href="#QtQuick%E5%8A%A8%E7%94%BB%E7%B3%BB%E7%BB%9F">QtQuick动画系统</a><ul><li><a href="#%E5%8A%A8%E7%94%BB%E7%BB%84%E4%BB%B6">动画组件</a></li><li><a href="#%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BD%BF%E7%94%A8">动画的使用</a><ul><li><a href="#%E7%94%A8%E4%BE%8B%E4%B8%80-%E7%9B%B4%E6%8E%A5%E5%A3%B0%E6%98%8E%E5%8A%A8%E7%94%BB">用例一 直接声明动画</a></li><li><a href="#%E7%94%A8%E4%BE%8B%E4%BA%8C-on%E8%AF%AD%E6%B3%95">用例二 on语法</a></li><li><a href="#%E7%94%A8%E4%BE%8B%E4%B8%89-Transitions%E6%88%96%E7%8A%B6%E6%80%81%E6%9C%BA">用例三 Transitions或状态机</a></li></ul></li></ul></li><li><a href="#ShaderEffect">ShaderEffect</a></li><li><a href="#%E9%A3%9E%E5%85%A5%E6%95%88%E6%9E%9C%E6%BA%90%E7%A0%81">飞入效果源码</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这次涛哥将会教大家一些Qml动画相关的知识。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>《玩转Qml》系列文章，配套了一个优秀的开源项目:TaoQuick</p><p>github <a href="https://github.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://github.com/jaredtao/TaoQuick</a></p><p>访问不了或者速度太慢，可以用国内的镜像网站gitee</p><p><a href="https://gitee.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://gitee.com/jaredtao/TaoQuick</a></p><h2 id="飞入效果预览"><a href="#飞入效果预览" class="headerlink" title="飞入效果预览"></a>飞入效果预览</h2><p>第一篇文章，就放一个简单的动画效果</p><p><img src="/images/Animation/1.gif" alt=""></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>进场动画，使用了QtQuick的动画系统，以及ShaderEffect特效。</p><p>Qml中有一个模块QtGraphicalEffects，提供了部分特效，就是使用ShaderEffect实现的。</p><p>使用ShaderEffect实现特效，需要有一些OpenGL/DirectX知识，了解GPU渲染管线，同时也需要一些数学知识。</p><h2 id="QtQuick动画系统"><a href="#QtQuick动画系统" class="headerlink" title="QtQuick动画系统"></a>QtQuick动画系统</h2><h3 id="动画组件"><a href="#动画组件" class="headerlink" title="动画组件"></a>动画组件</h3><p>Qt动画系统，在帮助文档有详细的介绍，搜索关键词”Animation”，涛哥在这里说一些重点。</p><p>涛哥用思维导图列出了Qml中所有的动画组件:</p><p><img src="/images/Ani1/1.png" alt=""></p><ul><li><p>右边带虚线框的部分比较常用，是做动画必须要掌握的，尤其是属性动画PropertyAnimation和数值动画NumberAinmation。<br>常见的各种坐标动画、宽高动画、透明度动画、颜色动画等等，都可以用这些组件来实现。</p></li><li><p>底下的States、Behavior 和 Traisitions，也是比较常用的和动画相关的组件。可在帮助文档搜索<br>关键词”Qt Quick States”、”Behavior”、”Animation and Transitions”。后续的文章，涛哥会专门讲解。</p></li><li><p>左边的Animator系列，属于Scene Graph渲染层面的优化，其属性Change信号只在最终值时发出，不发出中间值，使用的时候需要注意。</p></li><li><p>顶上的AnimationController，属于高端玩家，用来控制整个动画的进度。</p></li></ul><h3 id="动画的使用"><a href="#动画的使用" class="headerlink" title="动画的使用"></a>动画的使用</h3><h4 id="用例一-直接声明动画"><a href="#用例一-直接声明动画" class="headerlink" title="用例一 直接声明动画"></a>用例一 直接声明动画</h4><p>直接声明动画，指定target和property，之后可以在槽函数/js脚本中通过id控制动画的运行。</p><p>也可以通过设定loops 和 running属性来控制动画</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Rectangle</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> flashingblob</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">75</span>; <span class="attribute">height</span>: <span class="number">75</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="string">"blue"</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">    <span class="title">MouseArea</span> &#123;</span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">onClicked</span>: &#123;</span><br><span class="line">            animateColor.start()</span><br><span class="line">            animateOpacity.start()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">PropertyAnimation</span> &#123;<span class="attribute">id:</span><span class="string"> animateColor</span>; <span class="attribute">target</span>: flashingblob; <span class="attribute">properties</span>: <span class="string">"color"</span>; <span class="attribute">to</span>: <span class="string">"green"</span>; <span class="attribute">duration</span>: <span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">NumberAnimation</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> animateOpacity</span></span><br><span class="line">        <span class="attribute">target</span>: flashingblob</span><br><span class="line">        <span class="attribute">properties</span>: <span class="string">"opacity"</span></span><br><span class="line">        <span class="attribute">from</span>: <span class="number">0.99</span></span><br><span class="line">        <span class="attribute">to</span>: <span class="number">1.0</span></span><br><span class="line">        <span class="attribute">loops</span>: Animation.Infinite</span><br><span class="line">        <span class="title">easing</span> &#123;<span class="attribute">type</span>: Easing.OutBack; <span class="attribute">overshoot</span>: <span class="number">500</span>&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用例二-on语法"><a href="#用例二-on语法" class="headerlink" title="用例二 on语法"></a>用例二 on语法</h4><p>on语法可以使用动画组件，也可以用Behavior，直接on某个特定的属性即可。效果一样。</p><p>on动画中，如果直接指定了running属性，默认就会执行这个动画。</p><p>也可以不指定running属性，其它地方修改这个属性时，会自动按照动画来执行。</p><p>示例代码 on动画</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Rectangle &#123;</span><br><span class="line">    width: 100; height: 100; color: &quot;green&quot;</span><br><span class="line">    RotationAnimation on rotation &#123;</span><br><span class="line">        loops: Animation.Infinite</span><br><span class="line">        from: 0</span><br><span class="line">        to: 360</span><br><span class="line">        running: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码 Behavior 动画</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import QtQuick 2.0</span><br><span class="line"></span><br><span class="line">Rectangle &#123;</span><br><span class="line">    id: rect</span><br><span class="line">    width: 100; height: 100</span><br><span class="line">    color: &quot;red&quot;</span><br><span class="line"></span><br><span class="line">    Behavior on width &#123;</span><br><span class="line">        NumberAnimation &#123; duration: 1000 &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MouseArea &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        onClicked: rect.width &#x3D; 50</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用例三-Transitions或状态机"><a href="#用例三-Transitions或状态机" class="headerlink" title="用例三 Transitions或状态机"></a>用例三 Transitions或状态机</h4><p>过渡动画和状态机动画，本质还是直接使用动画组件。只不过是把动画声明并存储起来，以在状态切换时使用。</p><p>这里先不细说了，后面会有系列文章&lt;Qml特效-页面切换动画&gt;，会专门讲解。</p><h2 id="ShaderEffect"><a href="#ShaderEffect" class="headerlink" title="ShaderEffect"></a>ShaderEffect</h2><p>动画只能控制组件的属性整体的变化，做特效需要精确到像素。</p><p>Qml中提供了ShaderEffect这个组件，就能实现像素级别的操作。</p><p>大名鼎鼎的ShaderToy网站，就是使用Shader实现各种像素级别的酷炫特效。</p><p><a href="https://www.shadertoy.com" target="_blank" rel="noopener">ShaderToy</a></p><p><a href="http://www.iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm" target="_blank" rel="noopener">作者iq大神</a></p><p>ShaderToy上面的特效都是可以移植到Qml中的。</p><p>使用Shader开发，需要一定的图形学知识。其中使用GLSL需要熟悉OpenGL, 使用HLSL需要熟悉DirectX。</p><h2 id="飞入效果源码"><a href="#飞入效果源码" class="headerlink" title="飞入效果源码"></a>飞入效果源码</h2><p>封装了一个平移进入的动画组件,能够支持从四个方向进场。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ASlowEnter.qml</span></span><br><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"../.."</span></span><br><span class="line"><span class="title">Item</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> r</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> int targetX</span>: <span class="number">0</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> int targetY</span>: <span class="number">0</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> alias animation</span>: animation</span><br><span class="line">    enum <span class="title">Direct</span> &#123;</span><br><span class="line">        FromLeft = <span class="number">0</span>,</span><br><span class="line">        FromRight = <span class="number">1</span>,</span><br><span class="line">        FromTop = <span class="number">2</span>,</span><br><span class="line">        FromBottom = <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">property</span><span class="string"> int dir</span>: ASlowEnter.Direct.FromBottom</span><br><span class="line">    <span class="keyword">property</span><span class="string"> int duration</span>: <span class="number">2000</span></span><br><span class="line">    <span class="comment">//额外的距离，组件在父Item之外时，额外移动一点，避免边缘暴露在父Item的边缘</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> int extDistance</span>: <span class="number">10</span></span><br><span class="line">    <span class="keyword">property</span><span class="string"> var __propList</span>: [<span class="string">"x"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"y"</span>]</span><br><span class="line">    <span class="keyword">property</span><span class="string"> var __fromList</span>: [</span><br><span class="line">        -r.parent.width - r.width - extDistance,</span><br><span class="line">        r.parent.width + r.width + extDistance,</span><br><span class="line">        -r.parent.height - r.height - extDistance,</span><br><span class="line">        r.parent.height + r.height + extDistance]</span><br><span class="line">    <span class="keyword">property</span><span class="string"> var __toList</span>: [targetX, targetX, targetY, targetY]</span><br><span class="line">    <span class="title">NumberAnimation</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> animation</span></span><br><span class="line">        <span class="attribute">target</span>: r</span><br><span class="line">        <span class="keyword">property</span><span class="string"></span>: __propList[dir]</span><br><span class="line">        <span class="attribute">from</span>: __fromList[dir]</span><br><span class="line">        <span class="attribute">to</span>: __toList[dir]</span><br><span class="line">        <span class="attribute">duration</span>: r.duration</span><br><span class="line">        <span class="attribute">loops</span>: <span class="number">1</span></span><br><span class="line">        <span class="attribute">alwaysRunToEnd</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进场组件的使用</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Enter.qml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"../Animation/Enter"</span></span><br><span class="line"><span class="title">Item</span> &#123;</span><br><span class="line">    <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">    <span class="title">ASlowEnter</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> a1</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">160</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">108</span></span><br><span class="line">        <span class="attribute">x</span>: (<span class="built_in">parent</span>.width - width) / <span class="number">2</span></span><br><span class="line">        <span class="attribute">targetY</span>: <span class="built_in">parent</span>.height / <span class="number">2</span></span><br><span class="line">        <span class="attribute">dir</span>: ASlowEnter.Direct.FromBottom</span><br><span class="line">        <span class="title">Image</span> &#123;</span><br><span class="line">            <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">            <span class="attribute">source</span>: <span class="string">"qrc:/EffectImage/Img/baby.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ASlowEnter</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> a2</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">160</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">108</span></span><br><span class="line">        <span class="attribute">x</span>: (<span class="built_in">parent</span>.width - width) / <span class="number">2</span></span><br><span class="line">        <span class="attribute">targetY</span>: <span class="built_in">parent</span>.height / <span class="number">2</span> - height</span><br><span class="line">        <span class="attribute">dir</span>: ASlowEnter.Direct.FromTop</span><br><span class="line">        <span class="title">Image</span> &#123;</span><br><span class="line">            <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">            <span class="attribute">source</span>: <span class="string">"qrc:/EffectImage/Img/baby.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ASlowEnter</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> a3</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">160</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">108</span></span><br><span class="line">        <span class="attribute">targetX</span>: <span class="built_in">parent</span>.width / <span class="number">2</span> - width * <span class="number">1.5</span></span><br><span class="line">        <span class="attribute">y</span>: (<span class="built_in">parent</span>.height - height) / <span class="number">2</span></span><br><span class="line">        <span class="attribute">dir</span>: ASlowEnter.Direct.FromLeft</span><br><span class="line">        <span class="title">Image</span> &#123;</span><br><span class="line">            <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">            <span class="attribute">source</span>: <span class="string">"qrc:/EffectImage/Img/baby.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ASlowEnter</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> a4</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">160</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">108</span></span><br><span class="line">        <span class="attribute">targetX</span>: <span class="built_in">parent</span>.width / <span class="number">2</span> + width / <span class="number">2</span></span><br><span class="line">        <span class="attribute">y</span>: (<span class="built_in">parent</span>.height - height) / <span class="number">2</span></span><br><span class="line">        <span class="attribute">dir</span>: ASlowEnter.Direct.FromRight</span><br><span class="line">        <span class="title">Image</span> &#123;</span><br><span class="line">            <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">            <span class="attribute">source</span>: <span class="string">"qrc:/EffectImage/Img/baby.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">ParallelAnimation</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> ani</span></span><br><span class="line">        <span class="title">ScriptAction</span>&#123; <span class="attribute">script</span>: &#123;a1.animation.restart()&#125; &#125;</span><br><span class="line">        <span class="title">ScriptAction</span>&#123; <span class="attribute">script</span>: &#123;a2.animation.restart()&#125; &#125;</span><br><span class="line">        <span class="title">ScriptAction</span>&#123; <span class="attribute">script</span>: &#123;a3.animation.restart()&#125; &#125;</span><br><span class="line">        <span class="title">ScriptAction</span>&#123; <span class="attribute">script</span>: &#123;a4.animation.restart()&#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">Component.onCompleted</span>: &#123;</span><br><span class="line">        ani.restart()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">Button</span> &#123;</span><br><span class="line">        <span class="attribute">anchors.right</span>: <span class="built_in">parent</span>.right</span><br><span class="line">        <span class="attribute">anchors.bottom</span>: <span class="built_in">parent</span>.bottom</span><br><span class="line">        <span class="attribute">text</span>: <span class="string">"replay"</span></span><br><span class="line">        <span class="attribute">onClicked</span>: &#123;</span><br><span class="line">            ani.restart()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%AE%80%E4%BB%8B&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%B3%E4%BA%8E%E6%96%87%E7%AB%A0&quot;&gt;关于文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%A3%9E
      
    
    </summary>
    
      <category term="玩转Qml" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQml/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qml" scheme="https://jaredtao.github.io/tags/Qml/"/>
    
      <category term="QtQuick" scheme="https://jaredtao.github.io/tags/QtQuick/"/>
    
      <category term="特效" scheme="https://jaredtao.github.io/tags/%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>玩转Qml(12)-再谈动态国际化</title>
    <link href="https://jaredtao.github.io/2019/06/03/%E7%8E%A9%E8%BD%ACQml(12)-%E5%86%8D%E8%B0%88%E5%8A%A8%E6%80%81%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    <id>https://jaredtao.github.io/2019/06/03/玩转Qml(12)-再谈动态国际化/</id>
    <published>2019-06-02T17:44:23.000Z</published>
    <updated>2020-12-25T09:59:26.689Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#简介">简介</a></li><li><a href="#源码">源码</a></li><li><a href="#效果预览">效果预览</a></li><li><a href="#qt本身的国际化">Qt本身的国际化</a></li><li><a href="#存在翻译不全的问题">存在翻译不全的问题</a></li><li><a href="#新的方案">新的方案</a></li><li><a href="#关于批量翻译">关于批量翻译</a></li><li><a href="#总结">总结</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文是《玩转Qml》系列文章的第十二篇，主要讨论多国语言动态翻译。</p><p>之前分享过使用Qt自带翻译的方案，但是效果不太好。这次分享一个非官方的多国语言方案。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>《玩转Qml》系列文章，配套了一个优秀的开源项目:TaoQuick</p><p>github <a href="https://github.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://github.com/jaredtao/TaoQuick</a></p><p>访问不了或者速度太慢，可以用国内的镜像网站gitee</p><p><a href="https://gitee.com/jaredtao/TaoQuick" target="_blank" rel="noopener">https://gitee.com/jaredtao/TaoQuick</a></p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>看一下最终效果</p><p><img src="/images/Qml12/1.gif" alt="预览"></p><p>(原始字符串全部为英文，中文为人工翻译。</p><p>其它语言使用的百度翻译api批量翻译，不太准确，暂时先这样)</p><h2 id="Qt本身的国际化"><a href="#Qt本身的国际化" class="headerlink" title="Qt本身的国际化"></a>Qt本身的国际化</h2><p>先来回顾一下，Qt的国际化方案：</p><ol><li><p>C++代码中的字符串使用QObject::tr()包起来，类本身是QObject的子类时可以省略作用域“QObject::”,直接写tr</p></li><li><p>qml代码中使用qsTr把字符串包起来</p></li><li><p>pro文件中添加一句TRANSLATIONS += trans_zh.qs ，这个名字起什么无所谓，关键是‘_zh’要有。</p></li><li><p>调用lrelease工具,扫描项目并生成trans_zh.qs 文件。这个文件是xml格式的，未经过翻译的，需要为这个文件做一些翻译工作。</p></li><li><p>翻译做好后，调用lupdate工具，生成trans_zh.qm文件。这个文件就是把xml压缩成了二进制。</p></li><li><p>将qm文件放在运行路径，或者资源文件里。</p></li><li><p>切换语言时， Qt/C++代码中使用QTranslater加载qm文件，QCoreApplication卸载旧的QTranslater，并安装新的QTranslater。调用<br>QmlEngine::retranslate函数</p></li></ol><p>在5.10以前的版本，Qt是不能直接动态切换语言的，要么重新启动程序，要么把所有的text都set一遍，retranslate是5.10才有的接口。</p><h2 id="存在翻译不全的问题"><a href="#存在翻译不全的问题" class="headerlink" title="存在翻译不全的问题"></a>存在翻译不全的问题</h2><p>上面的方案，在<a href="https://github.com/jaredtao/TaoQuick" target="_blank" rel="noopener">TaoQuick</a>中使用了。</p><p>明显的问题是，只能翻译静态的内容，动态加载的ListModel，动态切换语言时不能自动刷新。</p><p>按照Qt文档所说，Array或者其它数据结构中的内容，也不能自动刷新。</p><h2 id="新的方案"><a href="#新的方案" class="headerlink" title="新的方案"></a>新的方案</h2><p>这里抛弃Qt的翻译机制，使用自己实现的方案。</p><p>1、约定要用到的字符串，全部用英文。</p><p>2、翻译文件使用json文件，一个文件翻译一种语言。</p><p>文件命名格式language_xx.json, json内容格式如下；</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"lang"</span>: <span class="string">"简体中文"</span>,</span><br><span class="line">    <span class="attr">"trans"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"key"</span>: <span class="string">"Chinese"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"简体中文"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"key"</span>: <span class="string">"Japanese"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"日语"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"key"</span>: <span class="string">"Korean"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"韩语"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"key"</span>: <span class="string">"Menu"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"菜单"</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中lang字段表示当前语言，trans字段是所有的翻译项。</p><p>3、实现核心翻译器Trans</p><p>自己实现一个Trans类，用来加载翻译包、提供翻译数据，类声明如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Trans.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QHash&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trans</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    <span class="comment">//当前语言</span></span><br><span class="line">    Q_PROPERTY(QString currentLang READ currentLang WRITE setCurrentLang NOTIFY currentLangChanged)</span><br><span class="line">    <span class="comment">//支持的语言列表</span></span><br><span class="line">    Q_PROPERTY(QStringList languages READ languages NOTIFY languagesChanged)</span><br><span class="line">    <span class="comment">//空字符串。用于动态翻译时，通过change信号触发trans</span></span><br><span class="line">    Q_PROPERTY(QString transString READ transString NOTIFY transStringChanged)</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Trans</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加载指定文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadFolder</span><span class="params">(<span class="keyword">const</span> QString &amp;folder)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载指定文件。成功时返回true，lang参数输出文件代表的语言。</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">load</span><span class="params">(QString &amp;lang, <span class="keyword">const</span> QString &amp;filePath)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">const</span> QString &amp;<span class="title">currentLang</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> QStringList &amp;<span class="title">languages</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> QString &amp;<span class="title">transString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">//翻译</span></span><br><span class="line">    <span class="function">QString <span class="title">trans</span><span class="params">(<span class="keyword">const</span> QString &amp;source)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCurrentLang</span><span class="params">(<span class="keyword">const</span> QString &amp;currentLang)</span></span>;</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">currentLangChanged</span><span class="params">(<span class="keyword">const</span> QString &amp;currentLang)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">languagesChanged</span><span class="params">(<span class="keyword">const</span> QStringList &amp;languages)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transStringChanged</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setLanguages</span><span class="params">(<span class="keyword">const</span> QStringList &amp;languages)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initEnglish</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QString m_currentLang;</span><br><span class="line">    <span class="comment">// &lt;"English", &lt;"key", "value"&gt;&gt;</span></span><br><span class="line">    QHash&lt;QString, QHash&lt;QString, QString&gt;&gt; m_map;</span><br><span class="line">    QStringList m_languages;</span><br><span class="line">    <span class="comment">//always empty</span></span><br><span class="line">    QString m_transString;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中languages是加载过后支持的所有语言，currentLang是当前语言。</p><p>trans函数是用来做翻译的，传入要翻译的字符串，根据当前语言，返回翻译后的字符串。</p><p>因为软件到处都要翻译，所以trans函数会被频繁调用，使用QHash&lt;QString, QHash&lt;QString, QString&gt;&gt;这样的</p><p>嵌套Hash数据结构，保证查询的平均复杂度为O(1).</p><p>transString是一个特殊的属性，其值始终为空，在语言被切换时，会触发transStringChange信号。</p><p>这样有什么用呢？先知道这个设定，后面qml部分会详细解释。</p><p>cpp 实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Trans.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Trans.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"FileReadWrite.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDir&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">auto</span> cEnglisthStr = QStringLiteral(<span class="string">"English"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">auto</span> cChineseStr = QStringLiteral(<span class="string">"简体中文"</span>);</span><br><span class="line">Trans::Trans(QObject* parent)</span><br><span class="line">    : QObject(parent)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Trans::loadFolder(<span class="keyword">const</span> QString&amp; folder)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">QDir <span class="title">dir</span><span class="params">(folder)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> infos = dir.entryInfoList(&#123; <span class="string">"language_*.json"</span> &#125;, QDir::Files);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> info : infos) &#123;</span><br><span class="line">        QString lang;</span><br><span class="line">        load(lang, info.absoluteFilePath());</span><br><span class="line">    &#125;</span><br><span class="line">    initEnglish();</span><br><span class="line">    <span class="keyword">auto</span> langs = m_map.uniqueKeys();</span><br><span class="line">    <span class="keyword">if</span> (langs.contains(cChineseStr)) &#123;</span><br><span class="line">        langs.removeAll(cChineseStr);</span><br><span class="line">        langs.push_front(cChineseStr);</span><br><span class="line">    &#125;</span><br><span class="line">    setLanguages(langs);</span><br><span class="line">    <span class="keyword">if</span> (m_map.contains(cChineseStr)) &#123;</span><br><span class="line">        setCurrentLang(cChineseStr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setCurrentLang(cEnglisthStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">emit <span class="title">transStringChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Trans::load(QString&amp; lang, <span class="keyword">const</span> QString&amp; filePath)</span><br><span class="line">&#123;</span><br><span class="line">    lang.clear();</span><br><span class="line">    QJsonObject rootObj;</span><br><span class="line">    <span class="keyword">if</span> (!TaoCommon::readJsonFile(filePath, rootObj)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lang = rootObj.value(<span class="string">"lang"</span>).toString();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; trans = rootObj.value(<span class="string">"trans"</span>).toArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : trans) &#123;</span><br><span class="line">        <span class="keyword">auto</span> transObj = i.toObject();</span><br><span class="line">        QString key = transObj.value(<span class="string">"key"</span>).toString();</span><br><span class="line">        QString value = transObj.value(<span class="string">"value"</span>).toString();</span><br><span class="line">        m_map[lang][key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> QString &amp;Trans::currentLang() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_currentLang;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> QStringList &amp;Trans::languages() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_languages;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> QString &amp;Trans::transString() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_transString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Trans::initEnglish()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m_map.contains(cEnglisthStr)) &#123;</span><br><span class="line">        QHash&lt;QString, QString&gt; <span class="built_in">map</span>;</span><br><span class="line">        <span class="keyword">if</span> (m_map.contains(cChineseStr)) &#123;</span><br><span class="line">            <span class="built_in">map</span> = m_map.value(cChineseStr);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">map</span> = m_map.value(m_map.keys().first());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> key : <span class="built_in">map</span>.uniqueKeys()) &#123;</span><br><span class="line">            m_map[cEnglisthStr][key] = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QString Trans::trans(<span class="keyword">const</span> QString&amp; source) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_map.value(m_currentLang).value(source, source);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Trans::setCurrentLang(<span class="keyword">const</span> QString&amp; currentLang)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_currentLang == currentLang)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    m_currentLang = currentLang;</span><br><span class="line">    <span class="function">emit <span class="title">currentLangChanged</span><span class="params">(m_currentLang)</span></span>;</span><br><span class="line">    <span class="function">emit <span class="title">transStringChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Trans::setLanguages(<span class="keyword">const</span> QStringList&amp; languages)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_languages == languages)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    m_languages = languages;</span><br><span class="line">    <span class="function">emit <span class="title">languagesChanged</span><span class="params">(m_languages)</span></span>;</span><br><span class="line">    <span class="function">emit <span class="title">transStringChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、Qml中使用新的翻译语法</p><p>qml中的语法如下：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Text</span> &#123;</span><br><span class="line">    <span class="attribute">text</span>: trans.trans(<span class="string">"Welcome"</span>)  + trans.transString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个很常规的’Qml属性绑定’,或者叫’绑定表达式’, 这样写了以后，text的值依赖于trans.trans()函数返回值和 transString。</p><p>当text依赖的属性发出change信号时，qml引擎会重新对这个表达式求值，并把结果赋值给text。</p><p>一般情况下，text的值就是trans的返回值，后面的空值不会影响到结果。</p><p>当前语言被改变时，函数没有change信号，而transString属性的change信号会被触发，导致qml引擎会重新对这个表达式求值，</p><p>此时会重新调用trans函数，按照新的语言返回翻译结果。</p><p>Text组件的text属性变化时，会自己刷新UI。</p><p>于是，就实现了动态翻译多国语言。</p><p>对于ListModel,就把静态字符串换成动态的变量即可：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ListView</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">delegate</span>: <span class="title">Text</span> &#123;</span><br><span class="line">        <span class="attribute">text</span>: trans.trans(modelData)  + trans.transString</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂一些的格式化字符串，也是没有问题的：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Text</span> &#123;</span><br><span class="line">    <span class="attribute">text</span>: trans.trans(<span class="string">"Today is %1, i feel %2"</span>).arg(trans.trans(<span class="string">"Sunday"</span>)).arg(trans.trans(<span class="string">"happy"</span>))  + trans.transString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的翻译文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"lang"</span>: <span class="string">"简体中文"</span>,</span><br><span class="line">    <span class="attr">"trans"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"key"</span>: <span class="string">"Today is %1, i feel %2"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"今天是%1, 我感觉%2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"key"</span>: <span class="string">"Sunday"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"星期天"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"key"</span>: <span class="string">"happy"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"开心"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于批量翻译"><a href="#关于批量翻译" class="headerlink" title="关于批量翻译"></a>关于批量翻译</h2><p>翻译效果不太理想，不过还是可以分享一下方法。</p><p>首先是提取出了所有要翻译的字符串：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//key.json</span><br><span class="line">[</span><br><span class="line">    <span class="string">"Chinese"</span>,</span><br><span class="line">    <span class="string">"traditional Chinese"</span>,</span><br><span class="line">    <span class="string">"Cantonese"</span>,</span><br><span class="line">    <span class="string">"classical Chinese"</span>,</span><br><span class="line">    <span class="string">"Japanese"</span>,</span><br><span class="line">    <span class="string">"Korean"</span>,</span><br><span class="line">    <span class="string">"French"</span>,</span><br><span class="line">    <span class="string">"Spanish"</span>,</span><br><span class="line">    <span class="string">"Thai"</span>,</span><br><span class="line">    <span class="string">"Arabic"</span>,</span><br><span class="line">    <span class="string">"Russian"</span>,</span><br><span class="line">    <span class="string">"Portuguese"</span>,</span><br><span class="line">    <span class="string">"German"</span>,</span><br><span class="line">    <span class="string">"Italian"</span>,</span><br><span class="line">    <span class="string">"Greek"</span>,</span><br><span class="line">    <span class="string">"Dutch"</span>,</span><br><span class="line">    <span class="string">"Polish"</span>,</span><br><span class="line">    <span class="string">"Bulgarian"</span>,</span><br><span class="line">    <span class="string">"Estonian"</span>,</span><br><span class="line">    <span class="string">"Danish"</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>其次是写了一个PowerShell脚本，逐个调用百度翻译API，并把结果按照前面的json输出。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># trans.ps1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要注册百度翻译的app，获得id和secret</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$baiduId</span> = <span class="string">"xxxxxxxxxx"</span></span><br><span class="line"><span class="variable">$baiduSecret</span> = <span class="string">"xxxxxxxxx"</span></span><br><span class="line"><span class="comment"># 列出百度翻译 支持的语言</span></span><br><span class="line"><span class="variable">$baiduLangs</span> = @&#123;</span><br><span class="line">    zh=<span class="string">"中文"</span>;</span><br><span class="line">    <span class="comment"># cht="繁体中文";</span></span><br><span class="line">    yue=<span class="string">"粤语"</span>;</span><br><span class="line">    wyw=<span class="string">"文言文"</span>;</span><br><span class="line">    jp=<span class="string">"日语"</span>;</span><br><span class="line">    kor=<span class="string">"韩语"</span>;</span><br><span class="line">    fra=<span class="string">"法语"</span>;</span><br><span class="line">    spa=<span class="string">"西班牙语"</span>;</span><br><span class="line">    th=<span class="string">"泰语"</span>;</span><br><span class="line">    ara=<span class="string">"阿拉伯语"</span>;</span><br><span class="line">    ru=<span class="string">"俄语"</span>;</span><br><span class="line">    pt=<span class="string">"葡萄牙语"</span>;</span><br><span class="line">    de=<span class="string">"德语"</span>;</span><br><span class="line">    it=<span class="string">"意大利语"</span>;</span><br><span class="line">    el=<span class="string">"希腊语"</span>;</span><br><span class="line">    nl=<span class="string">"荷兰语"</span>;</span><br><span class="line">    <span class="comment"># pl="波兰语";</span></span><br><span class="line">    bul=<span class="string">"保加利亚语"</span>;</span><br><span class="line">    est=<span class="string">"爱沙尼亚语"</span>;</span><br><span class="line">    dan=<span class="string">"丹麦语"</span>;</span><br><span class="line">    fin=<span class="string">"芬兰语"</span>;</span><br><span class="line">    cs=<span class="string">"捷克语"</span>;</span><br><span class="line">    rom=<span class="string">"罗马尼亚语"</span>;</span><br><span class="line">    <span class="comment"># slo="斯洛文尼亚语";</span></span><br><span class="line">    <span class="comment"># swe="瑞典语";</span></span><br><span class="line">    hu=<span class="string">"匈牙利语"</span>;</span><br><span class="line">    <span class="comment"># vie="越南语";</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 计算MD5</span></span><br><span class="line"><span class="keyword">function</span> getHash([string]<span class="variable">$source</span>) &#123;</span><br><span class="line">    <span class="variable">$stringAsStream</span> = [System.IO.MemoryStream]::new()</span><br><span class="line">    <span class="variable">$writer</span> = [System.IO.StreamWriter]::new(<span class="variable">$stringAsStream</span>)</span><br><span class="line">    <span class="variable">$writer</span>.write(<span class="variable">$source</span>)</span><br><span class="line">    <span class="variable">$writer</span>.Flush()</span><br><span class="line">    <span class="variable">$stringAsStream</span>.Position = <span class="number">0</span></span><br><span class="line">    <span class="variable">$hash</span> = <span class="built_in">Get-FileHash</span> -InputStream <span class="variable">$stringAsStream</span> -algorithm MD5</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$hash</span>.Hash.toString().toLower()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度翻译的调用</span></span><br><span class="line"><span class="keyword">function</span> baiduTrans &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        [string]<span class="variable">$q</span>,</span><br><span class="line">        [string]<span class="variable">$from</span> = <span class="string">'en'</span>,</span><br><span class="line">        [string]<span class="variable">$to</span> = <span class="string">'zh'</span></span><br><span class="line">    </span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 随机盐</span></span><br><span class="line">    <span class="variable">$salt</span> = <span class="built_in">Get-Random</span></span><br><span class="line">    <span class="comment"># token拼接</span></span><br><span class="line">    <span class="variable">$signtoken</span> = <span class="string">"&#123;0&#125;&#123;1&#125;&#123;2&#125;&#123;3&#125;"</span> -f <span class="variable">$baiduId</span>, <span class="variable">$q</span>, <span class="variable">$salt</span>, <span class="variable">$baiduSecret</span></span><br><span class="line">    <span class="comment"># 计算md5</span></span><br><span class="line">    <span class="variable">$signtoken</span> = getHash <span class="variable">$signtoken</span></span><br><span class="line">    <span class="comment"># POST body</span></span><br><span class="line">    <span class="variable">$body</span> = @&#123;</span><br><span class="line">        q     = <span class="variable">$q</span></span><br><span class="line">        from  = <span class="variable">$from</span></span><br><span class="line">        to    = <span class="variable">$to</span></span><br><span class="line">        appid = <span class="variable">$baiduId</span></span><br><span class="line">        salt  = <span class="variable">$salt</span></span><br><span class="line">        sign  = <span class="variable">$signtoken</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$response</span> = <span class="built_in">Invoke-RestMethod</span> http://api.fanyi.baidu.com/api/trans/vip/translate -Method Post -Body <span class="variable">$body</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#return $response.dst.toString()</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">$null</span> <span class="nomarkup">-ne</span> <span class="variable">$response</span>.trans_result) &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="variable">$response</span>.trans_result[<span class="number">0</span>].dst </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$q</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">function</span> main() &#123;</span><br><span class="line">    <span class="comment"># 读取keys.json</span></span><br><span class="line">    <span class="variable">$json</span> = <span class="built_in">Get-Content</span> <span class="string">'keys.json'</span> -Encoding  utf8 | <span class="built_in">ConvertFrom-Json</span></span><br><span class="line">    <span class="comment"># 每种语言都翻译一遍</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$lang</span> <span class="keyword">in</span> <span class="variable">$baiduLangs</span>.Keys) &#123;</span><br><span class="line">        <span class="built_in">Write-Host</span> <span class="variable">$lang</span></span><br><span class="line">        <span class="variable">$tlang</span> = <span class="variable">$baiduLangs</span>[<span class="variable">$lang</span>]</span><br><span class="line">        <span class="comment"># 目标语言的名称，默认都用中文表示的。这里将名称翻译成对应的语言。比如：英语 就叫'English'， 日语就用'日本語'</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$lang</span> <span class="nomarkup">-ne</span> <span class="string">"zh"</span>) &#123;</span><br><span class="line">            <span class="variable">$tlang</span> = baiduTrans <span class="variable">$baiduLangs</span>[<span class="variable">$lang</span>] <span class="string">"zh"</span> <span class="variable">$lang</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 逐条翻译</span></span><br><span class="line">        <span class="variable">$res</span>=@()</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$key</span> <span class="keyword">in</span> <span class="variable">$json</span>) &#123;</span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="variable">$key</span></span><br><span class="line">            <span class="variable">$dst</span> = baiduTrans <span class="variable">$key</span> <span class="string">"en"</span> <span class="variable">$lang</span></span><br><span class="line">            <span class="variable">$t</span> = @&#123;<span class="string">'key'</span>=<span class="variable">$key</span>; <span class="string">'value'</span>=<span class="variable">$dst</span>&#125;</span><br><span class="line">            <span class="variable">$res</span> +=<span class="variable">$t</span></span><br><span class="line">            <span class="comment"># 延时1秒，毕竟没有充值，被限速了，每秒只能请求1次。</span></span><br><span class="line">            <span class="built_in">Start-Sleep</span> -Seconds <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 按格式输出</span></span><br><span class="line">        <span class="variable">$obj</span> = @&#123;</span><br><span class="line">            <span class="string">"lang"</span> = <span class="variable">$tlang</span></span><br><span class="line">            <span class="string">"trans"</span> = <span class="variable">$res</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$targetFileName</span> = <span class="string">"language_&#123;0&#125;.json"</span> -f <span class="variable">$lang</span></span><br><span class="line">        <span class="variable">$obj</span> | <span class="built_in">ConvertTo-Json</span> | <span class="built_in">Set-Content</span> <span class="variable">$targetFileName</span> -Encoding UTF8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># baiduTrans  "apple" "en" "zh"</span></span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure><p>结果如下，生成了一堆json文件<br><img src="/images/Qml12/2.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Qml中带个尾巴的写法，虽然有些别扭，但是够用、能达到动态翻译的目标。</p><p>如果你有更好的思路，欢迎留言交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#简介&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#源码&quot;&gt;源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#效果预览&quot;&gt;效果预览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#qt本身的国际化&quot;&gt;Qt本身的国际化&lt;/a&gt;&lt;/li&gt;
      
    
    </summary>
    
      <category term="玩转Qml" scheme="https://jaredtao.github.io/categories/%E7%8E%A9%E8%BD%ACQml/"/>
    
    
      <category term="Qt" scheme="https://jaredtao.github.io/tags/Qt/"/>
    
      <category term="Qml" scheme="https://jaredtao.github.io/tags/Qml/"/>
    
      <category term="QtQuick" scheme="https://jaredtao.github.io/tags/QtQuick/"/>
    
      <category term="组件化编程" scheme="https://jaredtao.github.io/tags/%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
